/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	readonly "/access-tokens/latest/projects/{projectKey}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get project HTTP tokens
		 * @description Get all access tokens associated with the given project.
		 */
		readonly get: operations["getAllAccessTokens"]
		/**
		 * Create project HTTP token
		 * @description Create an access token for the project according to the given request.
		 */
		readonly put: operations["createAccessToken"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/access-tokens/latest/projects/{projectKey}/{tokenId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get HTTP token by ID
		 * @description Get the access token identified by the given ID.
		 */
		readonly get: operations["getById"]
		readonly put?: never
		/**
		 * Update HTTP token
		 * @description Modify an access token according to the given request. Any fields not specified will not be altered.
		 */
		readonly post: operations["updateAccessToken"]
		/**
		 * Delete a HTTP token
		 * @description Delete the access token identified by the given ID.
		 */
		readonly delete: operations["deleteById"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/access-tokens/latest/projects/{projectKey}/repos/{repositorySlug}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repository HTTP tokens
		 * @description Get all access tokens associated with the given repository.
		 */
		readonly get: operations["getAllAccessTokens_1"]
		/**
		 * Create repository HTTP token
		 * @description Create an access token for the repository according to the given request.
		 */
		readonly put: operations["createAccessToken_1"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/access-tokens/latest/projects/{projectKey}/repos/{repositorySlug}/{tokenId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get HTTP token by ID
		 * @description Get the access token identified by the given ID.
		 */
		readonly get: operations["getById_1"]
		readonly put?: never
		/**
		 * Update HTTP token
		 * @description Modify an access token according to the given request. Any fields not specified will not be altered.
		 */
		readonly post: operations["updateAccessToken_1"]
		/**
		 * Delete a HTTP token
		 * @description Delete the access token identified by the given ID.
		 */
		readonly delete: operations["deleteById_1"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/access-tokens/latest/users/{userSlug}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get personal HTTP tokens
		 * @description Get all access tokens associated with the given user.
		 */
		readonly get: operations["getAllAccessTokens_2"]
		/**
		 * Create personal HTTP token
		 * @description Create an access token for the user according to the given request.
		 */
		readonly put: operations["createAccessToken_2"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/access-tokens/latest/users/{userSlug}/{tokenId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get HTTP token by ID
		 * @description Get the access token identified by the given ID.
		 */
		readonly get: operations["getById_2"]
		readonly put?: never
		/**
		 * Update HTTP token
		 * @description Modify an access token according to the given request. Any fields not specified will not be altered.
		 */
		readonly post: operations["updateAccessToken_2"]
		/**
		 * Delete a HTTP token
		 * @description Delete the access token identified by the given ID.
		 */
		readonly delete: operations["deleteById_2"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/admin": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get global SSH key settings
		 * @description Gets the global settings that enforce the maximum expiry of SSH keys and restrictions on SSH key types.
		 */
		readonly get: operations["getGlobalSettings"]
		/**
		 * Update global SSH key settings
		 * @description Updates the global settings that enforces the maximum expiry of SSH keys and restrictions on SSH key types.
		 */
		readonly put: operations["updateGlobalSettings"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/admin/supported-key-types": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get supported SSH key algorithms and lengths
		 * @description Retrieves a list of all supported SSH key algorithms and lengths.
		 */
		readonly get: operations["getSupportedKeyTypes"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/banner": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get announcement banner
		 * @description Gets the announcement banner, if one exists and is available to the user
		 */
		readonly get: operations["getBanner"]
		/**
		 * Update/Set announcement banner
		 * @description Sets the announcement banner with the provided JSON.
		 *     Only users authenticated as Admins may call this resource
		 */
		readonly put: operations["setBanner"]
		readonly post?: never
		/**
		 * Delete announcement banner
		 * @description Deletes a banner, if one is present in the database.
		 */
		readonly delete: operations["deleteBanner"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/cluster": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get cluster node information
		 * @description Gets information about the nodes that currently make up the stash cluster.
		 *
		 *     The authenticated user must have the <strong>SYS_ADMIN</strong> permission to call this resource.
		 */
		readonly get: operations["getInformation"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/default-branch": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get the default branch
		 * @description Retrieves the configured global default branch, which is used when creating new repositories if an explicit default branch is not specified.
		 *
		 *     The user must be authenticated to call this resource.
		 */
		readonly get: operations["getDefaultBranch"]
		/**
		 * Update/Set default branch
		 * @description Configures the global default branch, which is used when creating new repositories if an explicit default branch is not specified.
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly put: operations["setDefaultBranch"]
		readonly post?: never
		/**
		 * Clear default branch
		 * @description Clears the global default branch, which is used when creating new repositories if an explicit default branch is not specified, if one has been configured.
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly delete: operations["clearDefaultBranch"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/git/mesh/config/control-plane.pem": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get the control plane PEM
		 * @description Obtain the control plane PEM.
		 *
		 *     The authenticated user must have **SYS_ADMIN** permission.
		 */
		readonly get: operations["getControlPlanePublicKey"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/git/mesh/diagnostics/connectivity": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Generate Mesh connectivity report
		 * @description Generates a connectivity report between the Bitbucket node(s) and the Mesh node(s).
		 *
		 *     The authenticated user must have **SYS_ADMIN** permission.
		 */
		readonly get: operations["connectivity"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/git/mesh/nodes": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get all registered Mesh nodes
		 * @description Get all the registered Mesh nodes.
		 *
		 *     The authenticated user must have **SYS_ADMIN** permission.
		 */
		readonly get: operations["getAllRegisteredMeshNodes"]
		readonly put?: never
		/**
		 * Register new Mesh node
		 * @description Register a new Mesh node.
		 *
		 *     The authenticated user must have **SYS_ADMIN** permission.
		 */
		readonly post: operations["registerNewMeshNode"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/git/mesh/nodes/{id}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get Mesh node
		 * @description Get the registered Mesh node that matches the supplied ID.
		 *
		 *     The authenticated user must have **SYS_ADMIN** permission.
		 */
		readonly get: operations["getRegisteredMeshNodeById"]
		/**
		 * Update Mesh node
		 * @description Update a Mesh node.
		 *
		 *     The authenticated user must have **SYS_ADMIN** permission.
		 */
		readonly put: operations["updateMeshNode"]
		readonly post?: never
		/**
		 * Delete Mesh node
		 * @description Delete a Mesh node
		 *
		 *     The authenticated user must have **SYS_ADMIN** permission.
		 */
		readonly delete: operations["delete_2"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/git/mesh/support-zips": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get support zips for all Mesh nodes
		 * @description Get the support zips for all the Mesh nodes.
		 *
		 *     The authenticated user must have **SYS_ADMIN** permission.
		 */
		readonly get: operations["getSupportZips"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/git/mesh/support-zips/{id}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get support zip for node
		 * @description Get the support zip for the Mesh node that matches the specified ID.
		 *
		 *     The authenticated user must have **SYS_ADMIN** permission.
		 */
		readonly get: operations["getSupportZip"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/groups": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get groups
		 * @description Retrieve a page of groups.
		 *
		 *     The authenticated user must have <strong>LICENSED_USER</strong> permission or higher to call this resource.
		 */
		readonly get: operations["getGroups_1"]
		readonly put?: never
		/**
		 * Create group
		 * @description Create a new group.
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
		 */
		readonly post: operations["createGroup"]
		/**
		 * Remove group
		 * @description Deletes the specified group, removing them from the system. This also removes any permissions that may have been granted to the group.
		 *
		 *     A user may not delete the last group that is granting them administrative permissions, or a group with greater permissions than themselves.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly delete: operations["deleteGroup"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/groups/add-user": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Add user to group
		 * @deprecated
		 * @description <strong>Deprecated since 2.10</strong>. Use /rest/users/add-groups instead.
		 *
		 *     Add a user to a group.
		 *
		 *     In the request entity, the <em>context</em> attribute is the group and the <em>itemName</em> is the user.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly post: operations["addUserToGroup"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/groups/add-users": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Add multiple users to group
		 * @description Add multiple users to a group.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly post: operations["addUsersToGroup"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/groups/more-members": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get group members
		 * @description Retrieves a list of users that are members of a specified group. <p>The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.
		 */
		readonly get: operations["findUsersInGroup"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/groups/more-non-members": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get members not in group
		 * @description Retrieves a list of users that are <em>not</em> members of a specified group. <p>The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.
		 */
		readonly get: operations["findUsersNotInGroup"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/groups/remove-user": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Remove user from group
		 * @deprecated
		 * @description <strong>Deprecated since 2.10</strong>. Use /rest/users/remove-groups instead.
		 *
		 *     Remove a user from a group.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 *
		 *     In the request entity, the <em>context</em> attribute is the group and the <em>itemName</em> is the user.
		 */
		readonly post: operations["removeUserFromGroup"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/license": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get license details
		 * @description Retrieves details about the current license, as well as the current status of the system with regards to the installed license. The status includes the current number of users applied toward the license limit, as well as any status messages about the license (warnings about expiry or user counts exceeding license limits).
		 *
		 *     The authenticated user must have <b>ADMIN</b> permission. Unauthenticated users, and non-administrators, are not permitted to access license details.
		 */
		readonly get: operations["get_2"]
		readonly put?: never
		/**
		 * Update license
		 * @description Decodes the provided encoded license and sets it as the active license. If no license was provided, a 400 is returned. If the license cannot be decoded, or cannot be applied, a 409 is returned. Some possible reasons a license may not be applied include:
		 *
		 *     - It is for a different product
		 *     - It is already expired
		 *
		 *
		 *     Otherwise, if the license is updated successfully, details for the new license are returned with a 200 response.
		 *
		 *     <b>Warning</b>: It is possible to downgrade the license during update, applying a license with a lower number of permitted users. If the number of currently-licensed users exceeds the limits of the new license, pushing will be disabled until the licensed user count is brought into compliance with the new license.
		 *
		 *     The authenticated user must have <b>SYS_ADMIN</b> permission. <b>ADMIN</b> users may <i>view</i> the current license details, but they may not <i>update</i> the license.
		 */
		readonly post: operations["updateLicense"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/mail-server": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get mail configuration
		 * @description Retrieves the current mail configuration.
		 *
		 *     The authenticated user must have the <strong>SYS_ADMIN</strong> permission to call this resource.
		 */
		readonly get: operations["getMailConfig"]
		/**
		 * Update mail configuration
		 * @description Updates the mail configuration.
		 *
		 *     The authenticated user must have the <strong>SYS_ADMIN</strong> permission to call this resource.
		 */
		readonly put: operations["setMailConfig"]
		readonly post?: never
		/**
		 * Delete mail configuration
		 * @description Deletes the current mail configuration.
		 *
		 *     The authenticated user must have the <strong>SYS_ADMIN</strong> permission to call this resource.
		 */
		readonly delete: operations["deleteMailConfig"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/mail-server/sender-address": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get server mail address
		 * @description Retrieves the server email address
		 */
		readonly get: operations["getSenderAddress"]
		/**
		 * Update server mail address
		 * @description Updates the server email address
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly put: operations["setSenderAddress"]
		readonly post?: never
		/**
		 * Update mail configuration
		 * @description Clears the server email address.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly delete: operations["clearSenderAddress"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/permissions/groups": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get groups with a global permission
		 * @description Retrieve a page of groups that have been granted at least one global permission.
		 *
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
		 */
		readonly get: operations["getGroupsWithAnyPermission"]
		/**
		 * Update global permission for group
		 * @description Promote or demote a group's global permission level. Available global permissions are:
		 *
		 *
		 *     - LICENSED_USER
		 *     - PROJECT_CREATE
		 *     - ADMIN
		 *     - SYS_ADMIN
		 *
		 *     See the <a href="https://confluence.atlassian.com/display/BitbucketServer/Global+permissions">Bitbucket Data Center documentation</a> for a detailed explanation of what each permission entails.
		 *
		 *
		 *     The authenticated user must have:
		 *
		 *
		 *     - <strong>ADMIN</strong> permission or higher; and
		 *     - the permission they are attempting to grant or higher; and
		 *     - greater or equal permissions than the current permission level of the group (a user may not demote the     permission level of a group with higher permissions than them)
		 *
		 *
		 *     to call this resource. In addition, a user may not demote a group's permission level if their own permission
		 *     level would be reduced as a result.
		 */
		readonly put: operations["setPermissionForGroups"]
		readonly post?: never
		/**
		 * Revoke all global permissions for group
		 * @description Revoke all global permissions for a group.
		 *
		 *
		 *
		 *     The authenticated user must have:
		 *
		 *
		 *     - <strong>ADMIN</strong> permission or higher; and
		 *     - greater or equal permissions than the current permission level of the group (a user may not demote the     permission level of a group with higher permissions than them)
		 *
		 *
		 *     to call this resource. In addition, a user may not revoke a group's permissions if their own permission level
		 *     would be reduced as a result.
		 */
		readonly delete: operations["revokePermissionsForGroup"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/permissions/groups/none": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get groups with no global permission
		 * @description Retrieve a page of groups that have no granted global permissions.
		 *
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
		 */
		readonly get: operations["getGroupsWithoutAnyPermission"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/permissions/users": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get users with a global permission
		 * @description Retrieve a page of users that have been granted at least one global permission.
		 *
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
		 */
		readonly get: operations["getUsersWithAnyPermission"]
		/**
		 * Update global permission for user
		 * @description Promote or demote the global permission level of a user. Available global permissions are:
		 *
		 *
		 *     - LICENSED_USER
		 *     - PROJECT_CREATE
		 *     - ADMIN
		 *     - SYS_ADMIN
		 *
		 *
		 *     See the <a href="https://confluence.atlassian.com/display/BitbucketServer/Global+permissions">Bitbucket Data Center documentation</a> for a detailed explanation of what each permission entails.
		 *
		 *
		 *     The authenticated user must have:
		 *
		 *
		 *     - <strong>ADMIN</strong> permission or higher; and
		 *     - the permission they are attempting to grant; and
		 *     - greater or equal permissions than the current permission level of the user (a user may not demote the     permission level of a user with higher permissions than them)
		 *
		 *
		 *     to call this resource. In addition, a user may not demote their own permission level.
		 */
		readonly put: operations["setPermissionForUsers"]
		readonly post?: never
		/**
		 * Revoke all global permissions for user
		 * @description Revoke all global permissions for a user.
		 *
		 *
		 *     The authenticated user must have:
		 *
		 *
		 *     - <strong>ADMIN</strong> permission or higher; and
		 *     - greater or equal permissions than the current permission level of the user (a user may not demote the     permission level of a user with higher permissions than them)
		 *
		 *
		 *     to call this resource. In addition, a user may not demote their own permission level.
		 */
		readonly delete: operations["revokePermissionsForUser"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/permissions/users/none": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get users with no global permission
		 * @description Retrieve a page of users that have no granted global permissions.
		 *
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
		 */
		readonly get: operations["getUsersWithoutAnyPermission"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/pull-requests/{scmId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get merge strategies
		 * @description Retrieve the merge strategies available for this instance.
		 *
		 *     The user must be authenticated to call this resource.
		 */
		readonly get: operations["getMergeConfig"]
		readonly put?: never
		/**
		 * Update merge strategies
		 * @description Update the pull request merge strategies for the context repository.
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission to call this resource.
		 *
		 *     Only the strategies provided will be enabled, only one may be set to default
		 *
		 *     The commit message template will not be updated if not provided, and will be deleted if the `commitMessageTemplate` attribute is empty, i.e: `commitMessageTemplate: {}`.
		 *
		 *     An explicitly set pull request merge strategy configuration can be deleted by POSTing a document with an empty `mergeConfig` attribute. i.e:
		 *     ```
		 *     {
		 *         "mergeConfig": {}
		 *     }
		 *     ```
		 *
		 *     Upon completion of this request, the effective configuration will be the default configuration.
		 */
		readonly post: operations["setMergeConfig"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/rate-limit/history": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get rate limit history
		 * @description Retrieves the recent rate limit history for the instance.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly get: operations["getHistory"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/rate-limit/settings": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get rate limit settings
		 * @description Retrieves the rate limit settings for the instance.
		 *
		 *     The user must be authenticated to call this resource.
		 */
		readonly get: operations["getSettings_2"]
		/**
		 * Set rate limit
		 * @description Sets the rate limit settings for the instance.
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly put: operations["setSettings_2"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/rate-limit/settings/users": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get rate limit settings for user
		 * @description Retrieves the user-specific rate limit settings for the given user.
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly get: operations["getAllRateLimitSettings"]
		readonly put?: never
		/**
		 * Set rate limit settings for users
		 * @description Sets the given rate limit settings for the given users.
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly post: operations["set_2"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/rate-limit/settings/users/{userSlug}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get user specific rate limit settings
		 * @description Retrieves the user-specific rate limit settings for the given user.
		 *
		 *     To call this resource, the user must be authenticated and either have <strong>ADMIN</strong> permission or be the same user as the one whose settings are requested. A user with <strong>ADMIN</strong> permission cannot get the settings of a user with <strong>SYS_ADMIN</strong> permission.
		 */
		readonly get: operations["get_6"]
		/**
		 * Set rate limit settings for user
		 * @description Sets the given rate limit settings for the given user.
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly put: operations["set_3"]
		readonly post?: never
		/**
		 * Delete user specific rate limit settings
		 * @description Deletes the user-specific rate limit settings for the given user.
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly delete: operations["delete_8"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/user-directories": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get directories
		 * @description Retrieve a list of active directories.
		 *
		 *      The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly get: operations["getUserDirectories"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/users": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get users
		 * @description Retrieve a page of users.
		 *
		 *      The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.
		 */
		readonly get: operations["getUsers_1"]
		/**
		 * Update user details
		 * @description Update a user's details.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly put: operations["updateUserDetails"]
		/**
		 * Create user
		 * @description Creates a new user from the assembled query parameters.
		 *
		 *     The default group can be used to control initial permissions for new users, such as granting users the ability to login or providing read access to certain projects or repositories. If the user is not added to the default group, they may not be able to login after their account is created until explicit permissions are configured.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly post: operations["createUser"]
		/**
		 * Remove user
		 * @description Deletes the specified user, removing them from the system. This also removes any permissions that may have been granted to the user.
		 *
		 *     A user may not delete themselves, and a user with <strong>ADMIN</strong> permissions may not delete a user with <strong>SYS_ADMIN</strong>permissions.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly delete: operations["deleteUser"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/users/add-group": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Add user to group
		 * @deprecated
		 * @description <strong>Deprecated since 2.10</strong>. Use /rest/users/add-groups instead.
		 *
		 *     Add a user to a group. This is very similar to <code>groups/add-user</code>, but with the <em>context</em> and <em>itemName</em> attributes of the supplied request entity reversed. On the face of it this may appear redundant, but it facilitates a specific UI component in the application.
		 *
		 *     In the request entity, the <em>context</em> attribute is the user and the <em>itemName</em> is the group.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly post: operations["addGroupToUser"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/users/add-groups": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Add user to groups
		 * @description Add a user to one or more groups.
		 *
		 *      The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly post: operations["addUserToGroups"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/users/captcha": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		readonly post?: never
		/**
		 * Clear CAPTCHA for user
		 * @description Clears any CAPTCHA challenge that may constrain the user with the supplied username when they authenticate. Additionally any counter or metric that contributed towards the user being issued the CAPTCHA challenge (for instance too many consecutive failed logins) will also be reset.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource, and may not clear the CAPTCHA of a user with greater permissions than themselves.
		 */
		readonly delete: operations["clearUserCaptchaChallenge"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/users/credentials": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * Set password for user
		 * @description Update a user's password.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource, and may not update the password of a user with greater permissions than themselves.
		 */
		readonly put: operations["updateUserPassword"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/users/erasure": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Check user removal
		 * @description Validate if a user can be erased.
		 *
		 *     A username is only valid for erasure if it exists as the username of a deleted user. This endpoint will return an appropriate error response if the supplied username is invalid for erasure.
		 *
		 *     This endpoint does <strong>not</strong> perform the actual user erasure, and will not modify the application in any way.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly get: operations["validateErasable"]
		readonly put?: never
		/**
		 * Erase user information
		 * @description Erases personally identifying user data for a deleted user.
		 *
		 *     References in the application to the original username will be either removed or updated to a new non-identifying username. Refer to the <a href="https://confluence.atlassian.com/gdpr/bitbucket-right-to-erasure-949770560.html">support guide</a> for details about what data is and isn't erased.
		 *
		 *     User erasure can only be performed on a deleted user. If the user has not been deleted first then this endpoint will return a bad request and no erasure will be performed.
		 *
		 *     Erasing user data is <strong>irreversible</strong> and may lead to a degraded user experience. This method should not be used as part of a standard user deletion and cleanup process.
		 *
		 *     Plugins can participate in user erasure by defining a <code>&lt;user-erasure-handler&gt;</code> module. If one or more plugin modules fail, an error summary of the failing modules is returned.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly post: operations["eraseUser"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/users/more-members": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get groups for user
		 * @description Retrieves a list of users that are <em>not</em> members of a specified group. <p>The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.
		 */
		readonly get: operations["findGroupsForUser"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/users/more-non-members": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Find other groups for user
		 * @description Retrieves a list of groups the specified user is <em>not</em> a member of. <p>The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.
		 */
		readonly get: operations["findOtherGroupsForUser"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/users/remove-group": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Remove user from group
		 * @description Remove a user from a group. This is very similar to <code>groups/remove-user</code>, but with the <em>context</em> and <em>itemName</em> attributes of the supplied request entity reversed. On the face of it this may appear redundant, but it facilitates a specific UI component in the application.
		 *
		 *     In the request entity, the <em>context</em> attribute is the user and the <em>itemName</em> is the group.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly post: operations["removeGroupFromUser"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/admin/users/rename": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Rename user
		 * @description Rename a user.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly post: operations["renameUser"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/application-properties": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get application properties
		 * @description Retrieve version information and other application properties.
		 *
		 *     No authentication is required to call this resource.
		 */
		readonly get: operations["getApplicationProperties"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/build/capabilities": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get build capabilities
		 * @description Returns the build capabilities of this instance
		 */
		readonly get: operations["getCapabilities"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/dashboard/pull-request-suggestions": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get pull request suggestions
		 * @description Retrieves a page of suggestions for pull requests that the currently authenticated user may wish to raise. Such suggestions are based on ref changes occurring and so contain the ref change that prompted the suggestion plus the time the change event occurred. Changes will be returned in descending order based on the time the change that prompted the suggestion occurred.
		 *
		 *     Note that although the response is a page object, the interface does not support paging, however a limit can be applied to the size of the returned page.
		 */
		readonly get: operations["getPullRequestSuggestions"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/dashboard/pull-requests": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get pull requests for a user
		 * @description Retrieve a page of pull requests where a user is involved as either a reviewer, author or a participant. The request may be filtered by pull request state, role or participant status.
		 */
		readonly get: operations["getPullRequests_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/deployment/capabilities": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get deployment capabilities
		 * @description Returns the Deployment capabilities of this instance
		 */
		readonly get: operations["getCapabilities_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/groups": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get group names
		 * @description Retrieve a page of group names.
		 *
		 *     The authenticated user must have <strong>LICENSED_USER</strong> permission or higher to call this resource.
		 */
		readonly get: operations["getGroups"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/hook-scripts": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Create a new hook script
		 * @description Create a new hook script.
		 *
		 *     This endpoint requires **SYS_ADMIN** permission.
		 */
		readonly post: operations["createHookScript"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/hook-scripts/{scriptId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get a hook script
		 * @description Retrieves a hook script by ID.
		 */
		readonly get: operations["getHookScript"]
		/**
		 * Update a hook script
		 * @description Updates a hook script.
		 *
		 *     This endpoint requires **SYS_ADMIN** permission.
		 */
		readonly put: operations["updateHookScript"]
		readonly post?: never
		/**
		 * Delete a hook script.
		 * @description Deletes a registered hook script.
		 *
		 *     This endpoint requires **SYS_ADMIN** permission.
		 */
		readonly delete: operations["deleteHookScript"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/hook-scripts/{scriptId}/content": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get hook script content
		 * @description Retrieves the hook script content.
		 *
		 *     This endpoint requires **SYS_ADMIN** permission.
		 */
		readonly get: operations["read"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/hooks/{hookKey}/avatar": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get project avatar
		 * @description Retrieve the avatar for the project matching the supplied <strong>moduleKey</strong>.
		 */
		readonly get: operations["getAvatar"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/inbox/pull-requests": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get pull requests in inbox
		 * @description Returns a page of pull requests in the user's inbox.
		 */
		readonly get: operations["getPullRequests_2"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/inbox/pull-requests/count": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get total number of pull requests in inbox
		 * @description Returns the total number of pull requests in the user's inbox
		 */
		readonly get: operations["getPullRequestCount"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/labels": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get all labels
		 * @description Returns a paged response of all the labels in the system.
		 *
		 *     The user needs to be authenticated to use this resource.
		 */
		readonly get: operations["getLabels"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/labels/{labelName}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get label
		 * @description Returns a label.
		 *
		 *     The user needs to be authenticated to use this resource.
		 */
		readonly get: operations["getLabel"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/labels/{labelName}/labeled": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get labelables for label
		 * @description Returns a page of labelables for a given label.
		 *
		 *     Only labelables that the authenticated user has view access to will be returned.
		 */
		readonly get: operations["getLabelables"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/logs/logger/{loggerName}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get current log level
		 * @description Retrieve the current log level for a given logger.
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
		 */
		readonly get: operations["getLevel"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/logs/logger/{loggerName}/{levelName}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * Set log level
		 * @description Set the current log level for a given logger.
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
		 */
		readonly put: operations["setLevel"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/logs/rootLogger": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get root log level
		 * @description  Retrieve the current log level for the root logger.
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
		 */
		readonly get: operations["getRootLevel"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/logs/rootLogger/{levelName}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * Set root log level
		 * @description Set the current log level for the root logger.
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
		 */
		readonly put: operations["setRootLevel"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/markup/preview": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Preview markdown render
		 * @description Preview generated HTML for the given markdown content.
		 *
		 *     Only authenticated users may call this resource.
		 */
		readonly post: operations["preview"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/migration/exports": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Start export job
		 * @description Starts a background job that exports the selected repositories.
		 *
		 *     Only 2 concurrent exports are supported _per cluster node_. If a request ends up on a node that is already running that many export jobs, the request will be rejected and an error returned.
		 *
		 *     The response includes a description of the job that has been started, and its ID can be used to query these details again, including the current progress, warnings and errors that occurred while processing the job, and to interrupt and cancel the execution of this job.
		 *
		 *     The request to start an export is similar to the one for previewing an export. Additionally, it accepts an optional parameter, `exportLocation`, which can be used to specify a _relative_ path within `data/migration/export` in the shared home directory. No locations outside of that directory will be accepted for exports.
		 *
		 *     There are essentially three ways to select repositories for export. Regardless of which you use, a few general rules apply:
		 *
		 *     - You can supply a list of selectors. The selection will be additive.
		 *     - Repositories that are selected more than once due to overlapping selectors will be de-duplicated and effectively exported only once.
		 *     - For every selected repository, its full fork hierarchy will be considered selected, even if parts of that hierarchy would otherwise not be matched by the provided selectors. For example, when you explicitly select a single repository only, but that repository is a fork, then its origin will be exported (and eventually imported), too.
		 *
		 *     Now, a single repository can be selected like this:
		 *
		 *     ```
		 *
		 *
		 *
		 *     {
		 *           "projectKey": "PRJ",
		 *           "slug": "my-repo"
		 *     }
		 *
		 *     ```
		 *
		 *     Second, all repositories in a specific project can be selected like this:
		 *
		 *     ```
		 *
		 *
		 *
		 *     {
		 *           "projectKey": "PRJ",
		 *           "slug": *"
		 *     }
		 *
		 *     ```
		 *
		 *     And third, all projects and repositories in the system would be selected like this:
		 *
		 *     ```
		 *
		 *
		 *
		 *     {
		 *           "projectKey": "*",
		 *           "slug": *"
		 *     }
		 *
		 *     ```
		 *
		 *     The authenticated user must have **ADMIN** permission or higher to call this resource.
		 */
		readonly post: operations["startExport"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/migration/exports/{jobId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get export job details
		 * @description Gets the details, including the current status and progress, of the export job identified by the given ID.
		 *
		 *     The authenticated user must have **ADMIN** permission or higher to call this resource.
		 */
		readonly get: operations["getExportJob"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/migration/exports/{jobId}/cancel": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Cancel export job
		 * @description Requests the cancellation of an export job.
		 *
		 *     The request to cancel a job will be processed successfully if the job is actually still running. If it has already finished (successfully or with errors) or if it has already been canceled before, then an error will be returned.
		 *
		 *     There might be a small delay between accepting the request and actually cancelling the job. In most cases, the delay will be close to instantaneously. In the unlikely case of communication issues across a cluster, it can however take a few seconds to cancel a job.
		 *
		 *     A client should always actively query the job status to confirm that a job has been successfully canceled.
		 *
		 *     The authenticated user must have **ADMIN** permission or higher to call this resource.
		 */
		readonly post: operations["cancelExportJob"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/migration/exports/{jobId}/messages": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get job messages
		 * @description Gets the messages generated by the job.
		 *
		 *     Without any filter, all messages will be returned, but the response can optionally be filtered for the following severities. The severity parameter can be repeated to include multiple severities in one response.
		 *
		 *     - INFO
		 *     - WARN
		 *     - ERROR
		 *
		 *     The authenticated user must have **ADMIN** permission or higher to call this resource.
		 */
		readonly get: operations["getExportJobMessages"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/migration/exports/preview": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Preview export
		 * @description Enumerates the projects and repositories that would be exported for a given export request.
		 *
		 *     All affected repositories will be enumerated explicitly, and while projects are listed as individual items in responses from this endpoint, their presence does not imply that all their repositories are included.
		 *
		 *     While this endpoint can be used to verify that all selectors in the request apply as intended, it should be noted that a subsequent, actual export might contain a different set of repositories, as they might have been added or deleted in the meantime.
		 *
		 *     Note that the overall response from this endpoint can become very large when a lot of repositories end up in the selection. This is why the server is streaming the response while it is being generated (as opposed to creating it in memory and then sending it all at once) and it can be consumed in a streaming way, too.
		 *
		 *     Also, due to the potential size of the response, projects and repositories are listed with fewer details than in other REST responses.
		 *
		 *     For a more detailed description of selectors, see the endpoint documentation for starting an export.
		 *
		 *     The authenticated user must have **ADMIN** permission or higher to call this resource.
		 */
		readonly post: operations["previewExport"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/migration/imports": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Start import job
		 * @description Starts a background job that imports the specified archive.
		 *
		 *     Only 1 import at a time is supported _per cluster_. If another request is made while an import is already running, the request will be rejected and an error returned.
		 *
		 *     The path in the request must point to a valid archive file. The file must be located within the `data/migration/import` directory in the shared home directory.
		 *
		 *     The authenticated user must have **ADMIN** permission or higher to call this resource.
		 */
		readonly post: operations["startImport"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/migration/imports/{jobId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get import job status
		 * @description Gets the details, including the current status and progress, of the import job identified by the given ID.
		 *
		 *     The authenticated user must have **ADMIN** permission or higher to call this resource.
		 */
		readonly get: operations["getImportJob"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/migration/imports/{jobId}/cancel": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Cancel import job
		 * @description Requests the cancellation of an import job.
		 *
		 *     The request to cancel a job will be processed successfully if the job is actually still running. If it has already finished (successfully or with errors) or if it has already been canceled before, then an error will be returned.
		 *
		 *     Note that import jobs are not canceled as instantaneously as export jobs. Rather, once the request has been accepted, there are a number of checkpoints at which the job will actually apply it and stop. This is to keep the system in a reasonably consistent state:
		 *
		 *     - After the current fork hierarchy has been imported and verified.
		 *     - Before the next repository is imported.
		 *     - Before the next pull request is imported.
		 *
		 *     A client should always actively query the job status to confirm that a job has been successfully canceled.
		 *
		 *     The authenticated user must have **ADMIN** permission or higher to call this resource.
		 */
		readonly post: operations["cancelImportJob"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/migration/imports/{jobId}/messages": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get import job messages
		 * @description Gets the messages generated by the job.
		 *
		 *     Without any filter, all messages will be returned, but the response can optionally be filtered for the following severities. The severity parameter can be repeated to include multiple severities in one response.
		 *
		 *     - INFO
		 *     - WARN
		 *     - ERROR
		 *
		 *     The authenticated user must have **ADMIN** permission or higher to call this resource.
		 */
		readonly get: operations["getImportJobMessages"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/migration/mesh": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Start Mesh migration job
		 * @description Starts a background job that migrates selected projects/repositories to Mesh.
		 *
		 *     Only 1 job is supported _per cluster_.
		 *
		 *     The response includes a description of the job that has been started, and its ID can be used to query these details again, including the current progress, and to interrupt and cancel the execution of this job.
		 *
		 *     The request to start a migration is similar to the one for previewing a migration.
		 *
		 *     There are essentially three ways to select repositories for migration. Regardless of which you use, a few general rules apply:
		 *
		 *         - You can supply a list of repository IDs and project IDs. The selection will be additive. All repositories     in the system are migrated if both lists are empty.     - Repositories that are selected more than once due to overlapping IDs will be de-duplicated and     effectively migrated only once.     - For every selected repository, its full fork hierarchy will be considered selected, even if parts of that     hierarchy would otherwise not be matched by the provided IDs. For example, when you explicitly     select a single repository only, but that repository is a fork, then its origin will be migrated too.
		 *
		 *     Now, a single repository can be selected like this:
		 *
		 *     ```
		 *
		 *          {
		 *          "repositoryIds": [1]
		 *          }
		 *     ```
		 *
		 *     Multiple repositories can be selected like this:
		 *
		 *
		 *
		 *     ```
		 *
		 *          {
		 *          "repositoryIds": [1, 2]
		 *          }
		 *     ```
		 *
		 *     Second, all repositories in a specific project can be selected like this:
		 *
		 *
		 *
		 *     ```
		 *
		 *          {
		 *          "projectIds": [1]
		 *          }
		 *     ```
		 *
		 *     And third, all projects and repositories in the system would be selected like this:
		 *
		 *
		 *
		 *     ```
		 *
		 *          {
		 *          "projectIds": [],
		 *          "repositoryIds": []
		 *          }
		 *     ```
		 *
		 *     The authenticated user must have **SYS_ADMIN** permission to call this resource.
		 */
		readonly post: operations["startMeshMigration"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/migration/mesh/{jobId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get Mesh migration job details
		 * @description Gets the details, including the current status and progress, of the job identified by the given ID.
		 *
		 *     The authenticated user must have **SYS_ADMIN** permission to call this resource.
		 */
		readonly get: operations["getMeshMigrationJob"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/migration/mesh/{jobId}/cancel": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Cancel Mesh migration job
		 * @description Requests the cancellation of a migration job.
		 *
		 *     The request to cancel a job will be processed successfully if the job is actually still running. If it has already finished (successfully or with errors) or if it has already been canceled before, then an error will be returned.
		 *
		 *     There might be a small delay between accepting the request and actually cancelling the job. In most cases, the delay will be close to instantaneously. In the unlikely case of communication issues across a cluster, it can however take a few seconds to cancel a job.
		 *
		 *     A client should always actively query the job status to confirm that a job has been successfully canceled.
		 *
		 *     The authenticated user must have **SYS_ADMIN** permission to call this resource.
		 */
		readonly post: operations["cancelMeshMigrationJob"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/migration/mesh/{jobId}/messages": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get Mesh migration job messages
		 * @description Gets the messages generated by the job.
		 *
		 *     Without any filter, all messages will be returned, but the response can optionally be filtered for the following severities. The severity parameter can be repeated to include multiple severities in one response.
		 *
		 *          - INFO
		 *          - WARN
		 *          - ERROR
		 *
		 *
		 *     The authenticated user must have **SYS_ADMIN** permission to call this resource.
		 */
		readonly get: operations["getMeshMigrationJobMessages"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/migration/mesh/{jobId}/summary": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get Mesh migration job summary
		 * @description Gets the summary, including the queue status and progress, of a Mesh migration job.
		 *
		 *     The authenticated user must have **SYS_ADMIN** permission to call this resource.
		 */
		readonly get: operations["getMeshMigrationJobSummary"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/migration/mesh/preview": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Preview Mesh migration
		 * @description Enumerates the projects and repositories that would be migrated for a given request.
		 *
		 *     All affected repositories will be enumerated explicitly, and while projects are listed as individual items in responses from this endpoint, their presence does not imply that all their repositories are included.
		 *
		 *     While this endpoint can be used to verify that all selectors in the request apply as intended, it should be noted that a subsequent, actual export might contain a different set of repositories, as they might have been added or deleted in the meantime.
		 *
		 *     Note that the overall response from this endpoint can become very large when a lot of repositories end up in the selection. This is why the server is streaming the response while it is being generated (as opposed to creating it in memory and then sending it all at once) and it can be consumed in a streaming way, too.
		 *
		 *     Also, due to the potential size of the response, projects and repositories are listed with fewer details than in other REST responses.
		 *
		 *     The authenticated user must have **SYS_ADMIN** permission to call this resource.
		 */
		readonly post: operations["previewMeshMigration"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/migration/mesh/repos": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Find repositories by Mesh migration state
		 * @description Searches for repositories in the system matching the specified criteria and enriches their MeshMigrationQueueState migration state if a migration is currently in progress.
		 *
		 *     The currently active migration can optionally be specified by passing a migrationId, if known. If this isn't passed, an attempt is made to locate the active migration and its ID is used.
		 *
		 *     If a migration is currently active, only repositories that are a part of the migration are filtered and returned. Otherwise, all repositories in the systems are filtered and returned.
		 *
		 *     Filtering by state is ignored when no migration is currently in progress. In such a case, results are not enriched with their MeshMigrationQueueState migration state.
		 *
		 *     The authenticated user must have **SYS_ADMIN** permission to call this resource.
		 */
		readonly get: operations["searchMeshMigrationRepos"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/migration/mesh/summaries": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get all Mesh migration job summaries
		 * @description Retrieve a page of Mesh migration job summaries. Jobs are ordered by when they were started, newest first.
		 *
		 *     The authenticated user must have **SYS_ADMIN** permission to call this resource.
		 */
		readonly get: operations["getAllMeshMigrationSummaries"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/migration/mesh/summary": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get summary for Mesh migration job
		 * @description Gets the summary, including the queue status and progress, of the currently active Mesh migration job.
		 *
		 *     The authenticated user must have **SYS_ADMIN** permission to call this resource.
		 */
		readonly get: operations["getActiveMeshMigrationSummary"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/profile/recent/repos": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get recently accessed repositories
		 * @description Retrieve a page of recently accessed repositories for the currently authenticated user.
		 *
		 *     Repositories are ordered from most recently to least recently accessed. <p>Only authenticated users may call this resource.
		 */
		readonly get: operations["getRepositoriesRecentlyAccessed"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get projects
		 * @description Retrieve a page of projects.
		 *
		 *     Only projects for which the authenticated user has the <strong>PROJECT_VIEW</strong> permission will be returned.
		 */
		readonly get: operations["getProjects"]
		readonly put?: never
		/**
		 * Create a new project
		 * @description Create a new project.
		 *
		 *     To include a custom avatar for the project, the project definition should contain an additional attribute with the key <code>avatar</code> and the value a data URI containing Base64-encoded image data. The URI should be in the following format: <pre>    data:(content type, e.g. image/png);base64,(data) </pre>If the data is not Base64-encoded, or if a character set is defined in the URI, or the URI is otherwise invalid, <em>project creation will fail</em>.
		 *
		 *     The authenticated user must have <strong>PROJECT_CREATE</strong> permission to call this resource.
		 */
		readonly post: operations["createProject"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get a project
		 * @description Retrieve the project matching the supplied <strong>projectKey</strong>.
		 *
		 *     The authenticated user must have <strong>PROJECT_VIEW</strong> permission for the specified project to call this resource.
		 */
		readonly get: operations["getProject"]
		/**
		 * Update project
		 * @description Update the project matching the <strong>projectKey</strong> supplied in the resource path.
		 *
		 *     To include a custom avatar for the updated project, the project definition should contain an additional attribute with the key <code>avatar</code> and the value a data URI containing Base64-encoded image data. The URI should be in the following format:
		 *     ```    data:(content type, e.g. image/png);base64,(data)```
		 *
		 *     If the data is not Base64-encoded, or if a character set is defined in the URI, or the URI is otherwise invalid, <em>project creation will fail</em>.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.
		 */
		readonly put: operations["updateProject"]
		readonly post?: never
		/**
		 * Delete project
		 * @description Delete the project matching the supplied <strong>projectKey</strong>.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.
		 */
		readonly delete: operations["deleteProject"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/avatar.png": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get avatar for project
		 * @description Retrieve the avatar for the project matching the supplied <strong>projectKey</strong>.
		 *
		 *     The authenticated user must have <strong>PROJECT_VIEW</strong> permission for the specified project to call this resource.
		 */
		readonly get: operations["getProjectAvatar"]
		readonly put?: never
		/**
		 * Update project avatar
		 * @description Update the avatar for the project matching the supplied <strong>projectKey</strong>.
		 *
		 *     This resource accepts POST multipart form data, containing a single image in a form-field named 'avatar'.
		 *
		 *     There are configurable server limits on both the dimensions (1024x1024 pixels by default) and uploaded file size (1MB by default). Several different image formats are supported, but <strong>PNG</strong> and <strong>JPEG</strong> are preferred due to the file size limit.
		 *
		 *     This resource has Cross-Site Request Forgery (XSRF) protection. To allow the request to pass the XSRF check the caller needs to send an <code>X-Atlassian-Token</code> HTTP header with the value <code>no-check</code>.
		 *
		 *     An example <a href="http://curl.haxx.se/">curl</a> request to upload an image name 'avatar.png' would be: ```curl -X POST -u username:password -H "X-Atlassian-Token: no-check" http://example.com/rest/api/1.0/projects/STASH/avatar.png -F avatar=@avatar.png ```
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.
		 */
		readonly post: operations["uploadAvatar"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/hook-scripts": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get configured hook scripts
		 * @description Return a page of hook scripts configured for the specified project.
		 *
		 *     This endpoint requires **PROJECT_ADMIN** permission.
		 */
		readonly get: operations["getConfigurations"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/hook-scripts/{scriptId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * Create/update a hook script
		 * @description Creates/updates the hook script configuration for the provided hook script and project.
		 *
		 *     This endpoint requires **PROJECT_ADMIN** permission.
		 */
		readonly put: operations["setConfiguration"]
		readonly post?: never
		/**
		 * Remove a hook script
		 * @description Removes the hook script from the set of hook scripts configured to run in all repositories under the project.
		 *
		 *     This endpoint requires **PROJECT_ADMIN** permission.
		 */
		readonly delete: operations["removeConfiguration"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/permissions": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		readonly post?: never
		/**
		 * Revoke project permissions
		 * @description Revoke all permissions for the specified project for the given groups and users.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.
		 *
		 *     In addition, a user may not revoke a group's permission if their own permission would be revoked as a result, nor may they revoke their own permission unless they have a global permission that already implies that permission.
		 */
		readonly delete: operations["revokePermissions"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/permissions/{permission}/all": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Check default project permission
		 * @description Check whether the specified permission is the default permission (granted to all users) for a project.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.
		 */
		readonly get: operations["hasAllUserPermission"]
		readonly put?: never
		/**
		 * Grant project permission
		 * @description Grant or revoke a project permission to all users, i.e. set the default permission.
		 *
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher
		 *     global permission to call this resource.
		 */
		readonly post: operations["modifyAllUserPermission"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/permissions/groups": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get groups with permission to project
		 * @description Retrieve a page of groups that have been granted at least one permission for the specified project.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.
		 */
		readonly get: operations["getGroupsWithAnyPermission_1"]
		/**
		 * Update group project permission
		 * @description Promote or demote a group's permission level for the specified project.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource. In addition, a user may not demote a group's permission level if theirown permission level would be reduced as a result.
		 */
		readonly put: operations["setPermissionForGroups_1"]
		readonly post?: never
		/**
		 * Revoke group project permission
		 * @description  Revoke all permissions for the specified project for a group.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.
		 *
		 *     In addition, a user may not revoke a group's permissions if it will reduce their own permission level.
		 */
		readonly delete: operations["revokePermissionsForGroup_1"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/permissions/groups/none": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get groups without project permission
		 * @description Retrieve a page of groups that have no granted permissions for the specified project.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher
		 */
		readonly get: operations["getGroupsWithoutAnyPermission_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/permissions/search": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Search project permissions
		 * @description Search direct and implied permissions of principals (users and groups). This endpoint returns a superset of the results returned by the /users and /groups endpoints because it allows filtering by global permissions too.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.
		 */
		readonly get: operations["searchPermissions"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/permissions/users": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get users with permission to project
		 * @description Retrieve a page of users that have been granted at least one permission for the specified project.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.
		 */
		readonly get: operations["getUsersWithAnyPermission_1"]
		/**
		 * Update user project permission
		 * @description Promote or demote a user's permission level for the specified project.
		 *
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource. In addition, a user may not reduce their own permission level unless they have a global permission that already implies that permission.
		 */
		readonly put: operations["setPermissionForUsers_1"]
		readonly post?: never
		/**
		 * Revoke user project permission
		 * @description Revoke all permissions for the specified project for a user.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.
		 *
		 *     In addition, a user may not revoke their own project permissions if they do not have a higher global permission.
		 */
		readonly delete: operations["revokePermissionsForUser_1"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/permissions/users/none": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get users without project permission
		 * @description Retrieve a page of <i>licensed</i> users that have no granted permissions for the specified project.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.
		 */
		readonly get: operations["getUsersWithoutPermission"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repositories for project
		 * @description Retrieve repositories from the project corresponding to the supplied <strong>projectKey</strong>.
		 *
		 *     The authenticated user must have <strong>PROJECT_READ</strong> permission for the specified project to call this resource.
		 */
		readonly get: operations["getRepositories"]
		readonly put?: never
		/**
		 * Create repository
		 * @description Create a new repository. Requires an existing project in which this repository will be created. The only parameters which will be used are name and scmId.
		 *
		 *     The authenticated user must have <strong>REPO_CREATE</strong> permission or higher, for the context project to call this resource.
		 */
		readonly post: operations["createRepository"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repository
		 * @description Retrieve the repository matching the supplied <strong>projectKey</strong> and <strong>repositorySlug</strong>.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getRepository"]
		/**
		 * Update repository
		 * @description Update the repository matching the <strong>repositorySlug</strong> supplied in the resource path.
		 *
		 *     The repository's slug is derived from its name. If the name changes the slug may also change.
		 *
		 *     This resource can be used to change the repository's default branch by specifying a new default branch in the request. For example: <code>"defaultBranch":"main"</code>
		 *
		 *     This resource can be used to move the repository to a different project by specifying a new project in the request. For example: <code>"project":{"key":"NEW_KEY"}</code>
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 */
		readonly put: operations["updateRepository"]
		/**
		 * Fork repository
		 * @description Create a new repository forked from an existing repository.
		 *
		 *     The JSON body for this <code>POST</code> is not required to contain <i>any</i> properties. Even the name may be omitted. The following properties will be used, if provided:
		 *
		 *     - <code>"name":"Fork name"</code> - Specifies the forked repository's name
		 *       - Defaults to the name of the origin repository if not specified
		 *     - <code>"defaultBranch":"main"</code> - Specifies the forked repository's default branch
		 *       - Defaults to the origin repository's default branch if not specified
		 *     - <code>"project":{"key":"TARGET_KEY"}</code> - Specifies the forked repository's target project by key
		 *       - Defaults to the current user's personal project if not specified
		 *
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository and <strong>PROJECT_ADMIN</strong> on the target project to call this resource. Note that users <i>always</i> have <b>PROJECT_ADMIN</b> permission on their personal projects.
		 */
		readonly post: operations["forkRepository"]
		/**
		 * Delete repository
		 * @description Schedule the repository matching the supplied <strong>projectKey</strong> and <strong>repositorySlug</strong> to be deleted.
		 *
		 *     The authenticated user must have sufficient permissions specified by the repository delete policy to call this resource. The default permission required is <strong>REPO_ADMIN</strong> permission.
		 */
		readonly delete: operations["deleteRepository"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/archive": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Stream archive of repository
		 * @description Streams an archive of the repository's contents at the requested commit. If no `at=` commit is requested, an archive of the default branch is streamed.
		 *
		 *     The <code>filename=</code> query parameter may be used to specify the exact filename to include in the "Content-Disposition" header. If an explicit filename is not provided, one will be automatically generated based on what is being archived. Its format depends on the at= value:
		 *
		 *     - No <code>at=</code> commit:     &lt;slug&gt;-&lt;default-branch-name&gt;@&lt;commit&gt;.&lt;format&gt;;     e.g. example-master@43c2f8a0fe8.zip
		 *     - <code>at=</code>sha: &lt;slug&gt;-&lt;at&gt;.&lt;format&gt;; e.g.     example-09bcbb00100cfbb5310fb6834a1d5ce6cac253e9.tar.gz
		 *     - <code>at=</code>branchOrTag: &lt;slug&gt;-&lt;branchOrTag&gt;@&lt;commit&gt;.&lt;format&gt;;     e.g. example-feature@bbb225f16e1.tar
		 *
		 *         - If the branch or tag is qualified (e.g. refs/heads/master, the short name         (master) will be included in the filename
		 *         - If the branch or tag's <i>short name</i> includes slashes (e.g. release/4.6),         they will be converted to hyphens in the filename (release-4.5)
		 *
		 *
		 *
		 *
		 *     Archives may be requested in the following formats by adding the <code>format=</code> query parameter:
		 *
		 *     - zip: A zip file using standard compression (Default)
		 *     - tar: An uncompressed tarball
		 *     - tar.gz or tgz: A GZip-compressed tarball
		 *
		 *
		 *     The contents of the archive may be filtered by using the <code>path=</code> query parameter to specify paths to include. <code>path=</code> may be specified multiple times to include multiple paths.
		 *
		 *     The <code>prefix=</code> query parameter may be used to define a directory (or multiple directories) where the archive's contents should be placed. If the prefix does not end with /, one will be added automatically. The prefix is <i>always</i> treated as a directory; it is not possible to use it to prepend characters to the entries in the archive.
		 *
		 *     Archives of public repositories may be streamed by any authenticated or anonymous user. Streaming archives for non-public repositories requires an <i>authenticated user</i> with at least <b>REPO_READ</b> permission.
		 */
		readonly get: operations["getArchive"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/attachments/{attachmentId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get an attachment
		 * @description Retrieve the attachment.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository that is associated to the attachment.
		 *
		 *     Range requests (see IETF RFC7233) are supported. However only a single range issupported. If multiple ranges are passed the ranges will be ignored and the entire content will be returned in the response.
		 */
		readonly get: operations["getAttachment"]
		readonly put?: never
		readonly post?: never
		/**
		 * Delete an attachment
		 * @description Delete an attachment.
		 *
		 *     The user must be authenticated and have <strong>REPO_ADMIN</strong> permission for the specified repository.
		 */
		readonly delete: operations["deleteAttachment"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/attachments/{attachmentId}/metadata": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get attachment metadata
		 * @description Retrieve the attachment metadata.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository that is associated to the attachment that has the attachment metadata.
		 */
		readonly get: operations["getAttachmentMetadata"]
		/**
		 * Save attachment metadata
		 * @description Save attachment metadata.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository that is associated to the attachment that has the attachment metadata.
		 */
		readonly put: operations["saveAttachmentMetadata"]
		readonly post?: never
		/**
		 * Delete attachment metadata
		 * @description Delete attachment metadata.
		 *
		 *     The user must be authenticated and have <strong>REPO_ADMIN</strong> permission for the specified repository.
		 */
		readonly delete: operations["deleteAttachmentMetadata"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/branches": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Find branches
		 * @description Retrieve the branches matching the supplied <strong>filterText</strong> param.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getBranches"]
		readonly put?: never
		/**
		 * Create branch
		 * @description Creates a branch using the information provided in the RestCreateBranchRequest request
		 *
		 *     The authenticated user must have <strong>REPO_WRITE</strong> permission for the context repository to call this resource.
		 */
		readonly post: operations["createBranchForRepository"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/branches/default": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get default branch
		 * @deprecated
		 * @description Retrieves the repository's default branch, if it has been created. If the repository is empty, 204 No Content will be returned. For non-empty repositories, if the configured default branch has not yet been created a 404 Not Found will be returned.
		 *
		 *     This URL is deprecated. Callers should use <code>GET /projects/{key}/repos/{slug}/default-branch</code> instead, which allows retrieving the <i>configured</i> default branch even if the ref has not been created yet.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getDefaultBranch_1"]
		/**
		 * Update default branch
		 * @deprecated
		 * @description Update the default branch of a repository.
		 *
		 *     This URL is deprecated. Callers should use <code>PUT /projects/{key}/repos/{slug}/default-branch</code> instead.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 */
		readonly put: operations["setDefaultBranch_1"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/browse": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get file content at revision
		 * @description Retrieve a page of content for a file path at a specified revision.
		 *
		 *     Responses from this endpoint vary widely depending on the query parameters. The example JSON is for a request that does not use size, type, blame or noContent.
		 *
		 *     1. size will return a response like {"size":10000}
		 *     2. type will return a response like {"type":"FILE"}, where possible values are    "DIRECTORY", "FILE" and "SUBMODULE"
		 *     3. blame <i>without</i> noContent will include blame for the lines of    content returned on the page
		 *     4. blame <i>with</i> noContent will omit file contents and only return    blame for the requested lines
		 *     5. noContent without blame is ignored and does nothing
		 *
		 *
		 *     The various parameters are "processed" in the above order. That means ?size=true&amp;type=truewill return a size response, not a type one; the type parameter will be ignored.
		 *
		 *     The blame and noContent query parameters are handled differently from size and type. For blame and noContent, the <i>presence</i> of the parameter implies "true" if no value is specified; size and and type both require an explicit=true or they're treated as "false".
		 *
		 *     - ?blame is the same as ?blame=true
		 *     - ?blame&amp;noContent is the same as ?blame=true&amp;noContent=true
		 *     - ?size is the same as ?size=false
		 *     - ?type is the same as ?type=false
		 *
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getContent"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/browse/{path}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get file content
		 * @description Retrieve a page of content for a file path at a specified revision.
		 *
		 *     Responses from this endpoint vary widely depending on the query parameters. The example JSON is for a request that does not use size, type, blame or noContent.
		 *
		 *     1. size will return a response like {"size":10000}
		 *     2. type will return a response like {"type":"FILE"}, where possible values are    "DIRECTORY", "FILE" and "SUBMODULE"
		 *     3. blame <i>without</i> noContent will include blame for the lines of    content returned on the page
		 *     4. blame <i>with</i> noContent will omit file contents and only return    blame for the requested lines
		 *     5. noContent without blame is ignored and does nothing
		 *
		 *
		 *     The various parameters are "processed" in the above order. That means ?size=true&amp;type=truewill return a size response, not a type one; the type parameter will be ignored.
		 *
		 *     The blame and noContent query parameters are handled differently from size and type. For blame and noContent, the <i>presence</i> of the parameter implies "true" if no value is specified; size and and type both require an explicit=true or they're treated as "false".
		 *
		 *     - ?blame is the same as ?blame=true
		 *     - ?blame&amp;noContent is the same as ?blame=true&amp;noContent=true
		 *     - ?size is the same as ?size=false
		 *     - ?type is the same as ?type=false
		 *
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getContent_1"]
		/**
		 * Edit file
		 * @description Update the content of path, on the given repository and branch.
		 *
		 *     This resource accepts PUT multipart form data, containing the file in a form-field named content.
		 *
		 *     An example <a href="http://curl.haxx.se/">curl</a> request to update 'README.md' would be:
		 *
		 *     ```curl -X PUT -u username:password -F content=@README.md  -F 'message=Updated using file-edit REST API' -F branch=master -F  sourceCommitId=5636641a50b  http://example.com/rest/api/latest/projects/PROJECT_1/repos/repo_1/browse/README.md ```
		 *
		 *     - branch:  the branch on which the path should be modified or created
		 *     - content: the full content of the file at path
		 *     - message: the message associated with this change, to be used as the commit message. Or null if the default message should be used.
		 *     - sourceCommitId: the commit ID of the file before it was edited, used to identify if content has changed. Or null if this is a new file
		 *
		 *
		 *     The file can be updated or created on a new branch. In this case, the sourceBranch parameter should be provided to identify the starting point for the new branch and the branch parameter identifies the branch to create the new commit on.
		 */
		readonly put: operations["editFile"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/changes": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get changes made in commit
		 * @description Retrieve a page of changes made in a specified commit.
		 *
		 *     <strong>Note:</strong> The implementation will apply a hard cap ({@code page.max.changes}) and it is not possible to request subsequent content when that cap is exceeded.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getChanges_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get commits
		 * @description Retrieve a page of commits from a given starting commit or "between" two commits. If no explicit commit is specified, the tip of the repository's default branch is assumed. commits may be identified by branch or tag name or by ID. A path may be supplied to restrict the returned commits to only those which affect that path.
		 *
		 *     The authenticated user must have <b>REPO_READ</b> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getCommits"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get commit by ID
		 * @description Retrieve a single commit <i>identified by its ID</i>. In general, that ID is a SHA1. <u>From 2.11, ref names like "refs/heads/master" are no longer accepted by this resource.</u>
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getCommit"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/builds": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get a specific build status
		 * @description Get a specific build status.
		 *
		 *
		 *     The authenticated user must have **REPO_READ** permission for the provided repository.The request can also be made with anonymous 2-legged OAuth.<br>Since 7.14
		 */
		readonly get: operations["get"]
		readonly put?: never
		/**
		 * Store a build status
		 * @description Store a build status.
		 *
		 *
		 *     The authenticated user must have **REPO_READ** permission for the repository that this build status is for. The request can also be made with anonymous 2-legged OAuth.
		 */
		readonly post: operations["add"]
		/**
		 * Delete a specific build status
		 * @description Delete a specific build status.
		 *
		 *     The authenticated user must have **REPO_ADMIN** permission for the provided repository.
		 */
		readonly delete: operations["delete"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/changes": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get changes in commit
		 * @description Retrieve a page of changes made in a specified commit.
		 *
		 *      <strong>Note:</strong> The implementation will apply a hard cap (<code>page.max.changes</code>) and it is not possible to request subsequent content when that cap is exceeded.
		 *
		 *      The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getChanges"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/comments": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Search for commit comments
		 * @description Retrieves the commit discussion comments that match the specified search criteria.
		 *
		 *     It is possible to retrieve commit discussion comments that are anchored to a range of commits by providing the sinceId that the comments anchored from.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit is in to call this resource.
		 */
		readonly get: operations["getComments"]
		readonly put?: never
		/**
		 * Add a new commit comment
		 * @description Add a new comment.
		 *
		 *     Comments can be added in a few places by setting different attributes:
		 *
		 *     General commit comment:
		 *
		 *     ```{
		 *           "text": "An insightful general comment on a commit."
		 *     }
		 *
		 *     </pre>
		 *     Reply to a comment:
		 *     <pre>{
		 *           "text": "A measured reply.",
		 *           "parent": {
		 *               "id": 1
		 *           }
		 *     }
		 *     </pre>
		 *     General file comment:
		 *     <pre>{
		 *           "text": "An insightful general comment on a file.",
		 *           "anchor": {
		 *               "diffType": "COMMIT",
		 *               "fromHash": "6df3858eeb9a53a911cd17e66a9174d44ffb02cd",
		 *               "path": "path/to/file",
		 *               "srcPath": "path/to/file",
		 *               "toHash": "04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b"
		 *           }
		 *     }
		 *     </pre>
		 *     File line comment:
		 *     <pre>{
		 *           "text": "A pithy comment on a particular line within a file.",
		 *           "anchor": {
		 *               "diffType": "COMMIT",
		 *               "line": 1,
		 *               "lineType": "CONTEXT",
		 *               "fileType": "FROM",
		 *               "fromHash": "6df3858eeb9a53a911cd17e66a9174d44ffb02cd",
		 *               "path": "path/to/file",
		 *               "srcPath": "path/to/file",
		 *               "toHash": "04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b"
		 *           }
		 *     }
		 *     ```
		 *
		 *     Note: general file comments are an experimental feature and may change in the near future!
		 *
		 *     For file and line comments, 'path' refers to the path of the file to which the comment should be applied and 'srcPath' refers to the path the that file used to have (only required for copies and moves). Also, fromHash and toHash refer to the sinceId / untilId (respectively) used to produce the diff on which the comment was added. Finally diffType refers to the type of diff the comment was added on.
		 *
		 *     For line comments, 'line' refers to the line in the diff that the comment should apply to. 'lineType' refers to the type of diff hunk, which can be:- 'ADDED' - for an added line;</li>- 'REMOVED' - for a removed line; or</li>- 'CONTEXT' - for a line that was unmodified but is in the vicinity of the diff.</li>'fileType' refers to the file of the diff to which the anchor should be attached - which is of relevance when displaying the diff in a side-by-side way. Currently the supported values are:- 'FROM' - the source file of the diff</li>- 'TO' - the destination file of the diff</li>If the current user is not a participant the user is added as one and updated to watch the commit.
		 *
		 *     The authenticated user must have REPO_READ permission for the repository that the commit is in to call this resource.
		 */
		readonly post: operations["createComment"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/comments/{commentId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get a commit comment
		 * @description Retrieves a commit discussion comment.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit is in to call this resource.
		 */
		readonly get: operations["getComment"]
		/**
		 * Update a commit comment
		 * @description Update a comment, with the following restrictions:
		 *
		 *     - only the author of the comment may update the <i>text</i> of the comment
		 *     - only the author of the comment or repository admins and above may update the other   fields of a comment
		 *
		 *
		 *     <strong>Note:</strong> the supplied supplied JSON object must contain a <code>version</code> that must match the server's version of the comment or the update will fail. To determine the current version of the comment, the comment should be fetched from the server prior to the update. Look for the 'version' attribute in the returned JSON structure.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit is in to call this resource.
		 */
		readonly put: operations["updateComment"]
		readonly post?: never
		/**
		 * Delete a commit comment
		 * @description Delete a commit comment. Anyone can delete their own comment. Only users with <strong>REPO_ADMIN</strong> and above may delete comments created by other users. Comments which have replies <i>may not be deleted</i>, regardless of the user's granted permissions.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit is in to call this resource.
		 */
		readonly delete: operations["deleteComment"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/deployments": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get a deployment
		 * @description Get the deployment matching the specified Repository, key, environmentKey and deploymentSequenceNumber.
		 *
		 *     The user must have REPO_READ.
		 */
		readonly get: operations["get_1"]
		readonly put?: never
		/**
		 * Create or update a deployment
		 * @description Create or update a deployment.
		 *
		 *      The authenticated user must have REPO_READ permission for the repository.
		 */
		readonly post: operations["createOrUpdateDeployment"]
		/**
		 * Delete a deployment
		 * @description Delete the deployment matching the specified Repository, key, environmentKey and deploymentSequenceNumber.
		 *
		 *     The user must have REPO_ADMIN.
		 */
		readonly delete: operations["delete_1"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/diff-stats-summary/{path}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get diff stats summary between revisions
		 * @description Retrieve the diff stats summary for a commit.
		 *
		 *     The stats summary include the total number of modified files, added lines, and deleted lines.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getDiffStatsSummary"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/diff/{path}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get diff between revisions
		 * @description Retrieve the diff between two provided revisions.
		 *
		 *     To stream a raw text representation of the diff, this endpoint can be called with the request header 'Accept: text/plain'.
		 *
		 *     Note:</strong> This resource is currently <i>not paged</i>. The server will internally apply a hard cap to the streamed lines, and it is not possible to request subsequent pages if that cap is exceeded. In the event that the cap is reached, the diff will be cut short and one or more {@code truncated} flags will be set to true on the "segments", "hunks" and "diffs" properties, as well as the top-level object, in the returned JSON response.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["streamDiff"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/merge-base": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get the common ancestor between two commits
		 * @description Returns the best common ancestor between two commits.
		 *
		 *     If more than one best common ancestor exists, only one will be returned. It is unspecified which will be returned.
		 */
		readonly get: operations["getMergeBase"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/pull-requests": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repository pull requests containing commit
		 * @description Retrieve a page of pull requests in the current repository that contain the given commit.
		 *
		 *     The user must be authenticated and have access to the specified repository to call this resource.
		 */
		readonly get: operations["getPullRequests"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/watch": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Watch commit
		 * @description Add the authenticated user as a watcher for the specified commit.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository containing the commit to call this resource.
		 */
		readonly post: operations["watch"]
		/**
		 * Stop watching commit
		 * @description Remove the authenticated user as a watcher for the specified commit.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository containing the commit to call this resource.
		 */
		readonly delete: operations["unwatch"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/compare/changes": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Compare commits
		 * @description Gets the file changes available in the <code> from</code> commit but not in the <code> to</code> commit.
		 *
		 *
		 *     If either the <code> from</code> or <code> to</code> commit are not specified, they will be replaced by the default branch of their containing repository.
		 */
		readonly get: operations["streamChanges"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/compare/commits": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get accessible commits
		 * @description Gets the commits accessible from the <code>from</code> commit but not in the <code>to</code> commit.
		 *
		 *     If either the <code>from</code> or <code>to</code> commit are not specified, they will be replaced by the default branch of their containing repository.
		 */
		readonly get: operations["streamCommits"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/compare/diff-stats-summary{path}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Retrieve the diff stats summary between commits
		 * @description Retrieve the diff stats summary of the changes available in the <code>from</code> commit but not in the <code> to</code> commit.
		 *
		 *     If either the <code> from</code> or <code> to</code> commit are not specified, they will be replaced by the default branch of their containing repository.
		 */
		readonly get: operations["getDiffStatsSummary_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/compare/diff{path}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get diff between commits
		 * @description Gets a diff of the changes available in the <code>from</code> commit but not in the <code> to</code> commit.
		 *
		 *     If either the <code> from</code> or <code> to</code> commit are not specified, they will be replaced by the default branch of their containing repository.
		 */
		readonly get: operations["streamDiff_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/contributing": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repository contributing guidelines
		 * @description Retrieves the contributing guidelines for the repository, if they've been defined.
		 *
		 *     This checks the repository for a CONTRIBUTING file, optionally with an md or txt extension, and, if found, streams it. By default, the <i>raw content</i> of the file is streamed. Appending <code>?markup</code> to the URL will stream an HTML-rendered version instead.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["streamContributing"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/default-branch": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repository default branch
		 * @description Retrieves the repository's <i>configured</i> default branch.
		 *
		 *     Every repository has a <i>configured</i> default branch, but that branch may not actually <i>exist</i> in the repository. For example, a newly-created repository will have a configured default branch even though no branches have been pushed yet.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getDefaultBranch_2"]
		/**
		 * Update default branch for repository
		 * @description Update the default branch of a repository.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 */
		readonly put: operations["setDefaultBranch_2"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/diff": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get raw diff for path
		 * @description Stream the raw diff between two provided revisions.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["streamRawDiff"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/diff/{path}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get raw diff for path
		 * @description Stream the raw diff between two provided revisions.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["streamRawDiff_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/files": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get files in directory
		 * @description Retrieve a page of files from particular directory of a repository. The search is done recursively, so all files from any sub-directory of the specified directory will be returned.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["streamFiles"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/files/{path}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get files in directory
		 * @description Retrieve a page of files from particular directory of a repository. The search is done recursively, so all files from any sub-directory of the specified directory will be returned.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["streamFiles_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/forks": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repository forks
		 * @description Retrieve repositories which have been forked from this one. Unlike #getRelatedRepositories(Repository, PageRequest) related repositories, this only looks at a given repository's direct forks. If those forks have themselves been the origin of more forks, such "grandchildren" repositories will not be retrieved.
		 *
		 *     Only repositories to which the authenticated user has <b>REPO_READ</b> permission will be included, even if other repositories have been forked from this one.
		 */
		readonly get: operations["getForkedRepositories"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/hook-scripts": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get hook scripts
		 * @description Return a page of hook scripts configured for the specified repository.
		 *
		 *     This endpoint requires **REPO_ADMIN** permission.
		 */
		readonly get: operations["getConfigurations_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/hook-scripts/{scriptId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * Create/update a hook script
		 * @description Creates/updates the hook script configuration for the provided hook script and repository.
		 *
		 *     This endpoint requires **REPO_ADMIN** permission.
		 */
		readonly put: operations["setConfiguration_1"]
		readonly post?: never
		/**
		 * Remove a hook script
		 * @description Removes the hook script from the set of hook scripts configured to run in the repository.
		 *
		 *     This endpoint requires **REPO_ADMIN** permission.
		 */
		readonly delete: operations["removeConfiguration_1"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/labels": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repository labels
		 * @description Get all labels applied to the given repository.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository.
		 */
		readonly get: operations["getAllLabelsForRepository"]
		readonly put?: never
		/**
		 * Add repository label
		 * @description Applies a label to the repository.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository.
		 */
		readonly post: operations["addLabel"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/labels/{labelName}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		readonly post?: never
		/**
		 * Remove repository label
		 * @description Remove label that is applied to the given repository.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository.
		 */
		readonly delete: operations["removeLabel"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/last-modified": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Stream files
		 * @description Streams files from the repository's root with the last commit to modify each file. Commit modifications are traversed starting from the <code>at</code> commit or, if not specified, from the tip of the default branch.
		 *
		 *     Unless the repository is public, the authenticated user must have <b>REPO_READ</b> access to call this resource.
		 */
		readonly get: operations["stream"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/last-modified/{path}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Stream files with last modified commit in path
		 * @description Streams files in the requested <code>path</code> with the last commit to modify each file. Commit modifications are traversed starting from the <code>at</code> commit or, if not specified, from the tip of the default branch.
		 *
		 *     Unless the repository is public, the authenticated user must have <b>REPO_READ</b> access to call this resource.
		 */
		readonly get: operations["stream_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/license": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repository license
		 * @description Retrieves the license for the repository, if it's been defined.
		 *
		 *     This checks the repository for a <pre>LICENSE</pre> file, optionally with an <pre>md</pre> or <pre>txt</pre>extension, and, if found, streams it. By default, the <i>raw content</i> of the file is streamed. Appending <pre>?markup</pre> to the URL will stream an HTML-rendered version instead.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["streamLicense"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/participants": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Search pull request participants
		 * @description Retrieve a page of participant users for all the pull requests to or from the specified repository.
		 *
		 *     Optionally clients can specify following filters.
		 */
		readonly get: operations["search"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/patch": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get patch content at revision
		 * @description Retrieve the patch content for a repository at a specified revision.
		 *
		 *     Cache headers are added to the response (only if full commit hashes are used, not in the case of short hashes).
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["streamPatch"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/permissions": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		readonly post?: never
		/**
		 * Revoke all repository permissions for users and groups
		 * @description Revoke all permissions for the specified repository for the given groups and users.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified repository or a higher global permission to call this resource.
		 *
		 *     In addition, a user may not revoke a group's permission if their own permission would be revoked as a result, nor may they revoke their own permission unless they have a global permission that already implies that permission.
		 */
		readonly delete: operations["revokePermissions_1"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/permissions/groups": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get groups with permission to repository
		 * @description Retrieve a page of groups that have been granted at least one permission for the specified repository.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher project or global permission to call this resource.
		 */
		readonly get: operations["getGroupsWithAnyPermission_2"]
		/**
		 * Update group repository permission
		 * @description Promote or demote a group's permission level for the specified repository. Available repository permissions are:
		 *
		 *     - REPO_READ
		 *     - REPO_WRITE
		 *     - REPO_ADMIN
		 *
		 *
		 *     See the <a href="https://confluence.atlassian.com/display/BitbucketServer/Using+repository+permissions">Bitbucket Data Center documentation</a> for a detailed explanation of what each permission entails.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher project or global permission to call this resource. In addition, a user may not demote a group's permission level if their own permission level would be reduced as a result.
		 */
		readonly put: operations["setPermissionForGroup"]
		readonly post?: never
		/**
		 * Revoke group repository permission
		 * @description Revoke all permissions for the specified repository for a group.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher project or global permission to call this resource.
		 *
		 *     In addition, a user may not revoke a group's permissions if it will reduce their own permission level.
		 */
		readonly delete: operations["revokePermissionsForGroup_2"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/permissions/groups/none": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get groups without repository permission
		 * @description Retrieve a page of groups that have no granted permissions for the specified repository.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher project or global permission to call this resource.
		 */
		readonly get: operations["getGroupsWithoutAnyPermission_2"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/permissions/search": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Search repository permissions
		 * @description Search direct and implied permissions of users and groups. This endpoint returns a superset of the results returned by the /users and /groups endpoints because it allows filtering by project and global permissions too.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher project/global permission to call this resource.
		 */
		readonly get: operations["searchPermissions_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/permissions/users": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get users with permission to repository
		 * @description Retrieve a page of users that have been granted at least one permission for the specified repository.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher project or global permission to call this resource.
		 */
		readonly get: operations["getUsersWithAnyPermission_2"]
		/**
		 * Update user repository permission
		 * @description Promote or demote a user's permission level for the specified repository. Available repository permissions are:
		 *
		 *     - REPO_READ</li>- REPO_WRITE</li>- REPO_ADMIN</li></ul>See the <a href="https://confluence.atlassian.com/display/BitbucketServer/Using+repository+permissions">Bitbucket Data Center documentation</a> for a detailed explanation of what each permission entails.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher project or global permission to call this resource. In addition, a user may not reduce their own permission level unless they have a project or global permission that already implies that permission.
		 */
		readonly put: operations["setPermissionForUser"]
		readonly post?: never
		/**
		 * Revoke user repository permission
		 * @description Revoke all permissions for the specified repository for a user.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher project or global permission to call this resource.
		 *
		 *     In addition, a user may not revoke their own repository permissions if they do not have a higher project or global permission.
		 */
		readonly delete: operations["revokePermissionsForUser_2"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/permissions/users/none": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get users without repository permission
		 * @description Retrieve a page of <i>licensed</i> users that have no granted permissions for the specified repository.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher project or global permission to call this resource.
		 */
		readonly get: operations["getUsersWithoutPermission_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get pull requests for repository
		 * @description Retrieve a page of pull requests to or from the specified repository.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.  Optionally clients can specify PR participant filters. Each filter has a mandatory username.N parameter, and the optional role.N and approved.N parameters.
		 *
		 *     - username.N - the "root" of a single participant filter, where "N" is a natural number   starting from 1. This allows clients to specify multiple participant filters, by providing consecutive   filters as username.1, username.2 etc. Note that the filters numbering has to start   with 1 and be continuous for all filters to be processed. The total allowed number of participant   filters is 10 and all filters exceeding that limit will be dropped.
		 *     - role.N(optional) the role associated with username.N.   This must be one of AUTHOR, REVIEWER, or PARTICIPANT
		 *     - approved.N (optional) the approved status associated with username.N.   That is whether username.N has approved the PR. Either true, or false
		 *
		 */
		readonly get: operations["getPage"]
		readonly put?: never
		/**
		 * Create pull request
		 * @description Create a new pull request from a source branch or tag to a target branch. The source and target may be in the same repository, or different ones. (Note that different repositories must belong to the same <code>Repository#getHierarchyId()</code> hierarchy.)
		 *
		 *     The <code>fromRef</code> may be a branch or a tag. The <code>toRef</code> is required to be a branch. Tags are not allowed as targets because tags are intended to be immutable and should not be changed after they are created.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the <code>fromRef</code> and <code>toRef</code> repositories to call this resource.
		 */
		readonly post: operations["create"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get pull request
		 * @description Retrieve a pull request.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly get: operations["get_3"]
		/**
		 * Update pull request metadata
		 * @description Update the title, description, reviewers, destination branch or draft status of an existing pull request.
		 *
		 *     **Note:** the <em>reviewers</em> list may be updated using this resource. However the <em>author</em> and <em>participants</em> list may not.
		 *
		 *     The authenticated user must either:
		 *
		 *     - be the author of the pull request and have the <strong>REPO_READ</strong> permission for the repository that this pull request targets; or
		 *     - have the <strong>REPO_WRITE</strong> permission for the repository that this pull request targets
		 *
		 *
		 *     to call this resource.
		 */
		readonly put: operations["update"]
		readonly post?: never
		/**
		 * Delete pull request
		 * @description Deletes a pull request.
		 *
		 *     To call this resource, users must be authenticated and have permission to view the pull request. Additionally, they must:
		 *
		 *     - be the pull request author, if the system is configured to allow authors to delete their own   pull requests (this is the default) OR
		 *     - have repository administrator permission for the repository the pull request is targeting
		 *
		 *
		 *     A body containing the version of the pull request must be provided with this request.
		 *
		 *     `{ "version": 1 }`
		 */
		readonly delete: operations["delete_3"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}.diff": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Stream raw pull request diff
		 * @description Streams the raw diff for a pull request.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly get: operations["streamRawDiff_2"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}.patch": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Stream pull request as patch
		 * @description Streams a patch representing a pull request.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly get: operations["streamPatch_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/activities": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get pull request activity
		 * @description Retrieve a page of activity associated with a pull request.
		 *
		 *     Activity items include comments, approvals, rescopes (i.e. adding and removing of commits), merges and more.
		 *
		 *     Different types of activity items may be introduced in newer versions of Stash or by user installed plugins, so clients should be flexible enough to handle unexpected entity shapes in the returned page.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly get: operations["getActivities"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/approve": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Approve pull request
		 * @deprecated
		 * @description Approve a pull request as the current user. Implicitly adds the user as a participant if they are not already.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 *
		 *     <strong>Deprecated since 4.2</strong>. Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug} instead
		 */
		readonly post: operations["approve"]
		/**
		 * Unapprove pull request
		 * @deprecated
		 * @description Remove approval from a pull request as the current user. This does not remove the user as a participant.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 *
		 *     <strong>Deprecated since 4.2</strong>. Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug} instead
		 */
		readonly delete: operations["withdrawApproval"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/auto-merge": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get auto-merge request for pull request
		 * @description Returns an auto-merge request for the pull request, if requested.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly get: operations["getAutoMergeRequest"]
		readonly put?: never
		/**
		 * Auto-merge pull request
		 * @description Requests the system to try merging the pull request if auto-merge was requested on it.
		 *
		 *     The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly post: operations["tryAutoMerge"]
		/**
		 * Cancel auto-merge for pull request
		 * @description Cancels a request to auto-merge the pull request, if the pull request was not merged yet.
		 *
		 *     The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly delete: operations["cancelAutoMerge"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Search pull request comments
		 * @description Gets comments matching the given set of field values for the specified pull request. (Note this does <b>not</b> perform any kind of searching for comments by their text).
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly get: operations["getComments_1"]
		readonly put?: never
		/**
		 * Add new blocker comment
		 * @description Add a new blocker comment.
		 *
		 *     Comments can be added in a few places by setting different attributes:
		 *
		 *     General pull request blocker comment:
		 *     ```
		 *
		 *     {
		 *          "text": "A task on a pull request."
		 *     }
		 *     ```
		 *
		 *     Blocker reply to a comment:
		 *
		 *     ```
		 *
		 *     {
		 *          "text": "This reply is a task.",
		 *          "parent": {
		 *              "id": 1
		 *          }
		 *     }
		 *     ```
		 *
		 *     General blocker file comment:
		 *
		 *     ```
		 *
		 *     {
		 *          "text": "A blocker comment on a file.",
		 *          "anchor": {
		 *              "diffType": "RANGE",
		 *              "fromHash": "6df3858eeb9a53a911cd17e66a9174d44ffb02cd",
		 *              "path": "path/to/file",
		 *              "srcPath": "path/to/file",
		 *              "toHash": "04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b"
		 *          }
		 *      }
		 *     ```
		 *
		 *     Blocker file line comment:
		 *
		 *     ```
		 *
		 *     {
		 *          "text": "A task on a particular line within a file.",
		 *          "anchor": {
		 *              "diffType": "COMMIT",
		 *              "line": 1,
		 *              "lineType": "CONTEXT",
		 *              "fileType": "FROM",
		 *              "fromHash": "6df3858eeb9a53a911cd17e66a9174d44ffb02cd",
		 *              "path": "path/to/file",
		 *              "srcPath": "path/to/file",
		 *              "toHash": "04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b"
		 *          }
		 *      }
		 *     ```
		 *
		 *     For file and line comments, 'path' refers to the path of the file to which the comment should be applied and 'srcPath' refers to the path the that file used to have (only required for copies and moves). Also, fromHash and toHash refer to the sinceId / untilId (respectively) used to produce the diff on which the comment was added. Finally diffType refers to the type of diff the comment was added on. For backwards compatibility purposes if no diffType is provided and no fromHash/toHash pair is provided the diffType will be resolved to 'EFFECTIVE'. In any other cases the diffType is REQUIRED.
		 *
		 *     For line comments, 'line' refers to the line in the diff that the comment should apply to. 'lineType' refers to the type of diff hunk, which can be:
		 *
		 *     - 'ADDED' - for an added line;
		 *     - 'REMOVED' - for a removed line; or
		 *     - 'CONTEXT' - for a line that was unmodified but is in the vicinity of the diff.
		 *
		 *
		 *     'fileType' refers to the file of the diff to which the anchor should be attached - which is of relevance when displaying the diff in a side-by-side way. Currently the supported values are:
		 *
		 *     - 'FROM' - the source file of the diff
		 *      - 'TO' - the destination file of the diff
		 *
		 *
		 *     If the current user is not a participant the user is added as a watcher of the pull request.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly post: operations["createComment_1"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments/{commentId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get pull request comment
		 * @description Retrieves a pull request comment.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly get: operations["getComment_1"]
		/**
		 * Update pull request comment
		 * @description Update a comment, with the following restrictions:
		 *
		 *     - only the author of the comment may update the <i>text</i> of the comment
		 *     - only the author of the comment, the author of the pull request or repository admins and above may update   the other fields of a comment
		 *
		 *
		 *     Convert a comment to a task or vice versa.
		 *
		 *     Comments can be converted to tasks by setting the 'severity' attribute to 'BLOCKER':
		 *     ```
		 *
		 *     {
		 *     "severity": "BLOCKER"
		 *     }
		 *
		 *     ```
		 *
		 *     Tasks can be converted to comments by setting the 'severity' attribute to 'NORMAL': ```
		 *
		 *     {
		 *     "severity": "NORMAL"
		 *     }
		 *
		 *     ```
		 *
		 *     Resolve a blocker comment.
		 *
		 *     Blocker comments can be resolved by setting the 'state' attribute to 'RESOLVED': ```
		 *
		 *     {
		 *     "state": "RESOLVED"
		 *     }
		 *     ```
		 *
		 *     <strong>Note:</strong> the supplied JSON object must contain a <code>version</code> that must match the server's version of the comment or the update will fail. To determine the current version of the comment, the comment should be fetched from the server prior to the update. Look for the 'version' attribute in the returned JSON structure.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly put: operations["updateComment_1"]
		readonly post?: never
		/**
		 * Delete pull request comment
		 * @description Delete a pull request comment. Anyone can delete their own comment. Only users with <strong>REPO_ADMIN</strong> and above may delete comments created by other users.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly delete: operations["deleteComment_1"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/changes": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Gets pull request changes
		 * @description Gets changes for the specified PullRequest.
		 *
		 *     If the changeScope query parameter is set to 'UNREVIEWED', the application will attempt to stream unreviewed changes based on the lastReviewedCommit of the current user, which are the changes between the lastReviewedCommit and the latest commit of the source branch. The current user is considered to <i>not</i> have any unreviewed changes for the pull request when the lastReviewedCommit is either null (everything is unreviewed, so all changes are streamed), equal to the latest commit of the source branch (everything is reviewed), or no longer on the source branch (the source branch has been rebased). In these cases, the application will fall back to streaming all changes (the default), which is the effective diff for the pull request. The type of changes streamed can be determined by the changeScope parameter included in the properties map of the response.
		 *
		 *     Note: This resource is currently <i>not paged</i>. The server will return at most one page. The server will truncate the number of changes to either the request's page limit or an internal maximum, whichever is smaller. The start parameter of the page request is also ignored.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly get: operations["streamChanges_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get pull request comments for path
		 * @description Gets comments for the specified pull request and path.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly get: operations["getComments_2"]
		readonly put?: never
		/**
		 * Add pull request comment
		 * @description Add a new comment.
		 *
		 *     Comments can be added in a few places by setting different attributes: </p>General pull request comment:
		 *      <pre> {
		 *        "text": "An insightful general comment on a pull request."
		 *      }
		 *      </pre> Reply to a comment:  <pre> {
		 *        "text": "A measured reply.",
		 *        "parent": {
		 *           "id": 1
		 *         }
		 *      }
		 *      </pre> General file comment:  <pre> {
		 *        "text": "An insightful general comment on a file.",
		 *        "anchor": {
		 *           "diffType": "RANGE",
		 *           "fromHash": "6df3858eeb9a53a911cd17e66a9174d44ffb02cd",
		 *           "path": "path/to/file",
		 *           "srcPath": "path/to/file",
		 *           "toHash": "04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b"
		 *        }
		 *      }
		 *      </pre> File line comment:  <pre> {
		 *        "text": "A pithy comment on a particular line within a file.",
		 *        "anchor": {
		 *           "diffType": "COMMIT",
		 *           "line": 1,
		 *           "lineType": "CONTEXT",
		 *           "fileType": "FROM",
		 *           "fromHash": "6df3858eeb9a53a911cd17e66a9174d44ffb02cd",
		 *           "path": "path/to/file",
		 *           "srcPath": "path/to/file",
		 *           "toHash": "04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b"
		 *         }
		 *      }
		 *      </pre>
		 *
		 *      Add a new task.
		 *
		 *     Tasks are just comments with the attribute 'severity' set to 'BLOCKER':
		 *
		 *     General pull request task:  <pre> {
		 *        "text": "A task on a pull request.",
		 *        "severity": "BLOCKER"
		 *      }
		 *      </pre>
		 *
		 *      Add a pending comment.
		 *
		 *     Pending comments are just comments with the attribute 'state' set to 'PENDING':
		 *
		 *     Pending comment: <pre> {
		 *        "text": "This is a pending comment",
		 *        "state": "PENDING"
		 *      }
		 *      </pre>
		 *
		 *     For file and line comments, 'path' refers to the path of the file to which the comment should be applied and 'srcPath' refers to the path the that file used to have (only required for copies and moves). Also, fromHash and toHash refer to the sinceId / untilId (respectively) used to produce the diff on which the comment was added. Finally diffType refers to the type of diff the comment was added on. For backwards compatibility purposes if no diffType is provided and no fromHash/toHash pair is provided the diffType will be resolved to 'EFFECTIVE'. In any other cases the diffType is REQUIRED.
		 *
		 *     For line comments, 'line' refers to the line in the diff that the comment should apply to. 'lineType' refers to the type of diff hunk, which can be:
		 *
		 *     - 'ADDED' - for an added line;
		 *     - 'REMOVED' - for a removed line; or
		 *     - 'CONTEXT' - for a line that was unmodified but is in the vicinity of the diff.
		 *     </ul>'fileType' refers to the file of the diff to which the anchor should be attached - which is of relevance when displaying the diff in a side-by-side way. Currently the supported values are:
		 *
		 *     - 'FROM' - the source file of the diff
		 *     - 'TO' - the destination file of the diff
		 *     </ul>If the current user is not a participant the user is added as a watcher of the pull request.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly post: operations["createComment_2"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get a pull request comment
		 * @description Retrieves a pull request comment.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly get: operations["getComment_2"]
		/**
		 * Update pull request comment
		 * @description Update a comment, with the following restrictions:
		 *
		 *     - only the author of the comment may update the <i>text</i> of the comment
		 *     - only the author of the comment, the author of the pull request or repository admins and above may update the other fields of a comment
		 *     </ul>
		 *
		 *     Convert a comment to a task or vice versa.
		 *
		 *     Comments can be converted to tasks by setting the 'severity' attribute to 'BLOCKER':
		 *      <pre> {
		 *      "severity": "BLOCKER"
		 *      }
		 *      </pre>
		 *
		 *     Tasks can be converted to comments by setting the 'severity' attribute to 'NORMAL':  <pre> {
		 *      "severity": "NORMAL"
		 *      }
		 *      </pre>
		 *
		 *     Resolve a task.
		 *
		 *     Tasks can be resolved by setting the 'state' attribute to 'RESOLVED':  <pre> {
		 *      "state": "RESOLVED"
		 *      }
		 *      </pre>
		 *
		 *     <strong>Note:</strong> the supplied JSON object must contain a <code>version</code> that must match the server's version of the comment or the update will fail. To determine the current version of the comment, the comment should be fetched from the server prior to the update. Look for the 'version' attribute in the returned JSON structure.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly put: operations["updateComment_2"]
		readonly post?: never
		/**
		 * Delete a pull request comment
		 * @description Delete a pull request comment. Anyone can delete their own comment. Only users with <strong>REPO_ADMIN</strong> and above may delete comments created by other users.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly delete: operations["deleteComment_2"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}/apply-suggestion": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Apply pull request suggestion
		 * @description Apply a suggestion contained within a comment.
		 */
		readonly post: operations["applySuggestion"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/commit-message-suggestion": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get commit message suggestion
		 * @description Retrieve a suggested commit message for the given Pull Request.
		 */
		readonly get: operations["getCommitMessageSuggestion"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/commits": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get pull request commits
		 * @description Retrieve commits for the specified pull request.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly get: operations["getCommits_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/decline": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Decline pull request
		 * @description Decline a pull request.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly post: operations["decline"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/diff-stats-summary/{path}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get diff stats summary for pull request
		 * @description Retrieve the diff stats summary for the given Pull Request.
		 *
		 *     The stats summary include the total number of modified files, added lines, and deleted lines.
		 *
		 *     Note: The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly get: operations["getDiffStatsSummary_2"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/diff/{path}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Stream a diff within a pull request
		 * @description Streams a diff within a pull request.
		 *
		 *     If the specified file has been copied, moved or renamed, the <code>srcPath</code> must also be specified to produce the correct diff.
		 *
		 *     To stream a raw text representation of the diff, this endpoint can be called with the request header 'Accept: text/plain'.
		 *
		 *     Note: This RESTful endpoint is currently <i>not paged</i>. The server will internally apply a hard cap to the streamed lines, and it is not possible to request subsequent pages if that cap is exceeded.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly get: operations["streamDiff_2"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/merge": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Test if pull request can be merged
		 * @description Test whether a pull request can be merged.
		 *
		 *     A pull request may not be merged if:
		 *
		 *     - there are conflicts that need to be manually resolved before merging; and/or
		 *     - one or more merge checks have vetoed the merge.
		 *
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly get: operations["canMerge"]
		readonly put?: never
		/**
		 * Merge pull request
		 * @description Merge the specified pull request immediately or set the pull request to auto-merge when all the merge checks pass by setting <strong>autoMerge</strong> field in the request body.
		 *
		 *     The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly post: operations["merge"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/merge-base": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get the common ancestor between the latest commits of the source and target branches of the pull request
		 * @description Returns the best common ancestor between the latest commits of the source and target branches of the pull request.
		 *
		 *     If more than one best common ancestor exists, only one will be returned. It is unspecified which will be returned.
		 */
		readonly get: operations["getMergeBase_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get pull request participants
		 * @description Retrieves a page of the participants for a given pull request.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly get: operations["listParticipants"]
		readonly put?: never
		/**
		 * Assign pull request participant role
		 * @description Assigns a participant to an explicit role in pull request. Currently only the REVIEWER role may be assigned.
		 *
		 *     If the user is not yet a participant in the pull request, they are made one and assigned the supplied role.
		 *
		 *     If the user is already a participant in the pull request, their previous role is replaced with the supplied role unless they are already assigned the AUTHOR role which cannot be changed and will result in a Bad Request (400) response code.
		 *
		 *     The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly post: operations["assignParticipantRole"]
		/**
		 * Unassign pull request participant
		 * @deprecated
		 * @description Unassigns a participant from the REVIEWER role they may have been given in a pull request.
		 *
		 *     If the participant has no explicit role this method has no effect.
		 *
		 *     Afterwards, the user will still remain a participant in the pull request but their role will be reduced to PARTICIPANT. This is because once made a participant of a pull request, a user will forever remain a participant. Only their role may be altered.
		 *
		 *     The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request targets to call this resource.
		 *
		 *     <strong>Deprecated since 4.2</strong>. Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug} instead.
		 */
		readonly delete: operations["unassignParticipantRole_1"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * Change pull request status
		 * @description Change the current user's status for a pull request. Implicitly adds the user as a participant if they are not already. If the current user is the author, this method will fail.
		 *
		 *     The possible values for {@code status} are <strong>UNAPPROVED</strong>, <strong>NEEDS_WORK</strong> (which is referred to as "Requested changes" in the frontend from 8.10 onward), or <strong>APPROVED</strong>.
		 *
		 *     If the new {@code status} is <strong>NEEDS_WORK</strong> or <strong>APPROVED</strong> then the {@code lastReviewedCommit} for the participant will be updated to the latest commit of the source branch of the pull request.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly put: operations["updateStatus"]
		readonly post?: never
		/**
		 * Unassign pull request participant
		 * @description Unassigns a participant from the REVIEWER role they may have been given in a pull request.
		 *
		 *     If the participant has no explicit role this method has no effect.
		 *
		 *     Afterwards, the user will still remain a participant in the pull request but their role will be reduced to PARTICIPANT. This is because once made a participant of a pull request, a user will forever remain a participant. Only their role may be altered.
		 *
		 *     The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly delete: operations["unassignParticipantRole"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/reopen": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Re-open pull request
		 * @description Re-open a declined pull request.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly post: operations["reopen"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/review": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get pull request comment thread
		 * @description Get the <code>CommentThread</code> threads which have <code>Comment</code> comments that have a <code>CommentState#PENDING</code> pending state and are part of the pull request review for the authenticated user.
		 */
		readonly get: operations["getReview"]
		/**
		 * Complete pull request review
		 * @description Complete a review on a pull request.
		 */
		readonly put: operations["finishReview"]
		readonly post?: never
		/**
		 * Discard pull request review
		 * @description Discard a pull request review for the authenticated user.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository to call this resource.
		 */
		readonly delete: operations["discardReview"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/watch": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Watch pull request
		 * @description Add the authenticated user as a watcher for the specified pull request.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly post: operations["watch_1"]
		/**
		 * Stop watching pull request
		 * @description Remove the authenticated user as a watcher for the specified pull request.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly delete: operations["unwatch_1"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/raw/{path}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get raw content of a file at revision
		 * @description Retrieve the raw content for a file path at a specified revision.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["streamRaw"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/readme": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repository readme
		 * @description Retrieves the README for the repository, if it's been defined.
		 *
		 *     This checks the repository for a <pre>README</pre> file, optionally with an <pre>md</pre> or <pre>txt</pre>extension, and, if found, streams it. By default, the <i>raw content</i> of the file is streamed. Appending <pre>?markup</pre> to the URL will stream an HTML-rendered version instead. Note that, when streaming HTML, relative URLs in the README will not work if applied relative to this URL.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["streamReadme"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/recreate": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Retry repository creation
		 * @description If a create or fork operation fails, calling this method will clean up the broken repository and try again. The repository must be in an INITIALISATION_FAILED state.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.
		 */
		readonly post: operations["retryCreateRepository"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/ref-change-activities": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get ref change activity
		 * @description Retrieve a page of repository ref change activity.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission to call this resource.
		 */
		readonly get: operations["getRefChangeActivity"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/ref-change-activities/branches": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get branches with ref change activities for repository
		 * @description Retrieve a page of branches with ref change activities for a specific repository.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission to call this resource.
		 */
		readonly get: operations["findBranches"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/related": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get related repository
		 * @description Retrieve repositories which are related to this one. Related repositories are from the same Repository#getHierarchyId() hierarchy as this repository.
		 *
		 *     Only repositories to which the authenticated user has <b>REPO_READ</b> permission will be included, even if more repositories are part of this repository's hierarchy.
		 */
		readonly get: operations["getRelatedRepositories"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/secret-scanning/allowlist": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Find repository secret scanning allowlist rules
		 * @description Find repository secret scanning allowlist rules by filtering.
		 *
		 *     Repository **Admin** is required
		 */
		readonly get: operations["search_2"]
		readonly put?: never
		/**
		 * Create repository secret scanning allowlist rule
		 * @description Create a new repository secret scanning allowlist rule. Repository allowlist rules are used when scanning the given repository.
		 *
		 *     Repository **Admin** is required
		 */
		readonly post: operations["createAllowlistRule_1"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/secret-scanning/allowlist/{id}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get a repository secret scanning allowlist rule
		 * @description Get a repository secret scanning allowlist rule by ID.
		 *
		 *     Repository **Admin** is required
		 */
		readonly get: operations["getAllowlistRule_1"]
		/**
		 * Edit an existing repository secret scanning allowlist rule
		 * @description Edit a repository secret scanning allowlist rule.
		 *
		 *     Repository **Admin** is required
		 */
		readonly put: operations["editAllowlistRule_1"]
		readonly post?: never
		/**
		 * Delete a repository secret scanning allowlist rule
		 * @description Delete a repository secret scanning allowlist rule with the provided ID.
		 *
		 *     Repository **Admin** is required
		 */
		readonly delete: operations["deleteAllowlistRule_1"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/secret-scanning/exempt": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get whether a repository is exempt
		 * @description Check whether a repository is exempt from secret scanning
		 */
		readonly get: operations["isRepoExempt"]
		/**
		 * Exempt a repo from secret scanning
		 * @deprecated
		 * @description Exempt a repository from being scanned for secrets
		 *
		 *     <strong>Deprecated since 8.6</strong>. Exemptions are now managed by scope.
		 *     Use POST /rest/api/1.0/secret-scanning/exempt for global scope
		 *     Use POST /rest/api/1.0/projects/{projectKey}/secret-scanning/exempt for the project scope
		 */
		readonly put: operations["addExemptRepo"]
		readonly post?: never
		/**
		 * Delete an exempt repository
		 * @description Remove a repository from being exempt from secret scanning
		 */
		readonly delete: operations["deleteExemptRepo"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/secret-scanning/rules": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Find repository secret scanning rules
		 * @description Find repository secret scanning rules by filtering.
		 *
		 *     Repository **Admin** is required
		 */
		readonly get: operations["search_3"]
		readonly put?: never
		/**
		 * Create repository secret scanning rule
		 * @description Create a new repository secret scanning rule. Repository rules are used when scanning the given repository.
		 *
		 *     Repository **Admin** is required
		 */
		readonly post: operations["createRule_1"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/secret-scanning/rules/{id}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get a repository secret scanning rule
		 * @description Get a repository secret scanning rule by ID.
		 *
		 *     Repository **Admin** is required
		 */
		readonly get: operations["getRule_1"]
		/**
		 * Edit an existing repository secret scanning rule
		 * @description Edit a repository secret scanning rule.
		 *
		 *     Repository **Admin** is required
		 */
		readonly put: operations["editRule_1"]
		readonly post?: never
		/**
		 * Delete a repository secret scanning rule
		 * @description Delete a repository secret scanning rule with the provided ID.
		 *
		 *     Repository **Admin** is required
		 */
		readonly delete: operations["deleteRule_1"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/auto-decline": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get auto decline settings
		 * @description Retrieves the auto decline settings for the supplied repository. Project settings will be returned if no explicit settings have been set for the repository. In the case that there are no project settings, the default settings will be returned.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for this repository to call the resource.
		 */
		readonly get: operations["getAutoDeclineSettings_1"]
		/**
		 * Create auto decline settings
		 * @description Creates or updates the auto decline settings for the supplied repository.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for this repository to call the resource
		 */
		readonly put: operations["setAutoDeclineSettings_1"]
		readonly post?: never
		/**
		 * Delete auto decline settings
		 * @description Delete auto decline settings for the supplied repository.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for this repository to call the resource.
		 */
		readonly delete: operations["deleteAutoDeclineSettings_1"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/auto-merge": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get pull request auto-merge settings
		 * @description Retrieves the pull request auto-merge settings for the supplied repository. Project settings will be returned if no explicit settings have been set for the repository. In the case that there are no project settings, the default settings will be returned. If the repository's project has restricted its auto-merge settings, then the settings of the project will be returned.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for this repository to call the resource.
		 */
		readonly get: operations["get_5"]
		/**
		 * Create or update the pull request auto-merge settings
		 * @description Creates or updates the pull request auto-merge settings for the supplied repository.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for this repository to call the resource.
		 */
		readonly put: operations["set_1"]
		readonly post?: never
		/**
		 * Delete pull request auto-merge settings
		 * @description Deletes pull request auto-merge settings for the supplied repository.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for this repository to call the resource.
		 */
		readonly delete: operations["delete_5"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/hooks": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repository hooks
		 * @description Retrieve a page of repository hooks for this repository.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getRepositoryHooks_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/hooks/{hookKey}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repository hook
		 * @description Retrieve a repository hook for this repository.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getRepositoryHook_1"]
		readonly put?: never
		readonly post?: never
		/**
		 * Delete repository hook
		 * @description Delete repository hook configuration for the supplied <strong>hookKey</strong> and <strong>repositorySlug</strong>
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 */
		readonly delete: operations["deleteRepositoryHook"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/hooks/{hookKey}/enabled": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * Enable repository hook
		 * @description Enable a repository hook for this repository and optionally apply new configuration.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 *
		 *     A JSON document may be provided to use as the settings for the hook. These structure and validity of the document is decided by the plugin providing the hook.
		 */
		readonly put: operations["enableHook_1"]
		readonly post?: never
		/**
		 * Disable repository hook
		 * @description Disable a repository hook for this repository.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 */
		readonly delete: operations["disableHook_1"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/hooks/{hookKey}/settings": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repository hook settings
		 * @description Retrieve the settings for a repository hook for this repository.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getSettings_1"]
		/**
		 * Update repository hook settings
		 * @description Modify the settings for a repository hook for this repository.
		 *
		 *     The service will reject any settings which are too large, the current limit is 32KB once serialized.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 *
		 *     A JSON document can be provided to use as the settings for the hook. These structure and validity of the document is decided by the plugin providing the hook.
		 */
		readonly put: operations["setSettings_1"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/pull-requests": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get pull request settings
		 * @description Retrieve the pull request settings for the context repository.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the context repository to call this resource.
		 *
		 *     This resource will call all RestFragments that are registered with the key <strong>bitbucket.repository.settings.pullRequests</strong>. If any fragment fails validations by returning a non-empty Map of errors, then no fragments will execute.
		 *
		 *     The property keys for the settings that are bundled with the application are
		 *
		 *     - mergeConfig - the merge strategy configuration for pull requests
		 *     - requiredApprovers - (Deprecated, please use com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook instead) the number of approvals required on a pull request for it to be mergeable, or 0 if the merge check is disabled
		 *     - com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook - the merge check configuration for required approvers
		 *     - requiredAllApprovers - whether or not all approvers must approve a pull request for it to be mergeable
		 *     - requiredAllTasksComplete - whether or not all tasks on a pull request need to be completed for it to be mergeable
		 *     - requiredSuccessfulBuilds - (Deprecated, please use com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck instead) the number of successful builds on a pull request for it to be mergeable, or 0 if the merge check is disabled
		 *     - com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck - the merge check configuration for required builds
		 *
		 *
		 *
		 */
		readonly get: operations["getPullRequestSettings_1"]
		readonly put?: never
		/**
		 * Update pull request settings
		 * @description Update the pull request settings for the context repository.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the context repository to call this resource.
		 *
		 *     This resource will call all RestFragments that are registered with the key <strong>bitbucket.repository.settings.pullRequests</strong>. If any fragment fails validations by returning a non-empty Map of errors, then no fragments will execute.
		 *
		 *     Only the settings that should be updated need to be included in the request.
		 *
		 *     The property keys for the settings that are bundled with the application are
		 *
		 *     - mergeConfig - the merge strategy configuration for pull requests
		 *     - requiredApprovers - (Deprecated, please use com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook instead) the number of approvals required on a pull request for it to be mergeable, or 0 to disable the merge check
		 *     - com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook - a json map containing the keys 'enabled' (a boolean to enable or disable this merge check) and 'count' (an integer to set the number of required approvals)
		 *     - requiredAllApprovers - whether or not all approvers must approve a pull request for it to be mergeable
		 *     - requiredAllTasksComplete - whether or not all tasks on a pull request need to be completed for it to be mergeable
		 *     - requiredSuccessfulBuilds - (Deprecated, please use com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck instead) the number of successful builds on a pull request for it to be mergeable, or 0 to disable the merge check
		 *     - com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck - a json map containing the keys 'enabled' (a boolean to enable or disable this merge check) and 'count' (an integer to set the number of required builds)
		 *
		 *
		 *     <strong>Merge strategy configuration deletion:</strong>
		 *
		 *     An explicitly set pull request merge strategy configuration can be deleted by POSTing a document with an empty "mergeConfig" attribute. i.e:
		 *
		 *
		 *     ```{
		 *         "mergeConfig": {
		 *         }
		 *     }
		 *     ```
		 *
		 *     Upon completion of this request, the effective configuration will be:
		 *
		 *     - The configuration set for this repository's SCM type as set at the project level, if present, otherwise
		 *     - the configuration set for this repository's SCM type as set at the instance level, if present, otherwise
		 *     - the default configuration for this repository's SCM type
		 *
		 *
		 *
		 */
		readonly post: operations["updatePullRequestSettings_1"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get all reviewer groups
		 * @description Retrieve a page of reviewer groups of a given scope.
		 *
		 *     The authenticated user must have <b>REPO_READ</b> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getReviewerGroups_1"]
		readonly put?: never
		/**
		 * Create reviewer group
		 * @description Create a reviewer group.
		 *
		 *     The authenticated user must have <b>REPO_ADMIN</b> permission for the specified repository to call this resource.
		 */
		readonly post: operations["create_2"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups/{id}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get reviewer group
		 * @description Retrieve a reviewer group.
		 *
		 *     The authenticated user must have <b>REPO_READ</b> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getReviewerGroup_1"]
		/**
		 * Update reviewer group attributes
		 * @description Update the attributes of a reviewer group.
		 *
		 *     The authenticated user must have <b>REPO_ADMIN</b> permission for the specified repository to call this resource.
		 */
		readonly put: operations["update_2"]
		readonly post?: never
		/**
		 * Delete reviewer group
		 * @description Deletes a reviewer group.
		 *
		 *     The authenticated user must have <b>REPO_ADMIN</b> permission for the specified repository to call this resource.
		 */
		readonly delete: operations["delete_7"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups/{id}/users": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get reviewer group users
		 * @description Retrieve a list of the users of a reviewer group.
		 *
		 *     This does not return all the users of the group, only the users who are licensed and have <b>REPO_READ</b> permission for the specified repository.
		 *
		 *     The authenticated user must have <b>REPO_READ</b> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getUsers"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/tags": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Find tag
		 * @description Retrieve the tags matching the supplied <strong>filterText</strong> param.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the context repository to call this resource.
		 */
		readonly get: operations["getTags"]
		readonly put?: never
		/**
		 * Create tag
		 * @description Creates a tag using the information provided in the RestCreateTagRequest request
		 *
		 *     The authenticated user must have <strong>REPO_WRITE</strong> permission for the context repository to call this resource.
		 */
		readonly post: operations["createTagForRepository"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/tags/{name}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get tag
		 * @description Retrieve a tag in the specified repository.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the context repository to call this resource.
		 */
		readonly get: operations["getTag"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/watch": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Watch repository
		 * @description Add the authenticated user as a watcher for the specified repository.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository to call this resource.
		 */
		readonly post: operations["watch_2"]
		/**
		 * Stop watching repository
		 * @description Remove the authenticated user as a watcher for the specified repository.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository to call this resource.
		 */
		readonly delete: operations["unwatch_2"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Find webhooks
		 * @description Find webhooks in this repository.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["findWebhooks_1"]
		readonly put?: never
		/**
		 * Create webhook
		 * @description Create a webhook for the repository specified via the URL.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 */
		readonly post: operations["createWebhook_1"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get webhook
		 * @description Get a webhook by ID.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getWebhook_1"]
		/**
		 * Update webhook
		 * @description Update an existing webhook.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 */
		readonly put: operations["updateWebhook_1"]
		readonly post?: never
		/**
		 * Delete webhook
		 * @description Delete a webhook for the repository specified via the URL.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 */
		readonly delete: operations["deleteWebhook_1"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}/latest": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get last webhook invocation details
		 * @description Get the latest invocations for a specific webhook.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getLatestInvocation_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}/statistics": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get webhook statistics
		 * @description Get the statistics for a specific webhook.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getStatistics_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}/statistics/summary": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get webhook statistics summary
		 * @description Get the statistics summary for a specific webhook.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["getStatisticsSummary_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks/search": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Search webhooks
		 * @description Search webhooks in this repository and parent project. This endpoint returns a superset of the results returned by the /webhooks endpoint because it allows filtering by project scope too, not just repository webhooks.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 */
		readonly get: operations["searchWebhooks"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks/test": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Test webhook
		 * @description Test connectivity to a specific endpoint.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
		 */
		readonly post: operations["testWebhook_1"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/secret-scanning/allowlist": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Find project secret scanning allowlist rules
		 * @description Find project secret scanning allowlist rules by filtering.
		 *
		 *     Project **Admin** is required
		 */
		readonly get: operations["searchAllowlistRule"]
		readonly put?: never
		/**
		 * Create project secret scanning allowlist rule
		 * @description Create a new project level secret scanning allowlist rule. Project allowlist rules are used when scanning all non exempt repositories in the provided project.
		 *
		 *     Project **Admin** is required
		 */
		readonly post: operations["createAllowlistRule"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/secret-scanning/allowlist/{id}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get a project secret scanning allowlist rule
		 * @description Get a project secret scanning allowlist rule by ID.
		 *
		 *     Project **Admin** is required
		 */
		readonly get: operations["getAllowlistRule"]
		/**
		 * Edit an existing project secret scanning allowlist rule
		 * @description Edit a project secret scanning allowlist rule.
		 *
		 *     Project **Admin** is required
		 */
		readonly put: operations["editAllowlistRule"]
		readonly post?: never
		/**
		 * Delete a project secret scanning allowlist rule
		 * @description Delete a project secret scanning allowlist rule with the provided ID.
		 *
		 *     Project **Admin** is required
		 */
		readonly delete: operations["deleteAllowlistRule"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/secret-scanning/exempt": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Find repos exempt from secret scanning for a project
		 * @description Find repositories exempt from secret scanning in a project
		 */
		readonly get: operations["findExemptReposByProject"]
		readonly put?: never
		/**
		 * Bulk exempt repos from secret scanning
		 * @description Bulk exempt a  list of repositories from being scanned for secrets. User must be have **PROJECT ADMIN** permissions.
		 */
		readonly post: operations["bulkAddExemptRepositories_1"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/secret-scanning/rules": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Find project secret scanning rules
		 * @description Find project secret scanning rules by filtering.
		 *
		 *     Project **Admin** is required
		 */
		readonly get: operations["search_1"]
		readonly put?: never
		/**
		 * Create project secret scanning rule
		 * @description Create a new project level secret scanning rule. Project rules are used when scanning all non exempt repositories in the provided project.
		 *
		 *     Project **Admin** is required
		 */
		readonly post: operations["createRule"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/secret-scanning/rules/{id}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get a project secret scanning rule
		 * @description Get a project secret scanning rule by ID.
		 *
		 *     Project **Admin** is required
		 */
		readonly get: operations["getRule"]
		/**
		 * Edit an existing project secret scanning rule
		 * @description Edit a project secret scanning rule.
		 *
		 *     Project **Admin** is required
		 */
		readonly put: operations["editRule"]
		readonly post?: never
		/**
		 * Delete a project secret scanning rule
		 * @description Delete a project secret scanning rule with the provided ID.
		 *
		 *     Project **Admin** is required
		 */
		readonly delete: operations["deleteRule"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/settings-restriction": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get enforcing project setting
		 * @description Get a specified project settings restriction for the given namespace, feature key and component key.
		 *     Note that not providing the component key will **not** return restrictions for the namespace and feature key with a component key set.
		 *
		 *     The authenticated user must have **PROJECT_VIEW** permission for the target project to retrieve a settings restriction.
		 */
		readonly get: operations["get_7"]
		readonly put?: never
		/**
		 * Enforce project restriction
		 * @description Create a new project settings restriction for the given project.
		 *
		 *     The authenticated user must have **PROJECT_ADMIN** permission for the target project to create a settings restriction.
		 */
		readonly post: operations["create_3"]
		/**
		 * Stop enforcing project restriction
		 * @description Delete a specified project settings restriction.
		 *
		 *     If a restriction does not exist for the specified project, namespace, featureKey, and componentKey, the request will be ignored and a 204 response will be returned.
		 *
		 *     The authenticated user must have **PROJECT_ADMIN** permission for the target project to delete a settings restriction.
		 */
		readonly delete: operations["delete_9"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/settings-restriction/all": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get all enforcing project settings
		 * @description Get all project settings restrictions for the given namespace and feature key, including those with a component key set.
		 *
		 *     The authenticated user must have **PROJECT_VIEW** permission for the target project to retrieve a settings restrictions.
		 */
		readonly get: operations["getAll"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/settings/auto-decline": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get auto decline settings
		 * @description Retrieves the auto decline settings for the supplied project. Default settings are returned if no explicit settings have been set for the project.
		 */
		readonly get: operations["getAutoDeclineSettings"]
		/**
		 * Create/Update auto decline settings
		 * @description Creates or updates the auto decline settings for the supplied project.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for this project to call the resource.
		 */
		readonly put: operations["setAutoDeclineSettings"]
		readonly post?: never
		/**
		 * Delete auto decline settings
		 * @description Delete auto decline settings for the supplied project.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for this project to call the resource.
		 */
		readonly delete: operations["deleteAutoDeclineSettings"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/settings/auto-merge": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get pull request auto-merge settings
		 * @description Retrieves the pull request auto-merge settings for the supplied project. Default settings will be returned if no explicit settings have been set for the project
		 *
		 *     The authenticated user must have <strong>PROJECT_VIEW</strong> permission for this project to call the resource.
		 */
		readonly get: operations["get_4"]
		/**
		 * Create or update the pull request auto-merge settings
		 * @description Creates or updates the pull request auto-merge settings for the supplied project, and applies the restriction action specified in the request.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for this project to call the resource.
		 */
		readonly put: operations["set"]
		readonly post?: never
		/**
		 * Delete pull request auto-merge settings
		 * @description Deletes pull request auto-merge settings for the supplied project.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for this project to call the resource.
		 */
		readonly delete: operations["delete_4"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/settings/hooks": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repository hooks
		 * @description Retrieve a page of repository hooks for this project.
		 *
		 *     The authenticated user must have <strong>PROJECT_READ</strong> permission for the specified project to call this resource.
		 */
		readonly get: operations["getRepositoryHooks"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/settings/hooks/{hookKey}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get a repository hook
		 * @description Retrieve a repository hook for this project.
		 *
		 *     The authenticated user must have <strong>PROJECT_READ</strong> permission for the specified project to call this resource.
		 */
		readonly get: operations["getRepositoryHook"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/settings/hooks/{hookKey}/enabled": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * Enable repository hook
		 * @description Enable a repository hook for this project and optionally apply new configuration.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.
		 *
		 *     A JSON document may be provided to use as the settings for the hook. These structure and validity of the document is decided by the plugin providing the hook.
		 */
		readonly put: operations["enableHook"]
		readonly post?: never
		/**
		 * Disable repository hook
		 * @description Disable a repository hook for this project.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.
		 */
		readonly delete: operations["disableHook"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/settings/hooks/{hookKey}/settings": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repository hook settings
		 * @description Retrieve the settings for a repository hook for this project.
		 *
		 *     The authenticated user must have <strong>PROJECT_READ</strong> permission for the specified project to call this resource.
		 */
		readonly get: operations["getSettings"]
		/**
		 * Update repository hook settings
		 * @description Modify the settings for a repository hook for this project.
		 *
		 *     The service will reject any settings which are too large, the current limit is 32KB once serialized.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.
		 *
		 *     A JSON document can be provided to use as the settings for the hook. These structure and validity of the document is decided by the plugin providing the hook.
		 */
		readonly put: operations["setSettings"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/settings/pull-requests/{scmId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get merge strategy
		 * @description Retrieve the merge strategy configuration for this project and SCM.
		 *
		 *     The authenticated user must have <strong>PROJECT_READ</strong> permission for the context repository to call this resource.
		 */
		readonly get: operations["getPullRequestSettings"]
		readonly put?: never
		/**
		 * Update merge strategy
		 * @description Update the pull request merge strategy configuration for this project and SCM.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the context repository to call this resource.
		 *
		 *     Only the strategies provided will be enabled, the default must be set and included in the set of strategies.
		 *
		 *     An explicitly set pull request merge strategy configuration can be deleted by POSTing a document with an empty "mergeConfig" attribute. i.e:
		 *     <pre>{
		 *         "mergeConfig": {}
		 *     }
		 *     </pre>
		 *
		 *     Upon completion of this request, the effective configuration will be the configuration explicitly set for the SCM, or if no such explicit configuration is set then the default configuration will be used.
		 */
		readonly post: operations["updatePullRequestSettings"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/settings/reviewer-groups": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get all reviewer groups
		 * @description Retrieve a page of reviewer groups of a given scope.
		 *
		 *     The authenticated user must have <b>PROJECT_READ</b> permission for the specified project to call this resource.
		 */
		readonly get: operations["getReviewerGroups"]
		readonly put?: never
		/**
		 * Create reviewer group
		 * @description Create a reviewer group.
		 *
		 *     The authenticated user must have <b>PROJECT_ADMIN</b> permission for the specified project to call this resource.
		 */
		readonly post: operations["create_1"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/settings/reviewer-groups/{id}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get reviewer group
		 * @description Retrieve a reviewer group.
		 *
		 *     The authenticated user must have <b>PROJECT_READ</b> permission for the specified project to call this resource.
		 */
		readonly get: operations["getReviewerGroup"]
		/**
		 * Update reviewer group attributes
		 * @description Update the attributes of a reviewer group.
		 *
		 *     The authenticated user must have <b>PROJECT_READ</b> permission for the specified project to call this resource.
		 */
		readonly put: operations["update_1"]
		readonly post?: never
		/**
		 * Delete reviewer group
		 * @description Deletes a reviewer group.
		 *
		 *     The authenticated user must have <b>PROJECT_ADMIN</b> permission for the specified project to call this resource.
		 */
		readonly delete: operations["delete_6"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/webhooks": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Find webhooks
		 * @description Find webhooks in this project.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.
		 */
		readonly get: operations["findWebhooks"]
		readonly put?: never
		/**
		 * Create webhook
		 * @description Create a webhook for the project specified via the URL.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.
		 */
		readonly post: operations["createWebhook"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/webhooks/{webhookId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get webhook
		 * @description Get a webhook by ID.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.
		 */
		readonly get: operations["getWebhook"]
		/**
		 * Update webhook
		 * @description Update an existing webhook.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.
		 */
		readonly put: operations["updateWebhook"]
		readonly post?: never
		/**
		 * Delete webhook
		 * @description Delete a webhook for the project specified via the URL.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.
		 */
		readonly delete: operations["deleteWebhook"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/webhooks/{webhookId}/latest": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get last webhook invocation details
		 * @description Get the latest invocations for a specific webhook.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.
		 */
		readonly get: operations["getLatestInvocation"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/webhooks/{webhookId}/statistics": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get webhook statistics
		 * @description Get the statistics for a specific webhook.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.
		 */
		readonly get: operations["getStatistics"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/webhooks/{webhookId}/statistics/summary": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get webhook statistics summary
		 * @description Get the statistics summary for a specific webhook.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.
		 */
		readonly get: operations["getStatisticsSummary"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/projects/{projectKey}/webhooks/test": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Test webhook
		 * @description Test connectivity to a specific endpoint.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.
		 */
		readonly post: operations["testWebhook"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/repos": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Search for repositories
		 * @description Retrieve a page of repositories based on query parameters that control the search. See the documentation of the parameters for more details.
		 *
		 *     This resource is anonymously accessible.
		 *
		 *     <b>Note on permissions.</b> In absence of the <code>permission</code> query parameter the implicit 'read' permission is assumed. Please note that this permission is lower than the <tt>REPO_READ</tt> permission rather than being equal to it. The implicit 'read' permission for a given repository is assigned to any user that has any of the higher permissions, such as <tt>REPO_READ</tt>, as well as to anonymous users if the repository is marked as public. The important implication of the above is that an anonymous request to this resource with a permission level <tt>REPO_READ</tt> is guaranteed to receive an empty list of repositories as a result. For anonymous requests it is therefore recommended to not specify the <tt>permission</tt> parameter at all.
		 */
		readonly get: operations["getRepositories_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/secret-scanning/exempt": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Find all repos exempt from secret scan
		 * @description Find all repositories exempt from secret scanning
		 */
		readonly get: operations["findExemptReposByScope"]
		readonly put?: never
		/**
		 * Bulk exempt repos from secret scanning
		 * @description Bulk exempt a  list of repositories from being scanned for secrets. User must be have global **ADMIN** permissions.
		 */
		readonly post: operations["bulkAddExemptRepositories"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/secret-scanning/rules": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Find global secret scanning rules
		 * @description Find global secret scanning rules by filtering.
		 */
		readonly get: operations["search_4"]
		readonly put?: never
		/**
		 * Create global secret scanning rule
		 * @description Create a new global secret scanning rule. Global rules are used when scanning all non exempt repositories.
		 */
		readonly post: operations["createRule_2"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/secret-scanning/rules/{id}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get a global secret scanning rule
		 * @description Get a global secret scanning rule by ID.
		 */
		readonly get: operations["getRule_2"]
		/**
		 * Edit a global secret scanning rule.
		 * @description Edit an existing global secret scanning rule
		 */
		readonly put: operations["editRule_2"]
		readonly post?: never
		/**
		 * Delete a global secret scanning rule
		 * @description Delete a global secret scanning rule with the provided ID
		 */
		readonly delete: operations["deleteRule_2"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/signing/x509-certificates": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get all X.509 certificates
		 * @description Get all X.509 certificates that have been added to the system.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly get: operations["getAllCertificates"]
		readonly put?: never
		/**
		 * Create an X.509 certificate
		 * @description Create an X.509 certificate. This will add the given X.509 certificate to the system. Existing entries will not be overridden if an X.509 certificate already exists. Once added, an X.509 certificate cannot be updated.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly post: operations["createCertificate"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/signing/x509-certificates/{id}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		readonly post?: never
		/**
		 * Delete an X.509 certificate
		 * @description Delete an X.509 certificate specified by the given ID.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly delete: operations["deleteCertificate"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/signing/x509-certificates/crl/{id}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * Update X.509 CRL entries
		 * @description Update the certificate revocation list (CRL) entries for an issuer X.509 certificate in the system, identified by <code>id</code>. This will add any new revoked X.509 certificates that were issued by the given issuer X.509 certificate.
		 *
		 *     This endpoint will schedule a request to asynchronously perform the task. Please allow time for the task to complete as it will vary depending on how many CRLs there are to retrieve and process.
		 *
		 *     Note: CRL updates are scheduled to run every 24 hours. You may wish to trigger a refresh manually using this endpoint, otherwise, entries will be updated daily.
		 *
		 *     The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
		 */
		readonly put: operations["updateCertificateRevocationListEntries"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/system-signing/configuration": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get system signing configuration
		 * @description Gets the configuration details for system signing Git objects.
		 */
		readonly get: operations["getSystemSigningConfiguration"]
		readonly put?: never
		/**
		 * Update system signing configuration
		 * @description Updates the configuration for system signing Git objects.
		 */
		readonly post: operations["updateSystemSigningConfiguration"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/users": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get all users
		 * @description Retrieve a page of users, optionally run through provided filters.
		 *
		 *
		 *     Only authenticated users may call this resource.
		 *     ### Permission Filters
		 *
		 *
		 *     The following three sub-sections list parameters supported for permission filters (where <code>[root]</code> is
		 *     the root permission filter name, e.g. <code>permission</code>, <code>permission.1</code> etc.) depending on the
		 *     permission resource. The system determines which filter to apply (Global, Project or Repository permission)
		 *     based on the `[root]` permission value. E.g. <code>ADMIN</code> is a global permission,
		 *     <code>PROJECT_ADMIN</code> is a project permission and <code>REPO_ADMIN</code> is a repository permission. Note
		 *     that the parameters for a given resource will be looked up in the order as they are listed below, that is e.g.
		 *     for a project resource, if both <code>projectId</code> and <code>projectKey</code> are provided, the system will
		 *     use <code>projectId</code> for the lookup.
		 *     <h4>Global permissions</h4>
		 *
		 *
		 *     The permission value under <code>[root]</code> is the only required and recognized parameter, as global
		 *     permissions do not apply to a specific resource.
		 *
		 *
		 *     Example valid filter: <code>permission=ADMIN</code>.
		 *     <h4>Project permissions</h4>
		 *
		 *
		 *     - <code>[root]</code>- specifies the project permission
		 *     - <code>[root].projectId</code> - specifies the project ID to lookup the project by
		 *     - <code>[root].projectKey</code> - specifies the project key to lookup the project by
		 *
		 *
		 *     Example valid filter: <code>permission.1=PROJECT_ADMIN&amp;permission.1.projectKey=TEST_PROJECT</code>.
		 *     #### Repository permissions
		 *
		 *
		 *     - <code>[root]</code>- specifies the repository permission
		 *     - <code>[root].projectId</code> - specifies the repository ID to lookup the repository by
		 *     - <code>[root].projectKey</code> and <code>[root].repositorySlug</code>- specifies the project key and     repository slug to lookup the repository by; both values <i>need to</i> be provided for this look up to be     triggered
		 *
		 *
		 *     Example valid filter: <code>permission.2=REPO_ADMIN&amp;permission.2.projectKey=TEST_PROJECT&amp;permission.2.repositorySlug=test_repo</code>.
		 */
		readonly get: operations["getUsers_2"]
		/**
		 * Update user details
		 * @description Update the currently authenticated user's details. The update will always be applied to the currently authenticated user.
		 */
		readonly put: operations["updateUserDetails_1"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/users/{userSlug}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get user
		 * @description Retrieve the user matching the supplied <strong>userSlug</strong>.
		 */
		readonly get: operations["getUser"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/users/{userSlug}/avatar.png": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Update user avatar
		 * @description Update the avatar for the user with the supplied <strong>slug</strong>.
		 *
		 *
		 *     This resource accepts POST multipart form data, containing a single image in a form-field named 'avatar'.
		 *
		 *
		 *     There are configurable server limits on both the dimensions (1024x1024 pixels by default) and uploaded
		 *     file size (1MB by default). Several different image formats are supported, but <strong>PNG</strong> and
		 *     <strong>JPEG</strong> are preferred due to the file size limit.
		 *
		 *
		 *     This resource has Cross-Site Request Forgery (XSRF) protection. To allow the request to
		 *     pass the XSRF check the caller needs to send an <code>X-Atlassian-Token</code> HTTP header with the
		 *     value <code>no-check</code>.
		 *
		 *
		 *     An example <a href="http://curl.haxx.se/">curl</a> request to upload an image name 'avatar.png' would be:
		 *     ```
		 *     curl -X POST -u username:password -H "X-Atlassian-Token: no-check" http://example.com/rest/api/latest/users/jdoe/avatar.png -F avatar=@avatar.png
		 *     ```
		 *
		 *
		 *     Users are always allowed to update their own avatar. To update someone else's avatar the authenticated user must
		 *     have global <strong>ADMIN</strong> permission, or global <strong>SYS_ADMIN</strong> permission to update a
		 *     <strong>SYS_ADMIN</strong> user's avatar.
		 */
		readonly post: operations["uploadAvatar_1"]
		/**
		 * Delete user avatar
		 * @description Delete the avatar associated to a user.
		 *
		 *
		 *     Users are always allowed to delete their own avatar. To delete someone else's avatar the authenticated user must
		 *     have global <strong>ADMIN</strong> permission, or global <strong>SYS_ADMIN</strong> permission to update a
		 *     <strong>SYS_ADMIN</strong> user's avatar.
		 */
		readonly delete: operations["deleteAvatar"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/users/{userSlug}/settings": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get user settings
		 * @description Retrieve a map of user setting key values for a specific user identified by the user slug.
		 */
		readonly get: operations["getUserSettings"]
		readonly put?: never
		/**
		 * Update user settings
		 * @description Update the entries of a map of user setting key/values for a specific user identified by the user slug.
		 */
		readonly post: operations["updateSettings"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/api/latest/users/credentials": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * Set password
		 * @description Update the currently authenticated user's password.
		 */
		readonly put: operations["updateUserPassword_1"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/audit/latest/notification-settings/retention-config-review": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		readonly post?: never
		/**
		 * Dismiss retention config notification
		 * @description Dismisses the retention config review notification displayed by the audit plugin for the user that's currently logged in.
		 */
		readonly delete: operations["dismissRetentionConfigReviewNotification"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/branch-permissions/latest/projects/{projectKey}/repos/{repositorySlug}/restrictions": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Search for ref restrictions
		 * @description Search for restrictions using the supplied parameters.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission or higher to call this resource. Only authenticated users may call this resource.
		 */
		readonly get: operations["getRestrictions_1"]
		readonly put?: never
		/**
		 * Create multiple ref restrictions
		 * @description Allows creating multiple restrictions at once.
		 */
		readonly post: operations["createRestrictions_1"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/branch-permissions/latest/projects/{projectKey}/repos/{repositorySlug}/restrictions/{id}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get a ref restriction
		 * @description Returns a restriction as specified by a restriction id.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission or higher to call this resource. Only authenticated users may call this resource.
		 */
		readonly get: operations["getRestriction_1"]
		readonly put?: never
		readonly post?: never
		/**
		 * Delete a ref restriction
		 * @description Deletes a restriction as specified by a restriction id.
		 *
		 *     The authenticated user must have <strong>REPO_ADMIN</strong> permission or higher to call this resource. Only authenticated users may call this resource.
		 */
		readonly delete: operations["deleteRestriction_1"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/branch-permissions/latest/projects/{projectKey}/restrictions": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Search for ref restrictions
		 * @description Search for restrictions using the supplied parameters.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission or higher to call this resource. Only authenticated users may call this resource.
		 */
		readonly get: operations["getRestrictions"]
		readonly put?: never
		/**
		 * Create multiple ref restrictions
		 * @description Allows creating multiple restrictions at once.
		 */
		readonly post: operations["createRestrictions"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/branch-permissions/latest/projects/{projectKey}/restrictions/{id}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get a ref restriction
		 * @description Returns a restriction as specified by a restriction id.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission or higher to call this resource. Only authenticated users may call this resource.
		 */
		readonly get: operations["getRestriction"]
		readonly put?: never
		readonly post?: never
		/**
		 * Delete a ref restriction
		 * @description Deletes a restriction as specified by a restriction id.
		 *
		 *     The authenticated user must have <strong>PROJECT_ADMIN</strong> permission or higher to call this resource. Only authenticated users may call this resource.
		 */
		readonly delete: operations["deleteRestriction"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/branch-utils/latest/projects/{projectKey}/repos/{repositorySlug}/branches": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Create branch
		 * @description  Creates a branch in the specified repository.
		 *
		 *
		 *     The authenticated user must have an effective <strong>REPO_WRITE</strong> permission to call this resource. If
		 *     branch permissions are set up in the repository, the authenticated user must also have access to the branch name
		 *     that is to be created.
		 */
		readonly post: operations["createBranch"]
		/**
		 * Delete branch
		 * @description  Deletes a branch in the specified repository.
		 *
		 *
		 *      If the branch does not exist, this operation will not raise an error. In other words after calling this resource
		 *      and receiving a 204 response the branch provided in the request is guaranteed to not exist in the specified
		 *      repository any more, regardless of its existence beforehand.
		 *
		 *
		 *      The optional 'endPoint' parameter of the request may contain a commit ID that the provided ref name is
		 *      expected to point to. Should the ref point to a different commit ID, a 400 response will be returned with
		 *      appropriate error details.
		 *
		 *
		 *      The authenticated user must have an effective <strong>REPO_WRITE</strong> permission to call this resource. If
		 *      branch permissions are set up in the repository, the authenticated user must also have access to the branch name
		 *      that is to be deleted.
		 */
		readonly delete: operations["deleteBranch"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/branch-utils/latest/projects/{projectKey}/repos/{repositorySlug}/branches/info/{commitId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get branch
		 * @description Gets the branch information associated with a single commit from a given repository.
		 */
		readonly get: operations["findByCommit"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/build-status/latest/commits/{commitId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get build statuses for commit
		 * @deprecated
		 * @description Gets build statuses associated with a commit.
		 *
		 *     <strong>Deprecated in 7.14, please use the repository based builds resource instead.</strong>
		 */
		readonly get: operations["getBuildStatus"]
		readonly put?: never
		/**
		 * Create build status for commit
		 * @deprecated
		 * @description Associates a build status with a commit.The <code>state</code>, the <code>key</code> and the <code>url</code> fields are mandatory. The <code>name</code> and<code>description</code> fields are optional.All fields (mandatory or optional) are limited to 255 characters, except for the <code>url</code>,which is limited to 450 characters.Supported values for the <code>state</code> are <code>SUCCESSFUL</code>, <code>FAILED</code>and <code>INPROGRESS</code>.The authenticated user must have <strong>LICENSED</strong> permission or higher to call this resource.
		 *
		 *     <strong>Deprecated in 7.14, please use the repository based builds resource instead.</strong>
		 */
		readonly post: operations["addBuildStatus"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/build-status/latest/commits/stats": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Get build status statistics for multiple commits
		 * @description Produces a list of the build statistics for multiple commits. Commits <em>without any builds associated with them</em> will not be returned.<br> For example if the commit <code>e00cf62997a027bbf785614a93e2e55bb331d268</code> does not have any build statuses associated with it, it will not be present in the response.
		 */
		readonly post: operations["getMultipleBuildStatusStats"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/build-status/latest/commits/stats/{commitId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get build status statistics for commit
		 * @description Gets statistics regarding the builds associated with a commit
		 */
		readonly get: operations["getBuildStatusStats"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/comment-likes/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/comments/{commentId}/reactions/{emoticon}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * React to a comment
		 * @description Add an emoticon reaction to a comment
		 */
		readonly put: operations["react"]
		readonly post?: never
		/**
		 * Remove a reaction from comment
		 * @description Remove an emoticon reaction from a comment
		 */
		readonly delete: operations["unReact"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/comment-likes/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}/reactions/{emoticon}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * React to a PR comment
		 * @description Add an emoticon reaction to a pull request comment
		 */
		readonly put: operations["react_1"]
		readonly post?: never
		/**
		 * Remove a reaction from a PR comment
		 * @description Remove an emoticon reaction from a pull request comment
		 */
		readonly delete: operations["unReact_1"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/default-reviewers/latest/projects/{projectKey}/condition": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Create default reviewer
		 * @description Create a default reviewer pull request condition for the given project.
		 */
		readonly post: operations["createPullRequestCondition"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/default-reviewers/latest/projects/{projectKey}/condition/{id}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * Update the default reviewer
		 * @description Update the default reviewer pull request condition for the given ID.
		 */
		readonly put: operations["updatePullRequestCondition"]
		readonly post?: never
		/**
		 * Remove default reviewer
		 * @description Delete the default reviewer pull request condition associated with the given ID.
		 */
		readonly delete: operations["deletePullRequestCondition"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/default-reviewers/latest/projects/{projectKey}/conditions": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get default reviewers
		 * @description Return a page of default reviewer pull request conditions that have been configured for this project.
		 */
		readonly get: operations["getPullRequestConditions"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/condition": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Create default reviewers condition
		 * @description Create a default reviewer pull request condition for the given repository.
		 */
		readonly post: operations["createPullRequestCondition_1"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/condition/{id}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * Update a default reviewer condition
		 * @description Update the default reviewer pull request condition for the given ID.
		 */
		readonly put: operations["updatePullRequestCondition_1"]
		readonly post?: never
		/**
		 * Delete a default reviewer condition
		 * @description Delete the default reviewer pull request condition associated with the given ID.
		 */
		readonly delete: operations["deletePullRequestCondition_1"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/conditions": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get configured default reviewers
		 * @description Return a page of default reviewer pull request conditions that have been configured for this repository.
		 */
		readonly get: operations["getPullRequestConditions_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/reviewers": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get required reviewers for PR creation
		 * @description Return a set of users who are required reviewers for pull requests created from the given source repository and ref to the given target ref in this repository.
		 */
		readonly get: operations["getReviewers"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/default-tasks/latest/projects/{projectKey}/repos/{repositorySlug}/tasks": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get a page of default tasks
		 * @description Retrieves the default tasks for the supplied repository.
		 *
		 *     The authenticated user must have **REPO_VIEW** permission for this repository to call the resource.
		 */
		readonly get: operations["getDefaultTasks_1"]
		readonly put?: never
		/**
		 * Add a default task
		 * @description Creates a default task for the supplied repository.
		 *
		 *     The authenticated user must have **REPO_ADMIN** permission for this repository to call the resource.
		 */
		readonly post: operations["addDefaultTask_1"]
		/**
		 * Deletes all default tasks for the repository
		 * @description Delete all the default tasks for the supplied repository
		 *
		 *     The authenticated user must have **REPO_ADMIN** permission for this repository to call the resource.
		 */
		readonly delete: operations["deleteAllDefaultTasks_1"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/default-tasks/latest/projects/{projectKey}/repos/{repositorySlug}/tasks/{taskId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * Update a default task
		 * @description Updates a default task for the supplied repository.
		 *
		 *     The authenticated user must have **REPO_ADMIN** permission for this repository to call the resource.
		 */
		readonly put: operations["updateDefaultTask_1"]
		readonly post?: never
		/**
		 * Delete a specific default task
		 * @description Delete a specific default task for a repository.
		 *
		 *     The authenticated user must have **REPO_ADMIN** permission for this repository to call the resource.
		 */
		readonly delete: operations["deleteDefaultTask_1"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/default-tasks/latest/projects/{projectKey}/tasks": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get a page of default tasks
		 * @description Retrieves the default tasks for the supplied project.
		 *
		 *     The authenticated user must have **PROJECT_VIEW** permission for this project to call the resource.
		 */
		readonly get: operations["getDefaultTasks"]
		readonly put?: never
		/**
		 * Add a default task
		 * @description Creates a default task for the project.
		 *
		 *     The authenticated user must have **PROJECT_ADMIN** permission for this project to call the resource.
		 */
		readonly post: operations["addDefaultTask"]
		/**
		 * Deletes all default tasks for the project
		 * @description Delete all the default tasks for the supplied project
		 *
		 *     The authenticated user must have **PROJECT_ADMIN** permission for this project to call the resource.
		 */
		readonly delete: operations["deleteAllDefaultTasks"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/default-tasks/latest/projects/{projectKey}/tasks/{taskId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * Update a default task
		 * @description Updates a default task for the supplied project.
		 *
		 *     The authenticated user must have **PROJECT_ADMIN** permission for this project to call the resource.
		 */
		readonly put: operations["updateDefaultTask"]
		readonly post?: never
		/**
		 * Delete a specific default task
		 * @description Delete a specific default task for a project.
		 *
		 *     The authenticated user must have **PROJECT_ADMIN** permission for this project to call the resource.
		 */
		readonly delete: operations["deleteDefaultTask"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/git/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/rebase": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Check PR rebase precondition
		 * @description Checks preconditions to determine whether the pull request can be rebased.
		 *
		 *     Some of the preconditions are:
		 *
		 *     - The pull request is between Git repositories
		 *     - The pull request is currently open
		 *     - The pull request's {@link PullRequest#getFromRef "from" ref} is a <i>branch</i>
		 *        - In other words, the qualified ID for the "from" ref must start with <code>refs/heads/</code>
		 *        - Tags, and other non-standard refs, cannot be rebased
		 *     - The current user has an e-mail address
		 *        - Pull requests cannot be rebased anonymously
		 *        - `git rebase` records the current user as the committer for the rebased commits, which        requires a name and e-mail address
		 *     - The current user has <i>write</i> access to the {@link PullRequest#getFromRef "from" ref}'s repository
		 *        - Note that in order to <i>view</i> a pull request a user is only required to have <i>read</i>      access to the {@link PullRequest#getToRef toRef}'s repository, so just because a user can <i>see</i>      a pull request does not mean they can request a rebase
		 *
		 *
		 *     This list is not exhaustive, and the exact set of preconditions applied can be extended by third-party add-ons.
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
		 */
		readonly get: operations["canRebase"]
		readonly put?: never
		/**
		 * Rebase pull request
		 * @description Rebases the specified pull request, rewriting the incoming commits to start from the tip commit of the pull request's target branch. <i>This operation alters the pull request's source branch and cannot be undone.</i>
		 *
		 *     The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets <i>and</i> <strong>REPO_WRITE</strong> permission for the pull request's source repository to call this resource.
		 */
		readonly post: operations["rebase"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/git/latest/projects/{projectKey}/repos/{repositorySlug}/tags": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Create tag
		 * @description Creates a tag in the specified repository.
		 *
		 *     The authenticated user must have an effective <strong>REPO_WRITE</strong> permission to call this resource.
		 *
		 *     'LIGHTWEIGHT' and 'ANNOTATED' are the two type of tags that can be created. The 'startPoint' can either be a ref or a 'commit'.
		 */
		readonly post: operations["createTag"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/git/latest/projects/{projectKey}/repos/{repositorySlug}/tags/{name}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		readonly post?: never
		/**
		 * Delete tag
		 * @description Deletes a tag in the specified repository.
		 *
		 *     The authenticated user must have an effective <strong>REPO_WRITE</strong> permission to call this resource.
		 */
		readonly delete: operations["deleteTag"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/gpg/latest/keys": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get all GPG keys
		 * @description Find all the keys for the currently authenticated user. Optionally, users with ADMIN and higher permissions may choose to specify the <code>user</code> parameter to retrieve GPG keys for another user.
		 *
		 *     Only authenticated users may call this endpoint.
		 */
		readonly get: operations["getKeysForUser"]
		readonly put?: never
		/**
		 * Create a GPG key
		 * @description Add a GPG key to the authenticated user's account. Optionally, users with ADMIN and higher permissions may choose to specify the <code>user</code> parameter to add a GPG key for another user.
		 *
		 *     Only authenticated users may call this endpoint.
		 */
		readonly post: operations["addKey"]
		/**
		 * Delete all GPG keys for user
		 * @description Delete all GPG keys for a supplied user.
		 */
		readonly delete: operations["deleteForUser"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/gpg/latest/keys/{fingerprintOrId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		readonly post?: never
		/**
		 * Delete a GPG key
		 * @description Delete the GPG key with the specified ID or Key Fingerprint.
		 */
		readonly delete: operations["deleteKey"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/annotations": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get Code Insights annotations for a commit
		 * @description Get annotations for the given commit ID, filtered by any query parameters given.
		 */
		readonly get: operations["getAnnotations_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get all Code Insights reports for a commit
		 * @description Retrieve all reports for the given commit.
		 */
		readonly get: operations["getReports"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get a Code Insights report
		 * @description Retrieve the specified report.
		 */
		readonly get: operations["getACodeInsightsReport"]
		/**
		 * Create a Code Insights report
		 * @description Create a new insight report, or replace the existing one if a report already exists for the given repository, commit, and report key. A request to replace an existing report will be rejected if the authenticated user was not the creator of the specified report.
		 *
		 *     The report key should be a unique string chosen by the reporter and should be unique enough not to potentially clash with report keys from other reporters. We recommend using reverse DNS namespacing or a similar standard to ensure that collision is avoided.<h1>Report parameters</h1><table summary="Report parameters">    <tr>        <th>Parameter</th>        <th>Description</th>        <th>Required?</th>        <th>Restrictions</th>        <th>Type</th>    </tr>    <tr>        <td>title</td>        <td>A short string representing the name of the report</td>        <td>Yes</td>        <td>Max length: 450 characters (but we recommend that it is shorter so that the display is nicer)</td>        <td>String</td>    </tr>    <tr>        <td>details</td>        <td>             A string to describe the purpose of the report. This string may contain             escaped newlines and if it does it will display the content accordingly.        </td>        <td>No</td>        <td>Max length: 2000 characters</td>        <td>String</td>    </tr>    <tr>        <td>result</td>        <td>Indicates whether the report is in a passed or failed state</td>        <td>No</td>        <td>One of: PASS, FAIL</td>        <td>String</td>    </tr>    <tr>        <td>data</td>        <td>An array of data fields (described below) to display information on the report</td>        <td>No</td>        <td>Maximum 6 data fields</td>        <td>Array</td>    </tr>    <tr>        <td>reporter</td>        <td>A string to describe the tool or company who created the report</td>        <td>No</td>        <td>Max length: 450 characters</td>        <td>String</td>    </tr>    <tr>        <td>link</td>        <td>A URL linking to the results of the report in an external tool.</td>        <td>No</td>        <td>Must be a valid http or https URL</td>        <td>String</td>    </tr>    <tr>        <td>logoUrl</td>        <td>A URL to the report logo. If none is provided, the default insights logo will be used.</td>        <td>No</td>        <td>Must be a valid http or https URL</td>        <td>String</td>    </tr></table><h1>Data parameters</h1>The data field on the report is an array with at most 6 data fields (JSON maps) containing information that is to be displayed on the report (see the request example).<table summary="Data parameters">    <tr>        <th>Parameter</th>        <th>Description</th>        <th>Type</th>    </tr>    <tr>        <td>title</td>        <td>A string describing what this data field represents</td>        <td>String</td>    </tr>    <tr>        <td>type</td>        <td>             The type of data contained in the value field. If not provided,             then the value will be detected as a boolean, number or string.             One of: BOOLEAN, DATE, DURATION, LINK, NUMBER, PERCENTAGE, TEXT        </td>        <td>String</td>    </tr>    <tr>        <td>value</td>        <td>            A value based on the type provided. Either a raw value             (string, number or boolean) or a map. See below.        </td>    </tr></table><table summary="Types">    <tr>        <th>Type Field</th>        <th>Value Field Type</th>        <th>Value Field Display</th>    </tr>    <tr>        <td>None/Omitted</td>        <td>Number, String or Boolean (not an array or object)</td>        <td>Plain text</td>    </tr>    <tr>        <td>BOOLEAN</td>        <td>Boolean</td>        <td>The value will be read as a JSON boolean and displayed as 'Yes' or 'No'.</td>    </tr>    <tr>        <td>DATE</td>        <td>Number</td>        <td>             The value will be read as a JSON number in the form of a Unix timestamp              (milliseconds) and will be displayed as a relative date if the date is less             than one week ago, otherwise it will be displayed as an absolute date.        </td>    </tr>    <tr>        <td>DURATION</td>        <td>Number</td>        <td>             The value will be read as a JSON number in milliseconds and             will be displayed in a human readable duration format.        </td>    </tr>    <tr>        <td>LINK</td>        <td>Object: {"linktext": "Link text here", "href": "https://link.to.annotation/in/external/tool"}</td>        <td>             The value will be read as a JSON object containing the fields "linktext"             and "href" and will be displayed as a clickable link on the report.        </td>    </tr>    <tr>        <td>NUMBER</td>        <td>Number</td>        <td>             The value will be read as a JSON number and large numbers will             be displayed in a human readable format (e.g. 14.3k).        </td>    </tr>    <tr>        <td>PERCENTAGE</td>        <td>Number (between 0 and 100)</td>        <td>             The value will be read as a JSON number between 0 and 100              and will be displayed with a percentage sign.        </td>    </tr>    <tr>        <td>TEXT</td>        <td>String</td>        <td>The value will be read as a JSON string and will be displayed as-is</td>    </tr></table>
		 */
		readonly put: operations["setACodeInsightsReport"]
		readonly post?: never
		/**
		 * Delete a Code Insights report
		 * @description Delete a report for the given commit. Also deletes any annotations associated with this report.
		 */
		readonly delete: operations["deleteACodeInsightsReport"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}/annotations": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get Code Insights annotations for a report
		 * @description Retrieve the specified report's annotations.
		 */
		readonly get: operations["getAnnotations"]
		readonly put?: never
		/**
		 * Add Code Insights annotations
		 * @description Add annotations to the given report. The request should be a JSON object mapping the string "annotations" to an array of maps containing the annotation data, as described below. See also the example request.
		 *
		 *     A few things to note:- Annotations are an extension of a report, so a report must first exist in order to post annotations.   Annotations are posted separately from the report, and can be posted in bulk using this endpoint.
		 *     - Only the annotations that are on lines changed in the unified diff will be displayed. This means it is  likely not all annotations posted will be displayed on the pull request  It also means that if the user is viewing a side-by-side diff,  commit diff or iterative review diff they will not be able to view the annotations.
		 *     - A report cannot have more than 1000 annotations by default, however this property is congurable at an  instance level. If the request would result in more than the maximum number of annotations being stored  then the entire request is rejected and no new annotations are stored.
		 *     - There is no de-duplication of annotations on Bitbucket so be sure that reruns of builds will first  delete the report and annotations before creating them.
		 *
		 *     # Annotation parameters
		 *
		 *     |Parameter|Description|Required?|Restrictions|Type|
		 *     |--- |--- |--- |--- |--- |
		 *     |path|The path of the file on which this annotation should be placed. This is the path of the filerelative to the git repository. If no path is provided, then it will appear in the overview modalon all pull requests where the tip of the branch is the given commit, regardless of which files weremodified.|No||String|
		 *     |line|The line number that the annotation should belong to. If no line number is provided, then it willdefault to 0 and in a pull request it will appear at the top of the file specified by the path field.|No|Non-negative integer|Integer|
		 *     |message|The message to display to users|Yes|The maximum length accepted is 2000 characters, however the user interface may truncate this valuefor display purposes. We recommend that the message is short and succinct, with further detailsavailable to the user if needed on the page linked to by the the annotation link.|String|
		 *     |severity|The severity of the annotation|Yes|One of: LOW, MEDIUM, HIGH|String|
		 *     |link|An http or https URL representing the location of the annotation in the external tool|No||String|
		 *     |type|The type of annotation posted|No|One of: VULNERABILITY, CODE_SMELL, BUG|String|
		 *     |externalId|If the caller requires a link to get or modify this annotation, then an ID must be provided. It isnot used or required by Bitbucket, but only by the annotation creator for updating or deleting thisspecific annotation.|No|A string value shorter than 450 characters|String|
		 */
		readonly post: operations["addAnnotations"]
		/**
		 * Delete Code Insights annotations
		 * @description Delete annotations for a given report that match the given external IDs, or all annotations if no external IDs are provided.
		 */
		readonly delete: operations["deleteAnnotations"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}/annotations/{externalId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * Create or replace a Code Insights annotation
		 * @description Create an annotation with the given external ID, or replace it if it already exists. A request to replace an existing annotation will be rejected if the authenticated user was not the creator of the specified report.
		 */
		readonly put: operations["setAnnotation"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/jira/latest/comments/{commentId}/issues": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Create Jira Issue
		 * @description Create a Jira issue and associate it with a comment on a pull request.
		 *
		 *     This resource can only be used with comments on a pull request. Attempting to call this resource with a different type of comment (for example, a comment on a commit) will result in an error.
		 *
		 *      The authenticated user must have <strong>REPO_READ</strong> permission for the repository containing the comment to call this resource.
		 *
		 *     The JSON structure for the create issue format is specified by Jira's REST v2 API.
		 */
		readonly post: operations["createIssue"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/jira/latest/issues/{issueKey}/commits": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get changesets for issue key
		 * @description Retrieve a page of changesets associated with the given issue key.
		 */
		readonly get: operations["getCommitsByIssueKey"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/jira/latest/projects/{projectKey}/primary-enhanced-entitylink": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get entity link
		 * @description Retrieves the enchanced primary entitylink
		 *
		 *     The authenticated user must have <strong>PROJECT_READ</strong> permission for the project having the primary enhanced entitylink.
		 *
		 *
		 */
		readonly get: operations["getEnhancedEntityLinkForProject"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/jira/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/issues": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get issues for a pull request
		 * @description Retrieves Jira issue keys that are associated with the commits in the specified pull request. The number of commits checked for issues is limited to a default of 100.
		 */
		readonly get: operations["getIssueKeysForPullRequest"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/keys/latest/projects/{projectKey}/repos/{repositorySlug}/ssh": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repository SSH keys
		 * @description Retrieves the access keys for the repository identified in the URL.
		 */
		readonly get: operations["getForRepository_1"]
		readonly put?: never
		/**
		 * Add repository SSH key
		 * @description Register a new SSH key and grants access to the repository identified in the URL.
		 */
		readonly post: operations["addForRepository"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/keys/latest/projects/{projectKey}/repos/{repositorySlug}/ssh/{keyId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repository SSH key
		 * @description Retrieves the access key for the SSH key with id <code>keyId</code> on the repository identified in the URL.
		 */
		readonly get: operations["getForRepository"]
		readonly put?: never
		readonly post?: never
		/**
		 * Revoke repository SSH key
		 * @description Remove an existing access key for the repository identified in the URL. If the same SSH key is used as an access key for multiple projects or repositories, only the access to the repository identified in the URL will be revoked.
		 */
		readonly delete: operations["revokeForRepository"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/keys/latest/projects/{projectKey}/repos/{repositorySlug}/ssh/{keyId}/permission/{permission}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * Update repository SSH key permission
		 * @description Updates the permission granted to the specified SSH key to the repository identified in the URL.
		 */
		readonly put: operations["updatePermission_1"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/keys/latest/projects/{projectKey}/ssh": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get SSH key
		 * @description Retrieves the access keys for the project identified in the URL.
		 */
		readonly get: operations["getSshKeysForProject"]
		readonly put?: never
		/**
		 * Add project SSH key
		 * @description Register a new SSH key and grants access to the project identified in the URL.
		 */
		readonly post: operations["addForProject"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/keys/latest/projects/{projectKey}/ssh/{keyId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get project SSH key
		 * @description Retrieves the access key for the SSH key with id <code>keyId</code> on the project identified in the URL.
		 */
		readonly get: operations["getForProject"]
		readonly put?: never
		readonly post?: never
		/**
		 * Revoke project SSH key
		 * @description Remove an existing access key for the project identified in the URL. If the same SSH key is used as an access key for multiple projects or repositories, only the access to the project identified in the URL will be revoked.
		 */
		readonly delete: operations["revokeForProject"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/keys/latest/projects/{projectKey}/ssh/{keyId}/permission/{permission}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * Update project SSH key permission
		 * @description Updates the permission granted to the specified SSH key to the project identified in the URL.
		 */
		readonly put: operations["updatePermission"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/keys/latest/ssh/{keyId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		readonly post?: never
		/**
		 * Revoke project SSH key
		 * @description Remove an existing access key for the projects and repositories in the submitted entity. If the same SSH key is used as an access key for multiple projects or repositories not supplied, only the access to the projects or repositories identified will be revoked.
		 */
		readonly delete: operations["revokeMany"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/keys/latest/ssh/{keyId}/projects": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get project SSH keys
		 * @description Retrieves all project-related access keys for the SSH key with id <code>keyId</code>. If the current user is not an admin any of the projects the key provides access to, none are returned.
		 */
		readonly get: operations["getForProjects"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/keys/latest/ssh/{keyId}/repos": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repository SSH key
		 * @description Retrieves all repository-related access keys for the SSH key with id <code>keyId</code>. If the current user is not an admin of any of the projects the key provides access to, none are returned.
		 */
		readonly get: operations["getForRepositories"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/account/settings/preferred-mirror": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get preferred mirror
		 * @description Retrieves the current user's preferred mirror server
		 */
		readonly get: operations["getPreferredMirrorId"]
		readonly put?: never
		/**
		 * Set preferred mirror
		 * @description Sets the mirror specified by a mirror ID as the current user's preferred mirror
		 */
		readonly post: operations["setPreferredMirrorId"]
		/**
		 * Remove preferred mirror
		 * @description Removes the current user's preferred mirror
		 */
		readonly delete: operations["deletePreferredMirrorId"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/analyticsSettings": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get analytics settings from upstream
		 * @description Gets the analytics settings from the mirroring upstream
		 */
		readonly get: operations["analyticsSettings"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/authenticate": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Authenticate on behalf of a user
		 * @description Authenticates on behalf of a user. Used by mirrors to check the credentials supplied to them by users. If successful a user and their effective permissions are returned as follows -
		 *
		 *     * For SSH credentials - all the effective user permissions are returned.
		 *     * For all other credentials - the highest global permission is returned along with highest repository permission if repository ID is also provided in the request.
		 *
		 *     Currently only username/password, bearer token and SSH credentials are supported.
		 */
		readonly post: operations["authenticate"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/farmNodes": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get farm nodes
		 * @description Retrieves the list of farm nodes in this cluster
		 */
		readonly get: operations["getFarmNodes"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/mirrorRepos/{externalRepositoryId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get clone URLs
		 * @description Retrieves all available clone urls for the specified repository.
		 */
		readonly get: operations["getMirroredRepository"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/mirrorServers": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get all mirrors
		 * @description Returns a list of mirrors
		 */
		readonly get: operations["listMirrors"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/mirrorServers/{mirrorId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get mirror by ID
		 * @description Returns the mirror specified by a mirror ID
		 */
		readonly get: operations["getMirror"]
		/**
		 * Upgrade mirror server
		 * @description Upgrades the mirror server in question with the provided details.This endpoint can only be called by the mirror instance or system administrators<br>Since 5.8
		 */
		readonly put: operations["upgrade"]
		readonly post?: never
		/**
		 * Delete mirror by ID
		 * @description Removes a mirror, disabling all access and notifications for the mirror server in question
		 */
		readonly delete: operations["remove"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/mirrorServers/{mirrorId}/events": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Publish RepositoryMirrorEvent
		 * @description Publishes a RepositoryMirrorEvent on the event queue.
		 */
		readonly post: operations["publishEvent"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/progress": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get synchronization progress state
		 * @description  Retrieves synchronization progress state.If there's no progress to report, this resource will return <pre><code> {"discovering":false,"syncedRepos":0,"totalRepos":0}</code></pre> If there are repositories in the process of synchronizing, but the precise number hasn't been discovered yet, this resource will return: <pre><code> {"discovering":true,"syncedRepos":3,"totalRepos":100}</code></pre> If there is progress to report and the total number of repositories is known, this resource will return: <pre> <code> {"discovering":false,"syncedRepos":242,"totalRepos":1071}</code> </pre>
		 */
		readonly get: operations["getSynchronizationProgress"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/projects/{projectId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get project
		 * @description Returns the requested project using its primary key ID.<br> Since 6.7
		 */
		readonly get: operations["getProjectById"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/projects/{projectId}/repos": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get hashes for repositories in project
		 * @description Returns a page of repositories for a given project, enriched with a content hash
		 */
		readonly get: operations["getAllReposForProject"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/repos": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get content hashes for repositories
		 * @description Returns a page of repositories enriched with a content hash and default branch
		 */
		readonly get: operations["getAllContentHashes"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/repos/{repoId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get content hash for a repository
		 * @description Returns a repository enriched with a content hash and default branch
		 */
		readonly get: operations["getContentHashById"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/repos/{repoId}/mirrors": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get mirrors for repository
		 * @description Returns a page of mirrors for a repository. This resource will return <strong>all mirrors</strong> along with authorized links to the mirror's repository REST resource. To determine if a repository is available on the mirror, the returned URL needs to be called.
		 */
		readonly get: operations["getRepositoryMirrors"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/requests": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get mirroring requests
		 * @description Retrieves a mirroring request
		 */
		readonly get: operations["listRequests"]
		readonly put?: never
		/**
		 * Create a mirroring request
		 * @description Creates a new mirroring request
		 */
		readonly post: operations["register"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/requests/{mirroringRequestId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get a mirroring request
		 * @description Retrieves a mirroring request
		 */
		readonly get: operations["getMirroringRequest"]
		readonly put?: never
		readonly post?: never
		/**
		 * Delete a mirroring request
		 * @description Deletes a mirroring request
		 */
		readonly delete: operations["deleteMirroringRequest"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/requests/{mirroringRequestId}/accept": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Accept a mirroring request
		 * @description Accepts a mirroring request
		 */
		readonly post: operations["accept"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/requests/{mirroringRequestId}/reject": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Reject a mirroring request
		 * @description Rejects a mirroring request
		 */
		readonly post: operations["reject"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/supportInfo/out-of-sync-repos/content": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get out-of-sync repositories
		 * @description Retrieves a list of repository IDs which have not synced on the mirror node for at least the threshold time limit after the content was changed in the corresponding upstream repositories. The threshold time limit is defined by a configuration property <code>plugin.mirroring.repository.diagnostics.sync.tolerance</code>. The detection of out of sync repositories is dependent on the timing of a scheduled job which is controlled by a configuration property <code>plugin.mirroring.synchronization.interval</code> which means in worst case it can take upto <code>plugin.mirroring.repository.diagnostics.sync.tolerance</code> + <code>plugin.mirroring.synchronization.interval</code> time to detect an out-of-sync repository.<p>To use this API, a configuration property <code>plugin.mirroring.repository.diagnostics.sync.enabled</code> has to be set to <code>true</code> as this feature is disabled by default.
		 */
		readonly get: operations["getOutOfSyncRepositories"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/supportInfo/projects/{projectKey}/repos/{repositorySlug}/repo-lock-owner": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get the repository lock owner for the syncing process
		 * @description Retrieves the information about the process owning the sync lock for this repository. The process owning the lock could be running on any of the nodes in the mirror farm
		 */
		readonly get: operations["getRepositoryLockOwner"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/supportInfo/projects/{projectKey}/repos/{repositorySlug}/repoSyncStatus": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Gets information about the mirrored repository
		 * @description Retrieves information about an external repository mirrored by the mirror server. Particularly the local ID & external ID of the repository
		 */
		readonly get: operations["getRepoSyncStatus_1"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/supportInfo/refChangesQueue": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get items in ref changes queue
		 * @description Retrieves a list of up to <code>plugin.mirroring.farm.max.ref.change.queue.dump.size</code> items currently in the ref changes queue. The ref changes queue is an internal component of every mirror farm, and is shared between all nodes. When the contents of an upstream repository changes, an item is added to this queue so that the mirror farm nodes know to synchronize. The mirror farm constantly polls and removes items from this queue for processing, so it is empty most of the time.
		 */
		readonly get: operations["getRefChangesQueue"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/supportInfo/refChangesQueue/count": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get total number of items in ref changes queue
		 * @description Retrieves the total number of items currently in the ref changes queue
		 */
		readonly get: operations["getRefChangesQueueCount"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/supportInfo/repo-lock-owners": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get all the repository lock owners for the syncing process
		 * @description Retrieves the information about all the processes from the all the nodes in the mirror farm owning sync lock for any repository
		 */
		readonly get: operations["getRepositoryLockOwners"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/supportInfo/repoSyncStatus": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get sync status of repositories
		 * @description Retrieves a page of sync statuses of the repositories on this mirror node
		 */
		readonly get: operations["getRepoSyncStatus"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/syncSettings": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get upstream settings
		 * @description Retrieves upstream settings
		 */
		readonly get: operations["getMirrorSettings"]
		/**
		 * Update upstream settings
		 * @description Sets the settings for the specified upstream
		 */
		readonly put: operations["setMirrorSettings"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/syncSettings/mode": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get mirror mode
		 * @description Gets the current mirror mode
		 */
		readonly get: operations["getMirrorMode"]
		/**
		 * Update mirror mode
		 * @description Sets the mirror mode for the specified upstream
		 */
		readonly put: operations["setMirrorMode"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/syncSettings/projects": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get mirrored project IDs
		 * @description Returns the IDs of the projects that the mirror is configured to mirror
		 */
		readonly get: operations["getMirroredProjects"]
		readonly put?: never
		/**
		 * Add multiple projects to be mirrored
		 * @description Configures the mirror to mirror the provided projects
		 */
		readonly post: operations["startMirroringProjects"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/syncSettings/projects/{projectId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Add project to be mirrored
		 * @description Configures the mirror to mirror the provided project
		 */
		readonly post: operations["startMirroringProject"]
		/**
		 * Stop mirroring project
		 * @description Configures the mirror to no longer mirror the provided project
		 */
		readonly delete: operations["stopMirroringProject"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/upstreamServer": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get upstream server
		 * @description Retrieves upstream server details.
		 */
		readonly get: operations["getUpstreamServer"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/zdu/end": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * End ZDU upgrade on mirror farm
		 * @description Finalizes the ZDU upgrade on the mirror farm denying heterogeneous cluster formation
		 */
		readonly post: operations["endRollingUpgrade"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/mirroring/latest/zdu/start": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Start ZDU upgrade on mirror farm
		 * @description Enables upgrading of individual nodes within the cluster, allowing a heterogeneous cluster formation
		 */
		readonly post: operations["startRollingUpgrade"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/policies/latest/admin/repos/archive": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repository archive policy
		 * @description Retrieves the repository archive policy for the instance.
		 *
		 *     The user must be authenticated to access this resource.
		 */
		readonly get: operations["getRepositoryArchivePolicy"]
		/**
		 * Update repository archive policy
		 * @description Sets the repository archive policy for the instance.
		 *
		 *     The authenticated user must have <b>SYS_ADMIN</b> permission.
		 */
		readonly put: operations["setRepositoryArchivePolicy"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/policies/latest/admin/repos/delete": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get repository delete policy
		 * @description Retrieves the repository delete policy for the instance.
		 *
		 *     The user must be authenticated to access this resource.
		 */
		readonly get: operations["getRepositoryDeletePolicy"]
		/**
		 * Update the repository delete policy
		 * @description Sets the repository delete policy for the instance.
		 *
		 *     The authenticated user must have <b>SYS_ADMIN</b> permission.
		 */
		readonly put: operations["setRepositoryDeletePolicy"]
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/required-builds/latest/projects/{projectKey}/repos/{repositorySlug}/condition": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Create a required builds merge check
		 * @description Create a required build merge check for the given repository.
		 *
		 *     The authenticated user must have **REPO_ADMIN** permission for the target repository to register a required build merge check.
		 *
		 *     The contents of the required build merge check request are:
		 *
		 *     These fields are **required**:
		 *
		 *     - **buildParentKeys**: A non-empty list of build parent keys that require green builds for this merge check to pass
		 *     - **refMatcher.id**: The value to match refs against in the target branch
		 *     - **refMatcher.type.id**: The type of ref matcher, one of: "ANY_REF", "BRANCH", "PATTERN", "MODEL_CATEGORY" or "MODEL_BRANCH"
		 *
		 *
		 *     These fields are optional:
		 *
		 *     - **exemptRefMatcher.id** The value to exempt refs in the source branch from this check
		 *     - **exemptRefMatcher.type.id**: The type of exempt ref matcher, one of: "ANY_REF", "BRANCH", "PATTERN", "MODEL_CATEGORY" or "MODEL_BRANCH"
		 *
		 *
		 *
		 */
		readonly post: operations["createRequiredBuildsMergeCheck"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/required-builds/latest/projects/{projectKey}/repos/{repositorySlug}/condition/{id}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		/**
		 * Update a required builds merge check
		 * @description Update the required builds merge check for the given ID.
		 *
		 *     The authenticated user must have **REPO_ADMIN** permission for the target repository to update a required build merge check.
		 *
		 *     The contents of the required build merge check request are:
		 *
		 *     These fields are **required**:
		 *
		 *     - **buildParentKeys**: A non-empty list of build parent keys that require green builds for this merge check to pass
		 *     - **refMatcher.id**: The value to match refs against in the target branch
		 *     - **refMatcher.type.id**: The type of ref matcher, one of: "ANY_REF", "BRANCH", "PATTERN", "MODEL_CATEGORY" or "MODEL_BRANCH"
		 *
		 *
		 *     These fields are optional:
		 *
		 *     - **exemptRefMatcher.id** The value to exempt refs in the source branch from this check
		 *     - **exemptRefMatcher.type.id**: The type of exempt ref matcher, one of: "ANY_REF", "BRANCH", "PATTERN", "MODEL_CATEGORY" or "MODEL_BRANCH"
		 *
		 *
		 *
		 */
		readonly put: operations["updateRequiredBuildsMergeCheck"]
		readonly post?: never
		/**
		 * Delete a required builds merge check
		 * @description Deletes a required build existing merge check, given it's ID.
		 *
		 *     The authenticated user must have **REPO_ADMIN** permission for the target repository to delete a required build merge check.
		 */
		readonly delete: operations["deleteRequiredBuildsMergeCheck"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/required-builds/latest/projects/{projectKey}/repos/{repositorySlug}/conditions": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get required builds merge checks
		 * @description Returns a page of required build merge checks that have been configured for this repository.
		 *
		 *     The authenticated user must have **REPO_READ** permission for the target repository to request a page of required build merge checks.
		 */
		readonly get: operations["getPageOfRequiredBuildsMergeChecks"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/ssh/latest/keys": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get SSH keys for user
		 * @description Retrieve a page of SSH keys.
		 */
		readonly get: operations["getSshKeys"]
		readonly put?: never
		/**
		 * Add SSH key for user
		 * @description Add a new SSH key to a supplied user.
		 */
		readonly post: operations["addSshKey"]
		/**
		 * Delete all user SSH key
		 * @description Delete all SSH keys for a supplied user.
		 */
		readonly delete: operations["deleteSshKeys"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/ssh/latest/keys/{keyId}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get SSH key for user by keyId
		 * @description Retrieve an SSH key by keyId
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
		 */
		readonly get: operations["getSshKey"]
		readonly put?: never
		readonly post?: never
		/**
		 * Remove SSH key
		 * @description Delete an SSH key.
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
		 */
		readonly delete: operations["deleteSshKey"]
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/ssh/latest/settings": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get SSH settings
		 * @description Gets the SSH settings from the upstream.
		 */
		readonly get: operations["sshSettings"]
		readonly put?: never
		readonly post?: never
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/sync/latest/projects/{projectKey}/repos/{repositorySlug}": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/**
		 * Get synchronization status
		 * @description Retrieves the synchronization status for the specified repository. In addition to listing refs which cannot be synchronized, if any, the status also provides the timestamp for the most recent synchronization and indicates whether synchronization is available and enabled. If "?at" is specified in the URL, the synchronization status for the specified ref is returned, rather than the complete repository status.
		 *
		 *     The authenticated user must have <b>REPO_READ</b> permission for the repository, or it must be public if the request is anonymous. Additionally, after synchronization is enabled for a repository, meaning synchronization was available at that time, permission changes and other actions can cause it to become unavailable. Even when synchronization is enabled, if it is no longer available for the repository it will not be performed.
		 */
		readonly get: operations["getStatus"]
		readonly put?: never
		/**
		 * Disable synchronization
		 * @description Enables or disables synchronization for the specified repository. When synchronization is enabled, branches within the repository are immediately synchronized and the status is updated with the outcome. That initial synchronization is performed before the REST request returns, allowing it to return the updated status.
		 *
		 *     The authenticated user must have <b>REPO_ADMIN</b> permission for the specified repository. Anonymous users cannot manage synchronization, even on public repositories. Additionally, synchronization must be available for the specified repository. Synchronization is only available if:
		 *
		 *     - The repository is a fork, since its origin is used as upstream
		 *     - The owning user still has access to the fork's origin,  if the repository is a <i>personalfork</i>
		 */
		readonly post: operations["setEnabled"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
	readonly "/sync/latest/projects/{projectKey}/repos/{repositorySlug}/synchronize": {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly get?: never
		readonly put?: never
		/**
		 * Manual synchronization
		 * @description Allows developers to apply a manual operation to bring a ref back in sync with upstream when it becomes out of sync due to conflicting changes. The following actions are supported:
		 *
		 *     - <tt>MERGE</tt>: Merges in commits from the upstream ref. After applying this action, the   synchronized ref will be <tt>AHEAD</tt> (as it still includes commits that do not exist   upstream.
		 *        - This action is only supported for <tt>DIVERGED</tt> refs
		 *        - If a "commitMessage" is provided in the context, it will be used on the merge commit.      Otherwise a default message is used.
		 *     - <tt>DISCARD</tt>: <i>Throws away</i> local changes in favour of those made upstream. This is a   <i>destructive</i> operation where commits in the local repository are lost.
		 *        - No context entries are supported for this action
		 *        - If the upstream ref has been deleted, the local ref is deleted as well
		 *        - Otherwise, the local ref is updated to reference the same commit as upstream, even if      the update is not fast-forward (similar to a forced push)
		 *
		 *
		 *     The authenticated user must have <b>REPO_WRITE</b> permission for the specified repository. Anonymous users cannot synchronize refs, even on public repositories. Additionally, synchronization must be <i>enabled</i> and <i>available</i> for the specified repository.
		 */
		readonly post: operations["synchronize"]
		readonly delete?: never
		readonly options?: never
		readonly head?: never
		readonly patch?: never
		readonly trace?: never
	}
}
export type webhooks = Record<string, never>
export interface components {
	schemas: {
		readonly AdminPasswordUpdate: {
			/** @example jcitizen */
			readonly name?: string
			/** @example my-secret-password */
			readonly password?: string
			/** @example my-secret-password */
			readonly passwordConfirm?: string
		}
		readonly ApplicationId: Record<string, unknown>
		readonly ApplicationUser: {
			readonly active?: boolean
			readonly displayName?: string
			readonly emailAddress?: string
			/** Format: int32 */
			readonly id?: number
			readonly name?: string
			readonly slug?: string
			/** @enum {string} */
			readonly type?: "NORMAL" | "SERVICE"
		}
		readonly Comment: {
			readonly anchor?: components["schemas"]["CommentThreadDiffAnchor"]
			readonly author?: components["schemas"]["ApplicationUser"]
			readonly comments?: readonly components["schemas"]["Comment"][]
			/** Format: date-time */
			readonly createdDate?: string
			/** Format: int64 */
			readonly id?: number
			readonly permittedOperations?: components["schemas"]["CommentOperations"]
			readonly properties?: Record<string, unknown>
			/** Format: date-time */
			readonly resolvedDate?: string
			readonly resolver?: components["schemas"]["ApplicationUser"]
			/** @enum {string} */
			readonly severity?: "BLOCKER" | "NORMAL"
			/** @enum {string} */
			readonly state?: "OPEN" | "PENDING" | "RESOLVED"
			readonly text?: string
			readonly thread?: components["schemas"]["CommentThread"]
			/** Format: date-time */
			readonly updatedDate?: string
			/** Format: int32 */
			readonly version?: number
		}
		readonly Commentable: Record<string, unknown>
		readonly CommentOperations: {
			readonly deletable?: boolean
			readonly editable?: boolean
			readonly transitionable?: boolean
		}
		readonly CommentThread: {
			readonly anchor?: components["schemas"]["CommentThreadDiffAnchor"]
			readonly anchored?: boolean
			readonly commentable?: components["schemas"]["Commentable"]
			/** Format: date-time */
			readonly createdDate?: string
			/** Format: int64 */
			readonly id?: number
			readonly resolved?: boolean
			/** Format: date-time */
			readonly resolvedDate?: string
			readonly resolver?: components["schemas"]["ApplicationUser"]
			readonly rootComment?: components["schemas"]["Comment"]
			/** Format: date-time */
			readonly updatedDate?: string
		}
		readonly CommentThreadDiffAnchor: {
			/** @enum {string} */
			readonly diffType?: "COMMIT" | "EFFECTIVE" | "RANGE"
			readonly fileAnchor?: boolean
			/** @enum {string} */
			readonly fileType?: "FROM" | "TO"
			readonly fromHash?: string
			/** Format: int32 */
			readonly line?: number
			readonly lineAnchor?: boolean
			/** @enum {string} */
			readonly lineType?: "ADDED" | "CONTEXT" | "REMOVED"
			readonly multilineAnchor?: boolean
			/** Format: int32 */
			readonly multilineStartLine?: number
			/** @enum {string} */
			readonly multilineStartLineType?: "ADDED" | "CONTEXT" | "REMOVED"
			readonly orphaned?: boolean
			readonly path?: string
			readonly srcPath?: string
			readonly toHash?: string
		}
		readonly Context: {
			/** @example Merging in latest from upstream. */
			readonly commitMessage?: string
		}
		readonly Credentials:
			| components["schemas"]["RestBearerTokenCredentials"]
			| components["schemas"]["RestSshCredentials"]
			| components["schemas"]["RestUsernamePasswordCredentials"]
		readonly DiffContentFilter: Record<string, unknown>
		readonly EnrichedRepository: {
			readonly archived?: boolean
			/** @example main */
			readonly defaultBranch?: string
			/** @example My repo description */
			readonly description?: string
			readonly forkable?: boolean
			/** @example e3c939f9ef4a7fae272e */
			readonly hierarchyId?: string
			/** Format: int32 */
			readonly id?: number
			readonly links?: Record<string, unknown>
			/** @example My repo */
			readonly name?: string
			readonly origin?: {
				readonly archived?: boolean
				/** @example main */
				readonly defaultBranch?: string
				/** @example My repo description */
				readonly description?: string
				readonly forkable?: boolean
				/** @example e3c939f9ef4a7fae272e */
				readonly hierarchyId?: string
				/** Format: int32 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example My repo */
				readonly name?: string
				/** Format: int32 */
				readonly partition?: number
				readonly project?: {
					readonly avatar?: string
					readonly avatarUrl?: string
					/** @example The description for my cool project */
					readonly description?: string
					/** Format: int32 */
					readonly id?: number
					/** @example PRJ */
					readonly key: string
					readonly links?: Record<string, unknown>
					/** @example My Cool Project */
					readonly name?: string
					readonly public?: boolean
					/** @example PROJECT */
					readonly scope?: string
					/** @enum {string} */
					readonly type?: "NORMAL" | "PERSONAL"
				}
				readonly public?: boolean
				readonly relatedLinks?: Record<string, unknown>
				/** @example git */
				readonly scmId?: string
				/** @example REPOSITORY */
				readonly scope?: string
				/** @example my-repo */
				readonly slug?: string
				/** @enum {string} */
				readonly state?:
					| "AVAILABLE"
					| "INITIALISATION_FAILED"
					| "INITIALISING"
					| "OFFLINE"
				/** @example Available */
				readonly statusMessage?: string
			}
			/** Format: int32 */
			readonly partition?: number
			readonly project?: {
				readonly avatar?: string
				readonly avatarUrl?: string
				/** @example The description for my cool project */
				readonly description?: string
				/** Format: int32 */
				readonly id?: number
				/** @example PRJ */
				readonly key: string
				readonly links?: Record<string, unknown>
				/** @example My Cool Project */
				readonly name?: string
				readonly public?: boolean
				/** @example PROJECT */
				readonly scope?: string
				/** @enum {string} */
				readonly type?: "NORMAL" | "PERSONAL"
			}
			readonly properties?: {
				/** @example 457389a0b871fb61012a7351d09aefc0cf1c57c306449d4b5df4d2f381df8433 */
				readonly contentHash?: string
				/** @example refs/heads/master */
				readonly defaultBranchId?: string
				/** @example 11e5cd17e8d74d84a11f2c8a6bbc6ae0a2b69059e54030f49214c94d980364c1 */
				readonly metadataHash?: string
			}
			readonly public?: boolean
			readonly relatedLinks?: Record<string, unknown>
			/** @example git */
			readonly scmId?: string
			/** @example REPOSITORY */
			readonly scope?: string
			/** @example my-repo */
			readonly slug?: string
			/** @enum {string} */
			readonly state?:
				| "AVAILABLE"
				| "INITIALISATION_FAILED"
				| "INITIALISING"
				| "OFFLINE"
			/** @example Available */
			readonly statusMessage?: string
		}
		readonly ExampleAvatarMultipartFormData: {
			/**
			 * Format: binary
			 * @description The avatar file to upload.
			 */
			readonly avatar?: string
		}
		readonly ExampleCertificateMultipartFormData: {
			/**
			 * Format: binary
			 * @description The X.509 certificate file to upload.
			 */
			readonly certificate?: string
		}
		readonly ExampleFiles: {
			readonly files?: components["schemas"]["ExampleJsonLastModifiedCallback"]
		}
		readonly ExampleJsonLastModifiedCallback: {
			readonly latestCommit?: {
				readonly author?: {
					readonly avatarUrl?: string
					/** @example charlie@example.com */
					readonly emailAddress?: string
					/** @example Charlie */
					readonly name?: string
				}
				/**
				 * Format: int64
				 * @example 1359075920
				 */
				readonly authorTimestamp?: number
				readonly committer?: {
					readonly avatarUrl?: string
					/** @example charlie@example.com */
					readonly emailAddress?: string
					/** @example Charlie */
					readonly name?: string
				}
				/**
				 * Format: int64
				 * @example 1449075830
				 */
				readonly committerTimestamp?: number
				/** @example abcdef0 */
				readonly displayId?: string
				/** @example abcdef0123abcdef4567abcdef8987abcdef6543 */
				readonly id?: string
				/** @example More work on feature 1 */
				readonly message?: string
				readonly parents?: readonly components["schemas"]["RestMinimalCommit"][]
			}
			readonly pomXml?: {
				readonly author?: {
					readonly avatarUrl?: string
					/** @example charlie@example.com */
					readonly emailAddress?: string
					/** @example Charlie */
					readonly name?: string
				}
				/**
				 * Format: int64
				 * @example 1359075920
				 */
				readonly authorTimestamp?: number
				readonly committer?: {
					readonly avatarUrl?: string
					/** @example charlie@example.com */
					readonly emailAddress?: string
					/** @example Charlie */
					readonly name?: string
				}
				/**
				 * Format: int64
				 * @example 1449075830
				 */
				readonly committerTimestamp?: number
				/** @example abcdef0 */
				readonly displayId?: string
				/** @example abcdef0123abcdef4567abcdef8987abcdef6543 */
				readonly id?: string
				/** @example More work on feature 1 */
				readonly message?: string
				readonly parents?: readonly components["schemas"]["RestMinimalCommit"][]
			}
			readonly readmeMd?: {
				readonly author?: {
					readonly avatarUrl?: string
					/** @example charlie@example.com */
					readonly emailAddress?: string
					/** @example Charlie */
					readonly name?: string
				}
				/**
				 * Format: int64
				 * @example 1359075920
				 */
				readonly authorTimestamp?: number
				readonly committer?: {
					readonly avatarUrl?: string
					/** @example charlie@example.com */
					readonly emailAddress?: string
					/** @example Charlie */
					readonly name?: string
				}
				/**
				 * Format: int64
				 * @example 1449075830
				 */
				readonly committerTimestamp?: number
				/** @example abcdef0 */
				readonly displayId?: string
				/** @example abcdef0123abcdef4567abcdef8987abcdef6543 */
				readonly id?: string
				/** @example More work on feature 1 */
				readonly message?: string
				readonly parents?: readonly components["schemas"]["RestMinimalCommit"][]
			}
		}
		readonly ExampleMultipartFormData: {
			/** @description The branch on which the <code>path</code> should be modified or created. */
			readonly branch?: string
			/** @description The full content of the file at <code>path</code>. */
			readonly content?: string
			/** @description The message associated with this change, to be used as the commit message. Or null if the default message should be used. */
			readonly message?: string
			/** @description The starting point for <code>branch</code>. If provided and different from <code>branch</code>, <code>branch</code> will be created as a new branch, branching off from <code>sourceBranch</code>. */
			readonly sourceBranch?: string
			/** @description The commit ID of the file before it was edited, used to identify if content has changed. Or null if this is a new file */
			readonly sourceCommitId?: string
		}
		readonly ExamplePostMultipartFormData: {
			/** @description The hook script contents. */
			readonly content?: string
			/** @description A description of the hook script (useful when querying registered hook scripts). */
			readonly description?: string
			/** @description The name of the hook script (useful when querying registered hook scripts). */
			readonly name?: string
			/** @description The type of hook script; supported values are "PRE" for pre-receive hooks and "POST" for post-receive hooks. */
			readonly type?: string
		}
		readonly ExamplePreviewMigration: {
			readonly repositories?: readonly components["schemas"]["RestRepository"][]
		}
		readonly ExamplePutMultipartFormData: {
			/** @description The hook script contents. */
			readonly content?: string
			/** @description A description of the hook script (useful when querying registered hook scripts). */
			readonly description?: string
			/** @description The name of the hook script (useful when querying registered hook scripts). */
			readonly name?: string
		}
		readonly ExampleRequirements: {
			/** @example 3 */
			readonly count?: string
			/** @example true */
			readonly enabled?: boolean
		}
		readonly ExampleSettings: {
			/** @example true */
			readonly booleanValue?: boolean
			/**
			 * Format: double
			 * @example 1.1
			 */
			readonly doubleValue?: number
			/**
			 * Format: int32
			 * @example 1
			 */
			readonly integerValue?: number
			/**
			 * Format: int64
			 * @example -2147483648
			 */
			readonly longValue?: number
			/** @example This is an arbitrary string */
			readonly stringValue?: string
		}
		readonly ExampleSettingsMap: {
			/** @example true */
			readonly "boolean key"?: boolean
			/** @example 10 */
			readonly "long key"?: number
			/** @example string value */
			readonly "string key"?: string
		}
		readonly ExampleSocketAddress: {
			/** @example node.example.com */
			readonly address?: string
			/**
			 * Format: int32
			 * @example 8230
			 */
			readonly port?: number
		}
		readonly ExampleStatus: {
			/**
			 * Format: int32
			 * @example 2
			 */
			readonly currentNumberOfUsers?: number
			/** @example <actual server ID> */
			readonly serverId?: string
		}
		readonly FileListResource: unknown
		readonly FilePart: {
			readonly contentType?: string
			readonly formField?: boolean
			readonly inputStream?: Record<string, unknown>
			readonly name?: string
			/** Format: int64 */
			readonly size?: number
			readonly value?: string
		}
		readonly Group: {
			/** @example group_a */
			readonly name?: string
		}
		readonly GroupAndUsers: {
			/** @example group */
			readonly group?: string
			/** @example [
			 *       "user1",
			 *       "user2"
			 *     ] */
			readonly users: readonly string[]
		}
		readonly GroupPickerContext: {
			/** @example user_a */
			readonly context?: string
			/** @example group_a */
			readonly itemName?: string
		}
		readonly OptionalBodyBeanParam: Record<string, unknown>
		readonly PageRequestImpl: {
			/** Format: int32 */
			readonly limit?: number
			/** Format: int32 */
			readonly start?: number
		}
		readonly Project: {
			readonly description?: string
			/** Format: int32 */
			readonly id?: number
			readonly key?: string
			readonly name?: string
			readonly public?: boolean
			/** @enum {string} */
			readonly type?: "NORMAL" | "PERSONAL"
		}
		readonly PropertyMap: Record<string, unknown>
		readonly PullRequest: {
			readonly author?: components["schemas"]["PullRequestParticipant"]
			readonly closed?: boolean
			/** Format: date-time */
			readonly closedDate?: string
			/** Format: date-time */
			readonly createdDate?: string
			readonly crossRepository?: boolean
			readonly description?: string
			readonly draft?: boolean
			readonly fromRef?: components["schemas"]["PullRequestRef"]
			/** Format: int64 */
			readonly id?: number
			readonly locked?: boolean
			readonly open?: boolean
			readonly participants?: readonly components["schemas"]["PullRequestParticipant"][]
			readonly properties?: Record<string, unknown>
			readonly reviewers?: readonly components["schemas"]["PullRequestParticipant"][]
			/** @enum {string} */
			readonly state?: "DECLINED" | "MERGED" | "OPEN"
			readonly title?: string
			readonly toRef?: components["schemas"]["PullRequestRef"]
			/** Format: date-time */
			readonly updatedDate?: string
			/** Format: int32 */
			readonly version?: number
		}
		readonly PullRequestParticipant: {
			readonly approved?: boolean
			readonly lastReviewedCommit?: string
			readonly pullRequest?: components["schemas"]["PullRequest"]
			/** @enum {string} */
			readonly role?: "AUTHOR" | "PARTICIPANT" | "REVIEWER"
			/** @enum {string} */
			readonly status?: "APPROVED" | "NEEDS_WORK" | "UNAPPROVED"
			readonly user?: components["schemas"]["ApplicationUser"]
		}
		readonly PullRequestRef: {
			readonly displayId?: string
			readonly id?: string
			readonly latestCommit?: string
			readonly repository?: components["schemas"]["Repository"]
			readonly type?: components["schemas"]["RefType"]
		}
		readonly RefType: unknown
		readonly Repository: {
			readonly archived?: boolean
			readonly description?: string
			readonly fork?: boolean
			readonly forkable?: boolean
			readonly hierarchyId?: string
			/** Format: int32 */
			readonly id?: number
			readonly local?: boolean
			readonly name?: string
			readonly offline?: boolean
			readonly origin?: components["schemas"]["Repository"]
			/** Format: int32 */
			readonly partition?: number
			readonly project?: components["schemas"]["Project"]
			readonly public?: boolean
			readonly readOnly?: boolean
			readonly remote?: boolean
			readonly scmId?: string
			readonly slug?: string
			/** @enum {string} */
			readonly state?:
				| "AVAILABLE"
				| "INITIALISATION_FAILED"
				| "INITIALISING"
				| "OFFLINE"
			readonly statusMessage?: string
		}
		readonly RepositoryHookDetails: {
			readonly configFormKey?: string
			readonly description?: string
			readonly key?: string
			readonly name?: string
			readonly supportedScopes?: readonly (
				| "GLOBAL"
				| "PROJECT"
				| "REPOSITORY"
			)[]
			/** @enum {string} */
			readonly type?: "POST_RECEIVE" | "PRE_PULL_REQUEST_MERGE" | "PRE_RECEIVE"
			readonly version?: string
		}
		readonly RestAccessToken: {
			/** Format: date-time */
			readonly createdDate?: string
			/** @example 252973515069 */
			readonly id?: string
			/** @example My access token */
			readonly name?: string
		}
		readonly RestAccessTokenRequest: {
			/** Format: int32 */
			readonly expiryDays?: number
			/** @example My access token */
			readonly name?: string
			/** @example [
			 *       "REPO_ADMIN",
			 *       "PROJECT_READ"
			 *     ] */
			readonly permissions?: readonly string[]
		}
		readonly RestAggregateRejectCounter: {
			/** @example 1630041546433 */
			readonly lastRejectTime?: number
			/**
			 * Format: int64
			 * @example 5
			 */
			readonly rejectCount?: number
			readonly user?: {
				readonly active?: boolean
				readonly avatarUrl?: string
				/** @example Jane Citizen */
				readonly displayName?: string
				/** @example jane@example.com */
				readonly emailAddress?: string
				/**
				 * Format: int32
				 * @example 101
				 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example jcitizen */
				readonly name?: string
				/** @example jcitizen */
				readonly slug?: string
				/** @enum {string} */
				readonly type?: "NORMAL" | "SERVICE"
			}
		}
		readonly RestAnalyticsSettings: {
			readonly canCollectAnalytics?: boolean
			/**
			 * Format: int64
			 * @example 1640390400000
			 */
			readonly serverTime?: number
			/** @example SEN-500 */
			readonly supportEntitlementNumber?: string
		}
		readonly RestAnnouncementBanner: {
			/** @enum {string} */
			readonly audience?: "ALL" | "AUTHENTICATED"
			readonly enabled?: boolean
			readonly message?: string
		}
		readonly RestApplicationProperties: {
			/** @example 1358897885952000 */
			readonly buildDate?: string
			/** @example 20220123103656677 */
			readonly buildNumber?: string
			/** @example Example.com Bitbucket */
			readonly displayName?: string
			/** @example 2.1.0 */
			readonly version?: string
		}
		readonly RestApplicationUser: {
			readonly active?: boolean
			readonly avatarUrl?: string
			/** @example Jane Citizen */
			readonly displayName?: string
			/** @example jane@example.com */
			readonly emailAddress?: string
			/**
			 * Format: int32
			 * @example 101
			 */
			readonly id?: number
			readonly links?: Record<string, unknown>
			/** @example jcitizen */
			readonly name?: string
			/** @example jcitizen */
			readonly slug?: string
			/** @enum {string} */
			readonly type?: "NORMAL" | "SERVICE"
		}
		readonly RestApplicationUserWithPermissions: {
			readonly active?: boolean
			readonly avatarUrl?: string
			/** @example Jane Citizen */
			readonly displayName?: string
			readonly effectivePermissions?: Record<string, unknown>
			/** @example jane@example.com */
			readonly emailAddress?: string
			/**
			 * Format: int32
			 * @example 101
			 */
			readonly id?: number
			readonly links?: Record<string, unknown>
			/** @example jcitizen */
			readonly name?: string
			/** @example jcitizen */
			readonly slug?: string
			/** @enum {string} */
			readonly type?: "NORMAL" | "SERVICE"
		}
		readonly RestApplySuggestionRequest: {
			/** @example 0 */
			readonly commentVersion?: {
				/** Format: int32 */
				readonly asInt?: number
				readonly present?: boolean
			}
			/** @example A commit message */
			readonly commitMessage?: string
			/** @example 1 */
			readonly pullRequestVersion?: {
				/** Format: int32 */
				readonly asInt?: number
				readonly present?: boolean
			}
			/** @example 2 */
			readonly suggestionIndex?: {
				/** Format: int32 */
				readonly asInt?: number
				readonly present?: boolean
			}
		}
		readonly RestAttachmentMetadata: {
			/**
			 * Format: int64
			 * @example 1
			 */
			readonly id?: number
			/** @example {\"A\":\"B\"} */
			readonly metadata?: string
			/** @example test.com/test */
			readonly url?: string
		}
		readonly RestAuthenticationRequest: {
			readonly credentials: components["schemas"]["Credentials"]
			/** Format: int32 */
			readonly repositoryId?: number
		}
		readonly RestAutoDeclineSettings: {
			/** @example true */
			readonly enabled?: boolean
			/**
			 * Format: int32
			 * @example 4
			 */
			readonly inactivityWeeks?: number
			readonly scope?: {
				/**
				 * Format: int32
				 * @example 2
				 */
				readonly resourceId?: number
				/** @enum {string} */
				readonly type?: "GLOBAL" | "PROJECT" | "REPOSITORY"
			}
		}
		readonly RestAutoDeclineSettingsRequest: {
			/** @example true */
			readonly enabled?: boolean
			/**
			 * Format: int32
			 * @example 4
			 */
			readonly inactivityWeeks?: number
		}
		readonly RestAutoMergeProcessingResult: {
			/**
			 * @example CANCELLED
			 * @enum {string}
			 */
			readonly autoMergeProcessingStatus?:
				| "CANCELLED"
				| "LOCK_FAILURE"
				| "MERGED"
				| "STALE"
				| "UNKNOWN"
				| "VETOED"
			readonly pullRequest?: {
				readonly closed?: boolean
				/**
				 * Format: int64
				 * @example 19990759200
				 */
				readonly closedDate?: number
				/**
				 * Format: int64
				 * @example 13590759200
				 */
				readonly createdDate?: number
				/** @example It is a kludge, but put the tuple from the database in the cache. */
				readonly description?: string
				readonly descriptionAsHtml?: string
				readonly draft?: boolean
				readonly fromRef?: {
					/** @example feature-ABC-1233 */
					readonly displayId?: string
					/** @example refs/heads/feature-ABC-123 */
					readonly id?: string
					/** @example babecafebabecafebabecafebabecafebabecafe */
					readonly latestCommit?: string
					readonly repository?: {
						readonly archived?: boolean
						/** @example main */
						readonly defaultBranch?: string
						/** @example My repo description */
						readonly description?: string
						readonly forkable?: boolean
						/** @example e3c939f9ef4a7fae272e */
						readonly hierarchyId?: string
						/** Format: int32 */
						readonly id?: number
						readonly links?: Record<string, unknown>
						/** @example My repo */
						readonly name?: string
						readonly origin?: {
							readonly archived?: boolean
							/** @example main */
							readonly defaultBranch?: string
							/** @example My repo description */
							readonly description?: string
							readonly forkable?: boolean
							/** @example e3c939f9ef4a7fae272e */
							readonly hierarchyId?: string
							/** Format: int32 */
							readonly id?: number
							readonly links?: Record<string, unknown>
							/** @example My repo */
							readonly name?: string
							/** Format: int32 */
							readonly partition?: number
							readonly project?: {
								readonly avatar?: string
								readonly avatarUrl?: string
								/** @example The description for my cool project */
								readonly description?: string
								/** Format: int32 */
								readonly id?: number
								/** @example PRJ */
								readonly key: string
								readonly links?: Record<string, unknown>
								/** @example My Cool Project */
								readonly name?: string
								readonly public?: boolean
								/** @example PROJECT */
								readonly scope?: string
								/** @enum {string} */
								readonly type?: "NORMAL" | "PERSONAL"
							}
							readonly public?: boolean
							readonly relatedLinks?: Record<string, unknown>
							/** @example git */
							readonly scmId?: string
							/** @example REPOSITORY */
							readonly scope?: string
							/** @example my-repo */
							readonly slug?: string
							/** @enum {string} */
							readonly state?:
								| "AVAILABLE"
								| "INITIALISATION_FAILED"
								| "INITIALISING"
								| "OFFLINE"
							/** @example Available */
							readonly statusMessage?: string
						}
						/** Format: int32 */
						readonly partition?: number
						readonly project?: {
							readonly avatar?: string
							readonly avatarUrl?: string
							/** @example The description for my cool project */
							readonly description?: string
							/** Format: int32 */
							readonly id?: number
							/** @example PRJ */
							readonly key: string
							readonly links?: Record<string, unknown>
							/** @example My Cool Project */
							readonly name?: string
							readonly public?: boolean
							/** @example PROJECT */
							readonly scope?: string
							/** @enum {string} */
							readonly type?: "NORMAL" | "PERSONAL"
						}
						readonly public?: boolean
						readonly relatedLinks?: Record<string, unknown>
						/** @example git */
						readonly scmId?: string
						/** @example REPOSITORY */
						readonly scope?: string
						/** @example my-repo */
						readonly slug?: string
						/** @enum {string} */
						readonly state?:
							| "AVAILABLE"
							| "INITIALISATION_FAILED"
							| "INITIALISING"
							| "OFFLINE"
						/** @example Available */
						readonly statusMessage?: string
					}
					/** @enum {string} */
					readonly type?: "BRANCH" | "TAG"
				}
				readonly htmlDescription?: string
				/**
				 * Format: int64
				 * @example 1
				 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				readonly locked?: boolean
				readonly open?: boolean
				readonly participants?: readonly components["schemas"]["RestPullRequestParticipant"][]
				readonly reviewers?: readonly components["schemas"]["RestPullRequestParticipant"][]
				/** @enum {string} */
				readonly state?: "DECLINED" | "MERGED" | "OPEN"
				/** @example Talking Nerdy */
				readonly title?: string
				readonly toRef?: {
					/** @example feature-ABC-1233 */
					readonly displayId?: string
					/** @example refs/heads/feature-ABC-123 */
					readonly id?: string
					/** @example babecafebabecafebabecafebabecafebabecafe */
					readonly latestCommit?: string
					readonly repository?: {
						readonly archived?: boolean
						/** @example main */
						readonly defaultBranch?: string
						/** @example My repo description */
						readonly description?: string
						readonly forkable?: boolean
						/** @example e3c939f9ef4a7fae272e */
						readonly hierarchyId?: string
						/** Format: int32 */
						readonly id?: number
						readonly links?: Record<string, unknown>
						/** @example My repo */
						readonly name?: string
						readonly origin?: {
							readonly archived?: boolean
							/** @example main */
							readonly defaultBranch?: string
							/** @example My repo description */
							readonly description?: string
							readonly forkable?: boolean
							/** @example e3c939f9ef4a7fae272e */
							readonly hierarchyId?: string
							/** Format: int32 */
							readonly id?: number
							readonly links?: Record<string, unknown>
							/** @example My repo */
							readonly name?: string
							/** Format: int32 */
							readonly partition?: number
							readonly project?: {
								readonly avatar?: string
								readonly avatarUrl?: string
								/** @example The description for my cool project */
								readonly description?: string
								/** Format: int32 */
								readonly id?: number
								/** @example PRJ */
								readonly key: string
								readonly links?: Record<string, unknown>
								/** @example My Cool Project */
								readonly name?: string
								readonly public?: boolean
								/** @example PROJECT */
								readonly scope?: string
								/** @enum {string} */
								readonly type?: "NORMAL" | "PERSONAL"
							}
							readonly public?: boolean
							readonly relatedLinks?: Record<string, unknown>
							/** @example git */
							readonly scmId?: string
							/** @example REPOSITORY */
							readonly scope?: string
							/** @example my-repo */
							readonly slug?: string
							/** @enum {string} */
							readonly state?:
								| "AVAILABLE"
								| "INITIALISATION_FAILED"
								| "INITIALISING"
								| "OFFLINE"
							/** @example Available */
							readonly statusMessage?: string
						}
						/** Format: int32 */
						readonly partition?: number
						readonly project?: {
							readonly avatar?: string
							readonly avatarUrl?: string
							/** @example The description for my cool project */
							readonly description?: string
							/** Format: int32 */
							readonly id?: number
							/** @example PRJ */
							readonly key: string
							readonly links?: Record<string, unknown>
							/** @example My Cool Project */
							readonly name?: string
							readonly public?: boolean
							/** @example PROJECT */
							readonly scope?: string
							/** @enum {string} */
							readonly type?: "NORMAL" | "PERSONAL"
						}
						readonly public?: boolean
						readonly relatedLinks?: Record<string, unknown>
						/** @example git */
						readonly scmId?: string
						/** @example REPOSITORY */
						readonly scope?: string
						/** @example my-repo */
						readonly slug?: string
						/** @enum {string} */
						readonly state?:
							| "AVAILABLE"
							| "INITIALISATION_FAILED"
							| "INITIALISING"
							| "OFFLINE"
						/** @example Available */
						readonly statusMessage?: string
					}
					/** @enum {string} */
					readonly type?: "BRANCH" | "TAG"
				}
				/**
				 * Format: int64
				 * @example 14490759200
				 */
				readonly updatedDate?: number
				/** Format: int32 */
				readonly version?: number
			}
		}
		readonly RestAutoMergeProjectSettingsRequest: {
			/** @example false */
			readonly enabled?: boolean
			/**
			 * @example CREATE
			 * @enum {string}
			 */
			readonly restrictionAction?: "CREATE" | "DELETE" | "NONE"
		}
		readonly RestAutoMergeRequest: {
			/** @example true */
			readonly autoSubject?: boolean
			/**
			 * Format: int64
			 * @example 13590759200
			 */
			readonly createdDate?: number
			/** @example babecafebabecafebabecafebabecafebabecafe */
			readonly fromHash?: string
			/** @example (Optional) A descriptive message for the merge commit */
			readonly message?: string
			/** @example (Optional) squash */
			readonly strategyId?: string
			/** @example refs/heads/feature-ABC-123 */
			readonly toRefId?: string
		}
		readonly RestAutoMergeRestrictedSettings: {
			/** @example false */
			readonly enabled?: boolean
			/**
			 * @description The restriction state of this scope's project.
			 * @enum {string}
			 */
			readonly restrictionState?:
				| "NONE"
				| "RESTRICTED_MODIFIABLE"
				| "RESTRICTED_UNMODIFIABLE"
			/** @description The scope that these settings apply to. */
			readonly scope?: {
				/**
				 * Format: int32
				 * @example 2
				 */
				readonly resourceId?: number
				/** @enum {string} */
				readonly type?: "GLOBAL" | "PROJECT" | "REPOSITORY"
			}
		}
		readonly RestAutoMergeSettingsRequest: {
			/** @example false */
			readonly enabled?: boolean
		}
		readonly RestBearerTokenCredentials: {
			/** @example NjU4MjM0NDkxMzM0OuPEm9jk1TZUuhuAw45pdirCqvbD */
			readonly token: string
		}
		readonly RestBitbucketLicense: {
			/**
			 * Format: int64
			 * @example 1331038800000
			 */
			readonly creationDate?: number
			/** Format: int32 */
			readonly daysBeforeExpiry?: number
			/**
			 * Format: int64
			 * @example 1372493732817
			 */
			readonly expiryDate?: number
			/**
			 * Format: int64
			 * @example 1372493732817
			 */
			readonly gracePeriodEndDate?: number
			/** @example <encoded license text> */
			readonly license?: string
			/**
			 * Format: int64
			 * @example 1372493732817
			 */
			readonly maintenanceExpiryDate?: number
			/**
			 * Format: int32
			 * @example 12
			 */
			readonly maximumNumberOfUsers?: number
			/** Format: int32 */
			readonly numberOfDaysBeforeExpiry?: number
			/** Format: int32 */
			readonly numberOfDaysBeforeGracePeriodExpiry?: number
			/** Format: int32 */
			readonly numberOfDaysBeforeMaintenanceExpiry?: number
			/**
			 * Format: int64
			 * @example 1331038800000
			 */
			readonly purchaseDate?: number
			/** @example <server ID embedded in license> */
			readonly serverId?: string
			readonly status?: {
				/**
				 * Format: int32
				 * @example 2
				 */
				readonly currentNumberOfUsers?: number
				/** @example <actual server ID> */
				readonly serverId?: string
			}
			/** @example <support entitlement number embedded in license> */
			readonly supportEntitlementNumber?: string
			readonly unlimitedNumberOfUsers?: boolean
		}
		readonly RestBranch: {
			readonly default?: boolean
			readonly displayId?: string
			/** @example refs/heads/master */
			readonly id?: string
			/** @example 8d51122def5632836d1cb1026e879069e10a1e13 */
			readonly latestChangeset?: string
			/** @example 8d51122def5632836d1cb1026e879069e10a1e13 */
			readonly latestCommit?: string
			readonly type?: components["schemas"]["RefType"]
		}
		readonly RestBranchCreateRequest: {
			/** @description Name of the branch to be created */
			readonly name?: string
			/** @description Commit ID from which the branch is created */
			readonly startPoint?: string
		}
		readonly RestBranchDeleteRequest: {
			/** @description Don't actually delete the ref name, just do a dry run */
			readonly dryRun?: boolean
			/** @description Commit ID that the provided ref name is expected to point to */
			readonly endPoint?: string
			/** @description Name of the ref to be deleted */
			readonly name?: string
		}
		readonly RestBuildCapabilities: {
			readonly buildStatus?: readonly string[]
		}
		readonly RestBuildStats: {
			/** Format: int32 */
			readonly cancelled?: number
			/** Format: int32 */
			readonly failed?: number
			/** Format: int32 */
			readonly inProgress?: number
			/** Format: int32 */
			readonly successful?: number
			/** Format: int32 */
			readonly unknown?: number
		}
		readonly RestBuildStatus: {
			/** @example 3 */
			readonly buildNumber?: string
			/**
			 * Format: int64
			 * @example 1587533099278
			 */
			readonly createdDate?: number
			/** @example A description of the build goes here */
			readonly description?: string
			/** Format: int64 */
			readonly duration?: number
			/** @example TEST-REP3 */
			readonly key?: string
			/** @example Database Matrix Tests */
			readonly name?: string
			/** @example TEST-REP */
			readonly parent?: string
			/** @example refs/heads/master */
			readonly ref?: string
			/** @enum {string} */
			readonly state?:
				| "CANCELLED"
				| "FAILED"
				| "INPROGRESS"
				| "SUCCESSFUL"
				| "UNKNOWN"
			readonly testResults?: {
				/**
				 * Format: int32
				 * @example 1
				 */
				readonly failed?: number
				/**
				 * Format: int32
				 * @example 5
				 */
				readonly skipped?: number
				/**
				 * Format: int32
				 * @example 134
				 */
				readonly successful?: number
			}
			/**
			 * Format: int64
			 * @example 1587533699278
			 */
			readonly updatedDate?: number
			/** @example https://bamboo.example.com/browse/TEST-REP3 */
			readonly url?: string
		}
		readonly RestBuildStatusSetRequest: {
			/** @example 3 */
			readonly buildNumber?: string
			/** @example Unit test build */
			readonly description?: string
			/**
			 * Format: int64
			 * @example 1500000
			 */
			readonly duration?: number
			/** @example TEST-REP123 */
			readonly key: string
			/**
			 * Format: int64
			 * @example 1359075920
			 */
			readonly lastUpdated?: number
			/** @example Database Matrix Tests */
			readonly name?: string
			/** @example TEST-REP */
			readonly parent?: string
			/** @example refs/heads/master */
			readonly ref?: string
			/** @enum {string} */
			readonly state:
				| "CANCELLED"
				| "FAILED"
				| "INPROGRESS"
				| "SUCCESSFUL"
				| "UNKNOWN"
			readonly testResults?: {
				/**
				 * Format: int32
				 * @example 1
				 */
				readonly failed?: number
				/**
				 * Format: int32
				 * @example 5
				 */
				readonly skipped?: number
				/**
				 * Format: int32
				 * @example 134
				 */
				readonly successful?: number
			}
			/** @example https://bamboo.example.com/browse/TEST-REP1-3 */
			readonly url: string
		}
		readonly RestBulkAddInsightAnnotationRequest: {
			readonly annotations?: readonly components["schemas"]["RestSingleAddInsightAnnotationRequest"][]
		}
		readonly RestBulkUserRateLimitSettingsUpdateRequest: {
			readonly settings?: {
				/**
				 * Format: int32
				 * @example 60
				 */
				readonly capacity?: number
				/**
				 * Format: int32
				 * @example 5
				 */
				readonly fillRate?: number
			}
			readonly usernames?: readonly string[]
			readonly whitelisted?: boolean
		}
		readonly RestChange: {
			readonly conflict?: {
				readonly ourChange?: {
					readonly path?: {
						/** @example [
						 *       "path",
						 *       "to",
						 *       "file.txt"
						 *     ] */
						readonly components?: readonly string[]
						/** @example txt */
						readonly extension?: string
						/** @example file.txt */
						readonly name?: string
						/** @example path/to */
						readonly parent?: string
					}
					readonly srcPath?: {
						/** @example [
						 *       "path",
						 *       "to",
						 *       "file.txt"
						 *     ] */
						readonly components?: readonly string[]
						/** @example txt */
						readonly extension?: string
						/** @example file.txt */
						readonly name?: string
						/** @example path/to */
						readonly parent?: string
					}
					/** @enum {string} */
					readonly type?:
						| "ADD"
						| "COPY"
						| "DELETE"
						| "MODIFY"
						| "MOVE"
						| "UNKNOWN"
				}
				readonly theirChange?: {
					readonly path?: {
						/** @example [
						 *       "path",
						 *       "to",
						 *       "file.txt"
						 *     ] */
						readonly components?: readonly string[]
						/** @example txt */
						readonly extension?: string
						/** @example file.txt */
						readonly name?: string
						/** @example path/to */
						readonly parent?: string
					}
					readonly srcPath?: {
						/** @example [
						 *       "path",
						 *       "to",
						 *       "file.txt"
						 *     ] */
						readonly components?: readonly string[]
						/** @example txt */
						readonly extension?: string
						/** @example file.txt */
						readonly name?: string
						/** @example path/to */
						readonly parent?: string
					}
					/** @enum {string} */
					readonly type?:
						| "ADD"
						| "COPY"
						| "DELETE"
						| "MODIFY"
						| "MOVE"
						| "UNKNOWN"
				}
			}
			/** @example abcdef0123abcdef4567abcdef8987abcdef6543 */
			readonly contentId?: string
			readonly executable?: boolean
			/** @example bcdef0123abcdef4567abcdef8987abcdef6543a */
			readonly fromContentId?: string
			readonly links?: Record<string, unknown>
			/** @enum {string} */
			readonly nodeType?: "DIRECTORY" | "FILE" | "SUBMODULE"
			readonly path?: {
				/** @example [
				 *       "path",
				 *       "to",
				 *       "file.txt"
				 *     ] */
				readonly components?: readonly string[]
				/** @example txt */
				readonly extension?: string
				/** @example file.txt */
				readonly name?: string
				/** @example path/to */
				readonly parent?: string
			}
			/**
			 * Format: int32
			 * @example 98
			 */
			readonly percentUnchanged?: number
			readonly srcExecutable?: boolean
			readonly srcPath?: {
				/** @example [
				 *       "path",
				 *       "to",
				 *       "file.txt"
				 *     ] */
				readonly components?: readonly string[]
				/** @example txt */
				readonly extension?: string
				/** @example file.txt */
				readonly name?: string
				/** @example path/to */
				readonly parent?: string
			}
			/** @enum {string} */
			readonly type?: "ADD" | "COPY" | "DELETE" | "MODIFY" | "MOVE" | "UNKNOWN"
		}
		readonly RestChangeset: {
			readonly changes?: {
				readonly isLastPage?: boolean
				/** Format: int32 */
				readonly limit?: number
				/** Format: int32 */
				readonly nextPageStart?: number
				/** Format: int32 */
				readonly size?: number
				/** Format: int32 */
				readonly start?: number
				readonly values?: Record<string, unknown>
			}
			readonly fromCommit?: {
				/** @example abcdef0 */
				readonly displayId?: string
				/** @example abcdef0123abcdef4567abcdef8987abcdef6543 */
				readonly id?: string
			}
			readonly links?: Record<string, unknown>
			readonly repository?: {
				readonly archived?: boolean
				/** @example main */
				readonly defaultBranch?: string
				/** @example My repo description */
				readonly description?: string
				readonly forkable?: boolean
				/** @example e3c939f9ef4a7fae272e */
				readonly hierarchyId?: string
				/** Format: int32 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example My repo */
				readonly name?: string
				readonly origin?: {
					readonly archived?: boolean
					/** @example main */
					readonly defaultBranch?: string
					/** @example My repo description */
					readonly description?: string
					readonly forkable?: boolean
					/** @example e3c939f9ef4a7fae272e */
					readonly hierarchyId?: string
					/** Format: int32 */
					readonly id?: number
					readonly links?: Record<string, unknown>
					/** @example My repo */
					readonly name?: string
					/** Format: int32 */
					readonly partition?: number
					readonly project?: {
						readonly avatar?: string
						readonly avatarUrl?: string
						/** @example The description for my cool project */
						readonly description?: string
						/** Format: int32 */
						readonly id?: number
						/** @example PRJ */
						readonly key: string
						readonly links?: Record<string, unknown>
						/** @example My Cool Project */
						readonly name?: string
						readonly public?: boolean
						/** @example PROJECT */
						readonly scope?: string
						/** @enum {string} */
						readonly type?: "NORMAL" | "PERSONAL"
					}
					readonly public?: boolean
					readonly relatedLinks?: Record<string, unknown>
					/** @example git */
					readonly scmId?: string
					/** @example REPOSITORY */
					readonly scope?: string
					/** @example my-repo */
					readonly slug?: string
					/** @enum {string} */
					readonly state?:
						| "AVAILABLE"
						| "INITIALISATION_FAILED"
						| "INITIALISING"
						| "OFFLINE"
					/** @example Available */
					readonly statusMessage?: string
				}
				/** Format: int32 */
				readonly partition?: number
				readonly project?: {
					readonly avatar?: string
					readonly avatarUrl?: string
					/** @example The description for my cool project */
					readonly description?: string
					/** Format: int32 */
					readonly id?: number
					/** @example PRJ */
					readonly key: string
					readonly links?: Record<string, unknown>
					/** @example My Cool Project */
					readonly name?: string
					readonly public?: boolean
					/** @example PROJECT */
					readonly scope?: string
					/** @enum {string} */
					readonly type?: "NORMAL" | "PERSONAL"
				}
				readonly public?: boolean
				readonly relatedLinks?: Record<string, unknown>
				/** @example git */
				readonly scmId?: string
				/** @example REPOSITORY */
				readonly scope?: string
				/** @example my-repo */
				readonly slug?: string
				/** @enum {string} */
				readonly state?:
					| "AVAILABLE"
					| "INITIALISATION_FAILED"
					| "INITIALISING"
					| "OFFLINE"
				/** @example Available */
				readonly statusMessage?: string
			}
			readonly toCommit?: {
				readonly author?: {
					readonly avatarUrl?: string
					/** @example charlie@example.com */
					readonly emailAddress?: string
					/** @example Charlie */
					readonly name?: string
				}
				/**
				 * Format: int64
				 * @example 1359075920
				 */
				readonly authorTimestamp?: number
				readonly committer?: {
					readonly avatarUrl?: string
					/** @example charlie@example.com */
					readonly emailAddress?: string
					/** @example Charlie */
					readonly name?: string
				}
				/**
				 * Format: int64
				 * @example 1449075830
				 */
				readonly committerTimestamp?: number
				/** @example abcdef0 */
				readonly displayId?: string
				/** @example abcdef0123abcdef4567abcdef8987abcdef6543 */
				readonly id?: string
				/** @example More work on feature 1 */
				readonly message?: string
				readonly parents?: readonly components["schemas"]["RestMinimalCommit"][]
			}
		}
		readonly RestClusterInformation: {
			readonly localNode?: {
				readonly address?: {
					/** @example node.example.com */
					readonly address?: string
					/**
					 * Format: int32
					 * @example 8230
					 */
					readonly port?: number
				}
				/** @example 7.0.0 */
				readonly buildVersion?: string
				/** @example d4fde8b1-2504-4998-a0ba-14fbe98edd4d */
				readonly id?: string
				readonly local?: boolean
				/** @example foo */
				readonly name?: string
			}
			readonly nodes?: readonly components["schemas"]["RestClusterNode"][]
			readonly running?: boolean
		}
		readonly RestClusterNode: {
			readonly address?: {
				/** @example node.example.com */
				readonly address?: string
				/**
				 * Format: int32
				 * @example 8230
				 */
				readonly port?: number
			}
			/** @example 7.0.0 */
			readonly buildVersion?: string
			/** @example d4fde8b1-2504-4998-a0ba-14fbe98edd4d */
			readonly id?: string
			readonly local?: boolean
			/** @example foo */
			readonly name?: string
		}
		readonly RestComment: {
			readonly anchor?: {
				/** @enum {string} */
				readonly diffType?: "COMMIT" | "EFFECTIVE" | "RANGE"
				/** @enum {string} */
				readonly fileType?: "FROM" | "TO"
				/** @example 62a0505e8204115b8b9c8a95bfa264a8c0896a93 */
				readonly fromHash?: string
				/**
				 * Format: int32
				 * @example 98
				 */
				readonly line?: number
				/** @enum {string} */
				readonly lineType?: "ADDED" | "CONTEXT" | "REMOVED"
				readonly multilineMarker?: {
					/**
					 * Format: int32
					 * @description The line number where the multiline comment will begin
					 */
					readonly startLine?: number
					/**
					 * @description The segment type of the start line of the multiline comment
					 * @enum {string}
					 */
					readonly startLineType: "ADDED" | "CONTEXT" | "REMOVED"
				}
				readonly path?: {
					/** @example [
					 *       "path",
					 *       "to",
					 *       "file.txt"
					 *     ] */
					readonly components?: readonly string[]
					/** @example txt */
					readonly extension?: string
					/** @example file.txt */
					readonly name?: string
					/** @example path/to */
					readonly parent?: string
				}
				readonly pullRequest?: {
					readonly closed?: boolean
					/**
					 * Format: int64
					 * @example 19990759200
					 */
					readonly closedDate?: number
					/**
					 * Format: int64
					 * @example 13590759200
					 */
					readonly createdDate?: number
					/** @example It is a kludge, but put the tuple from the database in the cache. */
					readonly description?: string
					readonly descriptionAsHtml?: string
					readonly draft?: boolean
					readonly fromRef?: {
						/** @example feature-ABC-1233 */
						readonly displayId?: string
						/** @example refs/heads/feature-ABC-123 */
						readonly id?: string
						/** @example babecafebabecafebabecafebabecafebabecafe */
						readonly latestCommit?: string
						readonly repository?: {
							readonly archived?: boolean
							/** @example main */
							readonly defaultBranch?: string
							/** @example My repo description */
							readonly description?: string
							readonly forkable?: boolean
							/** @example e3c939f9ef4a7fae272e */
							readonly hierarchyId?: string
							/** Format: int32 */
							readonly id?: number
							readonly links?: Record<string, unknown>
							/** @example My repo */
							readonly name?: string
							readonly origin?: {
								readonly archived?: boolean
								/** @example main */
								readonly defaultBranch?: string
								/** @example My repo description */
								readonly description?: string
								readonly forkable?: boolean
								/** @example e3c939f9ef4a7fae272e */
								readonly hierarchyId?: string
								/** Format: int32 */
								readonly id?: number
								readonly links?: Record<string, unknown>
								/** @example My repo */
								readonly name?: string
								/** Format: int32 */
								readonly partition?: number
								readonly project?: {
									readonly avatar?: string
									readonly avatarUrl?: string
									/** @example The description for my cool project */
									readonly description?: string
									/** Format: int32 */
									readonly id?: number
									/** @example PRJ */
									readonly key: string
									readonly links?: Record<string, unknown>
									/** @example My Cool Project */
									readonly name?: string
									readonly public?: boolean
									/** @example PROJECT */
									readonly scope?: string
									/** @enum {string} */
									readonly type?: "NORMAL" | "PERSONAL"
								}
								readonly public?: boolean
								readonly relatedLinks?: Record<string, unknown>
								/** @example git */
								readonly scmId?: string
								/** @example REPOSITORY */
								readonly scope?: string
								/** @example my-repo */
								readonly slug?: string
								/** @enum {string} */
								readonly state?:
									| "AVAILABLE"
									| "INITIALISATION_FAILED"
									| "INITIALISING"
									| "OFFLINE"
								/** @example Available */
								readonly statusMessage?: string
							}
							/** Format: int32 */
							readonly partition?: number
							readonly project?: {
								readonly avatar?: string
								readonly avatarUrl?: string
								/** @example The description for my cool project */
								readonly description?: string
								/** Format: int32 */
								readonly id?: number
								/** @example PRJ */
								readonly key: string
								readonly links?: Record<string, unknown>
								/** @example My Cool Project */
								readonly name?: string
								readonly public?: boolean
								/** @example PROJECT */
								readonly scope?: string
								/** @enum {string} */
								readonly type?: "NORMAL" | "PERSONAL"
							}
							readonly public?: boolean
							readonly relatedLinks?: Record<string, unknown>
							/** @example git */
							readonly scmId?: string
							/** @example REPOSITORY */
							readonly scope?: string
							/** @example my-repo */
							readonly slug?: string
							/** @enum {string} */
							readonly state?:
								| "AVAILABLE"
								| "INITIALISATION_FAILED"
								| "INITIALISING"
								| "OFFLINE"
							/** @example Available */
							readonly statusMessage?: string
						}
						/** @enum {string} */
						readonly type?: "BRANCH" | "TAG"
					}
					readonly htmlDescription?: string
					/**
					 * Format: int64
					 * @example 1
					 */
					readonly id?: number
					readonly links?: Record<string, unknown>
					readonly locked?: boolean
					readonly open?: boolean
					readonly participants?: readonly components["schemas"]["RestPullRequestParticipant"][]
					readonly reviewers?: readonly components["schemas"]["RestPullRequestParticipant"][]
					/** @enum {string} */
					readonly state?: "DECLINED" | "MERGED" | "OPEN"
					/** @example Talking Nerdy */
					readonly title?: string
					readonly toRef?: {
						/** @example feature-ABC-1233 */
						readonly displayId?: string
						/** @example refs/heads/feature-ABC-123 */
						readonly id?: string
						/** @example babecafebabecafebabecafebabecafebabecafe */
						readonly latestCommit?: string
						readonly repository?: {
							readonly archived?: boolean
							/** @example main */
							readonly defaultBranch?: string
							/** @example My repo description */
							readonly description?: string
							readonly forkable?: boolean
							/** @example e3c939f9ef4a7fae272e */
							readonly hierarchyId?: string
							/** Format: int32 */
							readonly id?: number
							readonly links?: Record<string, unknown>
							/** @example My repo */
							readonly name?: string
							readonly origin?: {
								readonly archived?: boolean
								/** @example main */
								readonly defaultBranch?: string
								/** @example My repo description */
								readonly description?: string
								readonly forkable?: boolean
								/** @example e3c939f9ef4a7fae272e */
								readonly hierarchyId?: string
								/** Format: int32 */
								readonly id?: number
								readonly links?: Record<string, unknown>
								/** @example My repo */
								readonly name?: string
								/** Format: int32 */
								readonly partition?: number
								readonly project?: {
									readonly avatar?: string
									readonly avatarUrl?: string
									/** @example The description for my cool project */
									readonly description?: string
									/** Format: int32 */
									readonly id?: number
									/** @example PRJ */
									readonly key: string
									readonly links?: Record<string, unknown>
									/** @example My Cool Project */
									readonly name?: string
									readonly public?: boolean
									/** @example PROJECT */
									readonly scope?: string
									/** @enum {string} */
									readonly type?: "NORMAL" | "PERSONAL"
								}
								readonly public?: boolean
								readonly relatedLinks?: Record<string, unknown>
								/** @example git */
								readonly scmId?: string
								/** @example REPOSITORY */
								readonly scope?: string
								/** @example my-repo */
								readonly slug?: string
								/** @enum {string} */
								readonly state?:
									| "AVAILABLE"
									| "INITIALISATION_FAILED"
									| "INITIALISING"
									| "OFFLINE"
								/** @example Available */
								readonly statusMessage?: string
							}
							/** Format: int32 */
							readonly partition?: number
							readonly project?: {
								readonly avatar?: string
								readonly avatarUrl?: string
								/** @example The description for my cool project */
								readonly description?: string
								/** Format: int32 */
								readonly id?: number
								/** @example PRJ */
								readonly key: string
								readonly links?: Record<string, unknown>
								/** @example My Cool Project */
								readonly name?: string
								readonly public?: boolean
								/** @example PROJECT */
								readonly scope?: string
								/** @enum {string} */
								readonly type?: "NORMAL" | "PERSONAL"
							}
							readonly public?: boolean
							readonly relatedLinks?: Record<string, unknown>
							/** @example git */
							readonly scmId?: string
							/** @example REPOSITORY */
							readonly scope?: string
							/** @example my-repo */
							readonly slug?: string
							/** @enum {string} */
							readonly state?:
								| "AVAILABLE"
								| "INITIALISATION_FAILED"
								| "INITIALISING"
								| "OFFLINE"
							/** @example Available */
							readonly statusMessage?: string
						}
						/** @enum {string} */
						readonly type?: "BRANCH" | "TAG"
					}
					/**
					 * Format: int64
					 * @example 14490759200
					 */
					readonly updatedDate?: number
					/** Format: int32 */
					readonly version?: number
				}
				readonly srcPath?: {
					/** @example [
					 *       "path",
					 *       "to",
					 *       "file.txt"
					 *     ] */
					readonly components?: readonly string[]
					/** @example txt */
					readonly extension?: string
					/** @example file.txt */
					readonly name?: string
					/** @example path/to */
					readonly parent?: string
				}
				/** @example 3cdd5d19178a54d2e51b5098d43b57571241d0ab */
				readonly toHash?: string
			}
			readonly anchored?: boolean
			readonly author?: {
				readonly active?: boolean
				readonly avatarUrl?: string
				/** @example Jane Citizen */
				readonly displayName?: string
				/** @example jane@example.com */
				readonly emailAddress?: string
				/**
				 * Format: int32
				 * @example 101
				 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example jcitizen */
				readonly name?: string
				/** @example jcitizen */
				readonly slug?: string
				/** @enum {string} */
				readonly type?: "NORMAL" | "SERVICE"
			}
			readonly comments?: readonly components["schemas"]["RestComment"][]
			/**
			 * Format: int64
			 * @example 1359075920
			 */
			readonly createdDate?: number
			readonly html?: string
			/**
			 * Format: int64
			 * @example 1
			 */
			readonly id?: number
			readonly parent?: {
				readonly anchor?: {
					/** @enum {string} */
					readonly diffType?: "COMMIT" | "EFFECTIVE" | "RANGE"
					/** @enum {string} */
					readonly fileType?: "FROM" | "TO"
					/** @example 62a0505e8204115b8b9c8a95bfa264a8c0896a93 */
					readonly fromHash?: string
					/**
					 * Format: int32
					 * @example 98
					 */
					readonly line?: number
					/** @enum {string} */
					readonly lineType?: "ADDED" | "CONTEXT" | "REMOVED"
					readonly multilineMarker?: {
						/**
						 * Format: int32
						 * @description The line number where the multiline comment will begin
						 */
						readonly startLine?: number
						/**
						 * @description The segment type of the start line of the multiline comment
						 * @enum {string}
						 */
						readonly startLineType: "ADDED" | "CONTEXT" | "REMOVED"
					}
					readonly path?: {
						/** @example [
						 *       "path",
						 *       "to",
						 *       "file.txt"
						 *     ] */
						readonly components?: readonly string[]
						/** @example txt */
						readonly extension?: string
						/** @example file.txt */
						readonly name?: string
						/** @example path/to */
						readonly parent?: string
					}
					readonly pullRequest?: {
						readonly closed?: boolean
						/**
						 * Format: int64
						 * @example 19990759200
						 */
						readonly closedDate?: number
						/**
						 * Format: int64
						 * @example 13590759200
						 */
						readonly createdDate?: number
						/** @example It is a kludge, but put the tuple from the database in the cache. */
						readonly description?: string
						readonly descriptionAsHtml?: string
						readonly draft?: boolean
						readonly fromRef?: {
							/** @example feature-ABC-1233 */
							readonly displayId?: string
							/** @example refs/heads/feature-ABC-123 */
							readonly id?: string
							/** @example babecafebabecafebabecafebabecafebabecafe */
							readonly latestCommit?: string
							readonly repository?: {
								readonly archived?: boolean
								/** @example main */
								readonly defaultBranch?: string
								/** @example My repo description */
								readonly description?: string
								readonly forkable?: boolean
								/** @example e3c939f9ef4a7fae272e */
								readonly hierarchyId?: string
								/** Format: int32 */
								readonly id?: number
								readonly links?: Record<string, unknown>
								/** @example My repo */
								readonly name?: string
								readonly origin?: {
									readonly archived?: boolean
									/** @example main */
									readonly defaultBranch?: string
									/** @example My repo description */
									readonly description?: string
									readonly forkable?: boolean
									/** @example e3c939f9ef4a7fae272e */
									readonly hierarchyId?: string
									/** Format: int32 */
									readonly id?: number
									readonly links?: Record<string, unknown>
									/** @example My repo */
									readonly name?: string
									/** Format: int32 */
									readonly partition?: number
									readonly project?: {
										readonly avatar?: string
										readonly avatarUrl?: string
										/** @example The description for my cool project */
										readonly description?: string
										/** Format: int32 */
										readonly id?: number
										/** @example PRJ */
										readonly key: string
										readonly links?: Record<string, unknown>
										/** @example My Cool Project */
										readonly name?: string
										readonly public?: boolean
										/** @example PROJECT */
										readonly scope?: string
										/** @enum {string} */
										readonly type?: "NORMAL" | "PERSONAL"
									}
									readonly public?: boolean
									readonly relatedLinks?: Record<string, unknown>
									/** @example git */
									readonly scmId?: string
									/** @example REPOSITORY */
									readonly scope?: string
									/** @example my-repo */
									readonly slug?: string
									/** @enum {string} */
									readonly state?:
										| "AVAILABLE"
										| "INITIALISATION_FAILED"
										| "INITIALISING"
										| "OFFLINE"
									/** @example Available */
									readonly statusMessage?: string
								}
								/** Format: int32 */
								readonly partition?: number
								readonly project?: {
									readonly avatar?: string
									readonly avatarUrl?: string
									/** @example The description for my cool project */
									readonly description?: string
									/** Format: int32 */
									readonly id?: number
									/** @example PRJ */
									readonly key: string
									readonly links?: Record<string, unknown>
									/** @example My Cool Project */
									readonly name?: string
									readonly public?: boolean
									/** @example PROJECT */
									readonly scope?: string
									/** @enum {string} */
									readonly type?: "NORMAL" | "PERSONAL"
								}
								readonly public?: boolean
								readonly relatedLinks?: Record<string, unknown>
								/** @example git */
								readonly scmId?: string
								/** @example REPOSITORY */
								readonly scope?: string
								/** @example my-repo */
								readonly slug?: string
								/** @enum {string} */
								readonly state?:
									| "AVAILABLE"
									| "INITIALISATION_FAILED"
									| "INITIALISING"
									| "OFFLINE"
								/** @example Available */
								readonly statusMessage?: string
							}
							/** @enum {string} */
							readonly type?: "BRANCH" | "TAG"
						}
						readonly htmlDescription?: string
						/**
						 * Format: int64
						 * @example 1
						 */
						readonly id?: number
						readonly links?: Record<string, unknown>
						readonly locked?: boolean
						readonly open?: boolean
						readonly participants?: readonly components["schemas"]["RestPullRequestParticipant"][]
						readonly reviewers?: readonly components["schemas"]["RestPullRequestParticipant"][]
						/** @enum {string} */
						readonly state?: "DECLINED" | "MERGED" | "OPEN"
						/** @example Talking Nerdy */
						readonly title?: string
						readonly toRef?: {
							/** @example feature-ABC-1233 */
							readonly displayId?: string
							/** @example refs/heads/feature-ABC-123 */
							readonly id?: string
							/** @example babecafebabecafebabecafebabecafebabecafe */
							readonly latestCommit?: string
							readonly repository?: {
								readonly archived?: boolean
								/** @example main */
								readonly defaultBranch?: string
								/** @example My repo description */
								readonly description?: string
								readonly forkable?: boolean
								/** @example e3c939f9ef4a7fae272e */
								readonly hierarchyId?: string
								/** Format: int32 */
								readonly id?: number
								readonly links?: Record<string, unknown>
								/** @example My repo */
								readonly name?: string
								readonly origin?: {
									readonly archived?: boolean
									/** @example main */
									readonly defaultBranch?: string
									/** @example My repo description */
									readonly description?: string
									readonly forkable?: boolean
									/** @example e3c939f9ef4a7fae272e */
									readonly hierarchyId?: string
									/** Format: int32 */
									readonly id?: number
									readonly links?: Record<string, unknown>
									/** @example My repo */
									readonly name?: string
									/** Format: int32 */
									readonly partition?: number
									readonly project?: {
										readonly avatar?: string
										readonly avatarUrl?: string
										/** @example The description for my cool project */
										readonly description?: string
										/** Format: int32 */
										readonly id?: number
										/** @example PRJ */
										readonly key: string
										readonly links?: Record<string, unknown>
										/** @example My Cool Project */
										readonly name?: string
										readonly public?: boolean
										/** @example PROJECT */
										readonly scope?: string
										/** @enum {string} */
										readonly type?: "NORMAL" | "PERSONAL"
									}
									readonly public?: boolean
									readonly relatedLinks?: Record<string, unknown>
									/** @example git */
									readonly scmId?: string
									/** @example REPOSITORY */
									readonly scope?: string
									/** @example my-repo */
									readonly slug?: string
									/** @enum {string} */
									readonly state?:
										| "AVAILABLE"
										| "INITIALISATION_FAILED"
										| "INITIALISING"
										| "OFFLINE"
									/** @example Available */
									readonly statusMessage?: string
								}
								/** Format: int32 */
								readonly partition?: number
								readonly project?: {
									readonly avatar?: string
									readonly avatarUrl?: string
									/** @example The description for my cool project */
									readonly description?: string
									/** Format: int32 */
									readonly id?: number
									/** @example PRJ */
									readonly key: string
									readonly links?: Record<string, unknown>
									/** @example My Cool Project */
									readonly name?: string
									readonly public?: boolean
									/** @example PROJECT */
									readonly scope?: string
									/** @enum {string} */
									readonly type?: "NORMAL" | "PERSONAL"
								}
								readonly public?: boolean
								readonly relatedLinks?: Record<string, unknown>
								/** @example git */
								readonly scmId?: string
								/** @example REPOSITORY */
								readonly scope?: string
								/** @example my-repo */
								readonly slug?: string
								/** @enum {string} */
								readonly state?:
									| "AVAILABLE"
									| "INITIALISATION_FAILED"
									| "INITIALISING"
									| "OFFLINE"
								/** @example Available */
								readonly statusMessage?: string
							}
							/** @enum {string} */
							readonly type?: "BRANCH" | "TAG"
						}
						/**
						 * Format: int64
						 * @example 14490759200
						 */
						readonly updatedDate?: number
						/** Format: int32 */
						readonly version?: number
					}
					readonly srcPath?: {
						/** @example [
						 *       "path",
						 *       "to",
						 *       "file.txt"
						 *     ] */
						readonly components?: readonly string[]
						/** @example txt */
						readonly extension?: string
						/** @example file.txt */
						readonly name?: string
						/** @example path/to */
						readonly parent?: string
					}
					/** @example 3cdd5d19178a54d2e51b5098d43b57571241d0ab */
					readonly toHash?: string
				}
				readonly anchored?: boolean
				readonly author?: {
					readonly active?: boolean
					readonly avatarUrl?: string
					/** @example Jane Citizen */
					readonly displayName?: string
					/** @example jane@example.com */
					readonly emailAddress?: string
					/**
					 * Format: int32
					 * @example 101
					 */
					readonly id?: number
					readonly links?: Record<string, unknown>
					/** @example jcitizen */
					readonly name?: string
					/** @example jcitizen */
					readonly slug?: string
					/** @enum {string} */
					readonly type?: "NORMAL" | "SERVICE"
				}
				readonly comments?: readonly components["schemas"]["RestComment"][]
				/**
				 * Format: int64
				 * @example 1359075920
				 */
				readonly createdDate?: number
				readonly html?: string
				/**
				 * Format: int64
				 * @example 1
				 */
				readonly id?: number
				readonly pending?: boolean
				readonly properties?: Record<string, unknown>
				readonly reply?: boolean
				/**
				 * Format: int64
				 * @example 1239075920
				 */
				readonly resolvedDate?: number
				readonly resolver?: {
					readonly active?: boolean
					readonly avatarUrl?: string
					/** @example Jane Citizen */
					readonly displayName?: string
					/** @example jane@example.com */
					readonly emailAddress?: string
					/**
					 * Format: int32
					 * @example 101
					 */
					readonly id?: number
					readonly links?: Record<string, unknown>
					/** @example jcitizen */
					readonly name?: string
					/** @example jcitizen */
					readonly slug?: string
					/** @enum {string} */
					readonly type?: "NORMAL" | "SERVICE"
				}
				/** @example NORMAL */
				readonly severity?: string
				/** @example OPEN */
				readonly state?: string
				/** @example An insightful comment. */
				readonly text?: string
				/** @description Indicates if this comment thread has been marked as resolved or not */
				readonly threadResolved?: boolean
				/**
				 * Format: int64
				 * @example 1569075920
				 */
				readonly threadResolvedDate?: number
				readonly threadResolver?: {
					readonly active?: boolean
					readonly avatarUrl?: string
					/** @example Jane Citizen */
					readonly displayName?: string
					/** @example jane@example.com */
					readonly emailAddress?: string
					/**
					 * Format: int32
					 * @example 101
					 */
					readonly id?: number
					readonly links?: Record<string, unknown>
					/** @example jcitizen */
					readonly name?: string
					/** @example jcitizen */
					readonly slug?: string
					/** @enum {string} */
					readonly type?: "NORMAL" | "SERVICE"
				}
				/**
				 * Format: int64
				 * @example 1449075920
				 */
				readonly updatedDate?: number
				/**
				 * Format: int32
				 * @example 1
				 */
				readonly version?: number
			}
			readonly pending?: boolean
			readonly properties?: Record<string, unknown>
			readonly reply?: boolean
			/**
			 * Format: int64
			 * @example 1239075920
			 */
			readonly resolvedDate?: number
			readonly resolver?: {
				readonly active?: boolean
				readonly avatarUrl?: string
				/** @example Jane Citizen */
				readonly displayName?: string
				/** @example jane@example.com */
				readonly emailAddress?: string
				/**
				 * Format: int32
				 * @example 101
				 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example jcitizen */
				readonly name?: string
				/** @example jcitizen */
				readonly slug?: string
				/** @enum {string} */
				readonly type?: "NORMAL" | "SERVICE"
			}
			/** @example NORMAL */
			readonly severity?: string
			/** @example OPEN */
			readonly state?: string
			/** @example An insightful comment. */
			readonly text?: string
			/** @description Indicates if this comment thread has been marked as resolved or not */
			readonly threadResolved?: boolean
			/**
			 * Format: int64
			 * @example 1569075920
			 */
			readonly threadResolvedDate?: number
			readonly threadResolver?: {
				readonly active?: boolean
				readonly avatarUrl?: string
				/** @example Jane Citizen */
				readonly displayName?: string
				/** @example jane@example.com */
				readonly emailAddress?: string
				/**
				 * Format: int32
				 * @example 101
				 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example jcitizen */
				readonly name?: string
				/** @example jcitizen */
				readonly slug?: string
				/** @enum {string} */
				readonly type?: "NORMAL" | "SERVICE"
			}
			/**
			 * Format: int64
			 * @example 1449075920
			 */
			readonly updatedDate?: number
			/**
			 * Format: int32
			 * @example 1
			 */
			readonly version?: number
		}
		readonly RestCommentJiraIssue: {
			/**
			 * Format: int64
			 * @example 1
			 */
			readonly commentId?: number
			/** @example TEST-123 */
			readonly issueKey?: string
		}
		readonly RestCommentThreadDiffAnchor: {
			/** @enum {string} */
			readonly diffType?: "COMMIT" | "EFFECTIVE" | "RANGE"
			/** @enum {string} */
			readonly fileType?: "FROM" | "TO"
			/** @example 62a0505e8204115b8b9c8a95bfa264a8c0896a93 */
			readonly fromHash?: string
			/**
			 * Format: int32
			 * @example 98
			 */
			readonly line?: number
			/** @enum {string} */
			readonly lineType?: "ADDED" | "CONTEXT" | "REMOVED"
			readonly multilineMarker?: {
				/**
				 * Format: int32
				 * @description The line number where the multiline comment will begin
				 */
				readonly startLine?: number
				/**
				 * @description The segment type of the start line of the multiline comment
				 * @enum {string}
				 */
				readonly startLineType: "ADDED" | "CONTEXT" | "REMOVED"
			}
			readonly path?: {
				/** @example [
				 *       "path",
				 *       "to",
				 *       "file.txt"
				 *     ] */
				readonly components?: readonly string[]
				/** @example txt */
				readonly extension?: string
				/** @example file.txt */
				readonly name?: string
				/** @example path/to */
				readonly parent?: string
			}
			readonly pullRequest?: {
				readonly closed?: boolean
				/**
				 * Format: int64
				 * @example 19990759200
				 */
				readonly closedDate?: number
				/**
				 * Format: int64
				 * @example 13590759200
				 */
				readonly createdDate?: number
				/** @example It is a kludge, but put the tuple from the database in the cache. */
				readonly description?: string
				readonly descriptionAsHtml?: string
				readonly draft?: boolean
				readonly fromRef?: {
					/** @example feature-ABC-1233 */
					readonly displayId?: string
					/** @example refs/heads/feature-ABC-123 */
					readonly id?: string
					/** @example babecafebabecafebabecafebabecafebabecafe */
					readonly latestCommit?: string
					readonly repository?: {
						readonly archived?: boolean
						/** @example main */
						readonly defaultBranch?: string
						/** @example My repo description */
						readonly description?: string
						readonly forkable?: boolean
						/** @example e3c939f9ef4a7fae272e */
						readonly hierarchyId?: string
						/** Format: int32 */
						readonly id?: number
						readonly links?: Record<string, unknown>
						/** @example My repo */
						readonly name?: string
						readonly origin?: {
							readonly archived?: boolean
							/** @example main */
							readonly defaultBranch?: string
							/** @example My repo description */
							readonly description?: string
							readonly forkable?: boolean
							/** @example e3c939f9ef4a7fae272e */
							readonly hierarchyId?: string
							/** Format: int32 */
							readonly id?: number
							readonly links?: Record<string, unknown>
							/** @example My repo */
							readonly name?: string
							/** Format: int32 */
							readonly partition?: number
							readonly project?: {
								readonly avatar?: string
								readonly avatarUrl?: string
								/** @example The description for my cool project */
								readonly description?: string
								/** Format: int32 */
								readonly id?: number
								/** @example PRJ */
								readonly key: string
								readonly links?: Record<string, unknown>
								/** @example My Cool Project */
								readonly name?: string
								readonly public?: boolean
								/** @example PROJECT */
								readonly scope?: string
								/** @enum {string} */
								readonly type?: "NORMAL" | "PERSONAL"
							}
							readonly public?: boolean
							readonly relatedLinks?: Record<string, unknown>
							/** @example git */
							readonly scmId?: string
							/** @example REPOSITORY */
							readonly scope?: string
							/** @example my-repo */
							readonly slug?: string
							/** @enum {string} */
							readonly state?:
								| "AVAILABLE"
								| "INITIALISATION_FAILED"
								| "INITIALISING"
								| "OFFLINE"
							/** @example Available */
							readonly statusMessage?: string
						}
						/** Format: int32 */
						readonly partition?: number
						readonly project?: {
							readonly avatar?: string
							readonly avatarUrl?: string
							/** @example The description for my cool project */
							readonly description?: string
							/** Format: int32 */
							readonly id?: number
							/** @example PRJ */
							readonly key: string
							readonly links?: Record<string, unknown>
							/** @example My Cool Project */
							readonly name?: string
							readonly public?: boolean
							/** @example PROJECT */
							readonly scope?: string
							/** @enum {string} */
							readonly type?: "NORMAL" | "PERSONAL"
						}
						readonly public?: boolean
						readonly relatedLinks?: Record<string, unknown>
						/** @example git */
						readonly scmId?: string
						/** @example REPOSITORY */
						readonly scope?: string
						/** @example my-repo */
						readonly slug?: string
						/** @enum {string} */
						readonly state?:
							| "AVAILABLE"
							| "INITIALISATION_FAILED"
							| "INITIALISING"
							| "OFFLINE"
						/** @example Available */
						readonly statusMessage?: string
					}
					/** @enum {string} */
					readonly type?: "BRANCH" | "TAG"
				}
				readonly htmlDescription?: string
				/**
				 * Format: int64
				 * @example 1
				 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				readonly locked?: boolean
				readonly open?: boolean
				readonly participants?: readonly components["schemas"]["RestPullRequestParticipant"][]
				readonly reviewers?: readonly components["schemas"]["RestPullRequestParticipant"][]
				/** @enum {string} */
				readonly state?: "DECLINED" | "MERGED" | "OPEN"
				/** @example Talking Nerdy */
				readonly title?: string
				readonly toRef?: {
					/** @example feature-ABC-1233 */
					readonly displayId?: string
					/** @example refs/heads/feature-ABC-123 */
					readonly id?: string
					/** @example babecafebabecafebabecafebabecafebabecafe */
					readonly latestCommit?: string
					readonly repository?: {
						readonly archived?: boolean
						/** @example main */
						readonly defaultBranch?: string
						/** @example My repo description */
						readonly description?: string
						readonly forkable?: boolean
						/** @example e3c939f9ef4a7fae272e */
						readonly hierarchyId?: string
						/** Format: int32 */
						readonly id?: number
						readonly links?: Record<string, unknown>
						/** @example My repo */
						readonly name?: string
						readonly origin?: {
							readonly archived?: boolean
							/** @example main */
							readonly defaultBranch?: string
							/** @example My repo description */
							readonly description?: string
							readonly forkable?: boolean
							/** @example e3c939f9ef4a7fae272e */
							readonly hierarchyId?: string
							/** Format: int32 */
							readonly id?: number
							readonly links?: Record<string, unknown>
							/** @example My repo */
							readonly name?: string
							/** Format: int32 */
							readonly partition?: number
							readonly project?: {
								readonly avatar?: string
								readonly avatarUrl?: string
								/** @example The description for my cool project */
								readonly description?: string
								/** Format: int32 */
								readonly id?: number
								/** @example PRJ */
								readonly key: string
								readonly links?: Record<string, unknown>
								/** @example My Cool Project */
								readonly name?: string
								readonly public?: boolean
								/** @example PROJECT */
								readonly scope?: string
								/** @enum {string} */
								readonly type?: "NORMAL" | "PERSONAL"
							}
							readonly public?: boolean
							readonly relatedLinks?: Record<string, unknown>
							/** @example git */
							readonly scmId?: string
							/** @example REPOSITORY */
							readonly scope?: string
							/** @example my-repo */
							readonly slug?: string
							/** @enum {string} */
							readonly state?:
								| "AVAILABLE"
								| "INITIALISATION_FAILED"
								| "INITIALISING"
								| "OFFLINE"
							/** @example Available */
							readonly statusMessage?: string
						}
						/** Format: int32 */
						readonly partition?: number
						readonly project?: {
							readonly avatar?: string
							readonly avatarUrl?: string
							/** @example The description for my cool project */
							readonly description?: string
							/** Format: int32 */
							readonly id?: number
							/** @example PRJ */
							readonly key: string
							readonly links?: Record<string, unknown>
							/** @example My Cool Project */
							readonly name?: string
							readonly public?: boolean
							/** @example PROJECT */
							readonly scope?: string
							/** @enum {string} */
							readonly type?: "NORMAL" | "PERSONAL"
						}
						readonly public?: boolean
						readonly relatedLinks?: Record<string, unknown>
						/** @example git */
						readonly scmId?: string
						/** @example REPOSITORY */
						readonly scope?: string
						/** @example my-repo */
						readonly slug?: string
						/** @enum {string} */
						readonly state?:
							| "AVAILABLE"
							| "INITIALISATION_FAILED"
							| "INITIALISING"
							| "OFFLINE"
						/** @example Available */
						readonly statusMessage?: string
					}
					/** @enum {string} */
					readonly type?: "BRANCH" | "TAG"
				}
				/**
				 * Format: int64
				 * @example 14490759200
				 */
				readonly updatedDate?: number
				/** Format: int32 */
				readonly version?: number
			}
			readonly srcPath?: {
				/** @example [
				 *       "path",
				 *       "to",
				 *       "file.txt"
				 *     ] */
				readonly components?: readonly string[]
				/** @example txt */
				readonly extension?: string
				/** @example file.txt */
				readonly name?: string
				/** @example path/to */
				readonly parent?: string
			}
			/** @example 3cdd5d19178a54d2e51b5098d43b57571241d0ab */
			readonly toHash?: string
		}
		readonly RestCommit: {
			readonly author?: {
				readonly avatarUrl?: string
				/** @example charlie@example.com */
				readonly emailAddress?: string
				/** @example Charlie */
				readonly name?: string
			}
			/**
			 * Format: int64
			 * @example 1359075920
			 */
			readonly authorTimestamp?: number
			readonly committer?: {
				readonly avatarUrl?: string
				/** @example charlie@example.com */
				readonly emailAddress?: string
				/** @example Charlie */
				readonly name?: string
			}
			/**
			 * Format: int64
			 * @example 1449075830
			 */
			readonly committerTimestamp?: number
			/** @example abcdef0 */
			readonly displayId?: string
			/** @example abcdef0123abcdef4567abcdef8987abcdef6543 */
			readonly id?: string
			/** @example More work on feature 1 */
			readonly message?: string
			readonly parents?: readonly components["schemas"]["RestMinimalCommit"][]
		}
		readonly RestCommitMessageSuggestion: {
			/** @example Merge in PROJECT_1/repo_1 from feature/feature-2 to main */
			readonly body?: string
			/** @example Pull request #2: add new feature */
			readonly title?: string
		}
		readonly RestConflict: {
			readonly ourChange?: {
				readonly path?: {
					/** @example [
					 *       "path",
					 *       "to",
					 *       "file.txt"
					 *     ] */
					readonly components?: readonly string[]
					/** @example txt */
					readonly extension?: string
					/** @example file.txt */
					readonly name?: string
					/** @example path/to */
					readonly parent?: string
				}
				readonly srcPath?: {
					/** @example [
					 *       "path",
					 *       "to",
					 *       "file.txt"
					 *     ] */
					readonly components?: readonly string[]
					/** @example txt */
					readonly extension?: string
					/** @example file.txt */
					readonly name?: string
					/** @example path/to */
					readonly parent?: string
				}
				/** @enum {string} */
				readonly type?:
					| "ADD"
					| "COPY"
					| "DELETE"
					| "MODIFY"
					| "MOVE"
					| "UNKNOWN"
			}
			readonly theirChange?: {
				readonly path?: {
					/** @example [
					 *       "path",
					 *       "to",
					 *       "file.txt"
					 *     ] */
					readonly components?: readonly string[]
					/** @example txt */
					readonly extension?: string
					/** @example file.txt */
					readonly name?: string
					/** @example path/to */
					readonly parent?: string
				}
				readonly srcPath?: {
					/** @example [
					 *       "path",
					 *       "to",
					 *       "file.txt"
					 *     ] */
					readonly components?: readonly string[]
					/** @example txt */
					readonly extension?: string
					/** @example file.txt */
					readonly name?: string
					/** @example path/to */
					readonly parent?: string
				}
				/** @enum {string} */
				readonly type?:
					| "ADD"
					| "COPY"
					| "DELETE"
					| "MODIFY"
					| "MOVE"
					| "UNKNOWN"
			}
		}
		readonly RestConflictChange: {
			readonly path?: {
				/** @example [
				 *       "path",
				 *       "to",
				 *       "file.txt"
				 *     ] */
				readonly components?: readonly string[]
				/** @example txt */
				readonly extension?: string
				/** @example file.txt */
				readonly name?: string
				/** @example path/to */
				readonly parent?: string
			}
			readonly srcPath?: {
				/** @example [
				 *       "path",
				 *       "to",
				 *       "file.txt"
				 *     ] */
				readonly components?: readonly string[]
				/** @example txt */
				readonly extension?: string
				/** @example file.txt */
				readonly name?: string
				/** @example path/to */
				readonly parent?: string
			}
			/** @enum {string} */
			readonly type?: "ADD" | "COPY" | "DELETE" | "MODIFY" | "MOVE" | "UNKNOWN"
		}
		readonly RestConnectivitySummary: {
			/** @example Unable to connect to the node. */
			readonly errorMessage?: string
			/** @example true */
			readonly reachable?: boolean
			/**
			 * Format: int64
			 * @example 100
			 */
			readonly roundTripTime?: number
		}
		readonly RestCreateBranchRequest: {
			/** @example This is my branch or tag */
			readonly message?: string
			/** @example my-branch-or-tag */
			readonly name?: string
			/** @example 8d351a10fb428c0c1239530256e21cf24f136e73 */
			readonly startPoint?: string
		}
		readonly RestCreateTagRequest: {
			/** @example This is my branch or tag */
			readonly message?: string
			/** @example my-branch-or-tag */
			readonly name?: string
			/** @example 8d351a10fb428c0c1239530256e21cf24f136e73 */
			readonly startPoint?: string
		}
		readonly RestDefaultBranch: {
			readonly id?: string
		}
		readonly RestDefaultReviewersRequest: {
			/**
			 * Format: int32
			 * @example 1
			 */
			readonly requiredApprovals?: number
			readonly reviewers?: readonly components["schemas"]["RestApplicationUser"][]
			readonly sourceMatcher?: {
				/** @example main */
				readonly displayId?: string
				/** @example refs/heads/main */
				readonly id?: string
				readonly type?: {
					/** @enum {string} */
					readonly id?:
						| "ANY_REF"
						| "BRANCH"
						| "MODEL_BRANCH"
						| "MODEL_CATEGORY"
						| "PATTERN"
					/** @example Branch */
					readonly name?: string
				}
			}
			readonly targetMatcher?: {
				/** @example main */
				readonly displayId?: string
				/** @example refs/heads/main */
				readonly id?: string
				readonly type?: {
					/** @enum {string} */
					readonly id?:
						| "ANY_REF"
						| "BRANCH"
						| "MODEL_BRANCH"
						| "MODEL_CATEGORY"
						| "PATTERN"
					/** @example Branch */
					readonly name?: string
				}
			}
		}
		readonly RestDefaultTask: {
			/** @example Default task description */
			readonly description?: string
			readonly html?: string
			/**
			 * Format: int64
			 * @example 1
			 */
			readonly id?: number
		}
		readonly RestDefaultTaskRequest: {
			/** @example Default task description */
			readonly description?: string
			readonly sourceMatcher?: {
				/** @example main */
				readonly displayId?: string
				/** @example refs/heads/main */
				readonly id?: string
				readonly type?: {
					/** @enum {string} */
					readonly id?:
						| "ANY_REF"
						| "BRANCH"
						| "MODEL_BRANCH"
						| "MODEL_CATEGORY"
						| "PATTERN"
					/** @example Branch */
					readonly name?: string
				}
			}
			readonly targetMatcher?: {
				/** @example main */
				readonly displayId?: string
				/** @example refs/heads/main */
				readonly id?: string
				readonly type?: {
					/** @enum {string} */
					readonly id?:
						| "ANY_REF"
						| "BRANCH"
						| "MODEL_BRANCH"
						| "MODEL_CATEGORY"
						| "PATTERN"
					/** @example Branch */
					readonly name?: string
				}
			}
		}
		readonly RestDeployment: {
			/**
			 * Format: int64
			 * @example 5
			 */
			readonly deploymentSequenceNumber?: number
			/** @example Production and mirror environments */
			readonly description?: string
			/** @example US East Mirror */
			readonly displayName?: string
			readonly environment?: {
				/** @example US East Mirror */
				readonly displayName: string
				/** @example us-east-mirror */
				readonly key: string
				/** @example production */
				readonly type?: string
				/** @example https://foo-bar.production/us-east */
				readonly url?: string
			}
			readonly fromCommit?: {
				/** @example abcdef0 */
				readonly displayId?: string
				/** @example abcdef0123abcdef4567abcdef8987abcdef6543 */
				readonly id?: string
			}
			/** @example PROD-MIR */
			readonly key?: string
			/**
			 * Format: int64
			 * @example 1449075920
			 */
			readonly lastUpdated?: number
			readonly repository?: {
				readonly archived?: boolean
				/** @example main */
				readonly defaultBranch?: string
				/** @example My repo description */
				readonly description?: string
				readonly forkable?: boolean
				/** @example e3c939f9ef4a7fae272e */
				readonly hierarchyId?: string
				/** Format: int32 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example My repo */
				readonly name?: string
				readonly origin?: {
					readonly archived?: boolean
					/** @example main */
					readonly defaultBranch?: string
					/** @example My repo description */
					readonly description?: string
					readonly forkable?: boolean
					/** @example e3c939f9ef4a7fae272e */
					readonly hierarchyId?: string
					/** Format: int32 */
					readonly id?: number
					readonly links?: Record<string, unknown>
					/** @example My repo */
					readonly name?: string
					/** Format: int32 */
					readonly partition?: number
					readonly project?: {
						readonly avatar?: string
						readonly avatarUrl?: string
						/** @example The description for my cool project */
						readonly description?: string
						/** Format: int32 */
						readonly id?: number
						/** @example PRJ */
						readonly key: string
						readonly links?: Record<string, unknown>
						/** @example My Cool Project */
						readonly name?: string
						readonly public?: boolean
						/** @example PROJECT */
						readonly scope?: string
						/** @enum {string} */
						readonly type?: "NORMAL" | "PERSONAL"
					}
					readonly public?: boolean
					readonly relatedLinks?: Record<string, unknown>
					/** @example git */
					readonly scmId?: string
					/** @example REPOSITORY */
					readonly scope?: string
					/** @example my-repo */
					readonly slug?: string
					/** @enum {string} */
					readonly state?:
						| "AVAILABLE"
						| "INITIALISATION_FAILED"
						| "INITIALISING"
						| "OFFLINE"
					/** @example Available */
					readonly statusMessage?: string
				}
				/** Format: int32 */
				readonly partition?: number
				readonly project?: {
					readonly avatar?: string
					readonly avatarUrl?: string
					/** @example The description for my cool project */
					readonly description?: string
					/** Format: int32 */
					readonly id?: number
					/** @example PRJ */
					readonly key: string
					readonly links?: Record<string, unknown>
					/** @example My Cool Project */
					readonly name?: string
					readonly public?: boolean
					/** @example PROJECT */
					readonly scope?: string
					/** @enum {string} */
					readonly type?: "NORMAL" | "PERSONAL"
				}
				readonly public?: boolean
				readonly relatedLinks?: Record<string, unknown>
				/** @example git */
				readonly scmId?: string
				/** @example REPOSITORY */
				readonly scope?: string
				/** @example my-repo */
				readonly slug?: string
				/** @enum {string} */
				readonly state?:
					| "AVAILABLE"
					| "INITIALISATION_FAILED"
					| "INITIALISING"
					| "OFFLINE"
				/** @example Available */
				readonly statusMessage?: string
			}
			/** @enum {string} */
			readonly state?:
				| "CANCELLED"
				| "FAILED"
				| "IN_PROGRESS"
				| "PENDING"
				| "ROLLED_BACK"
				| "SUCCESSFUL"
				| "UNKNOWN"
			readonly toCommit?: {
				/** @example abcdef0 */
				readonly displayId?: string
				/** @example abcdef0123abcdef4567abcdef8987abcdef6543 */
				readonly id?: string
			}
			/** @example http://example.ci.org/projects/PROJ/deploy/mirror-deploy/100 */
			readonly url?: string
		}
		readonly RestDeploymentEnvironment: {
			/** @example US East Mirror */
			readonly displayName?: string
			/** @example us-east-mirror */
			readonly key?: string
			/** @example production */
			readonly type?: string
			/** @example https://foo-bar.production/us-east */
			readonly url?: string
		}
		readonly RestDeploymentSetRequest: {
			/**
			 * Format: int64
			 * @example 2
			 */
			readonly deploymentSequenceNumber: number
			/** @example 2nd deployment of commit 44bca31f4be to US East production */
			readonly description: string
			/** @example US East marketing website production */
			readonly displayName: string
			readonly environment: components["schemas"]["RestDeploymentEnvironment"]
			/** @example marketing-us-prod */
			readonly key: string
			/**
			 * Format: int64
			 * @example 1359075920
			 */
			readonly lastUpdated?: number
			/**
			 * @example SUCCESSFUL
			 * @enum {string}
			 */
			readonly state:
				| "CANCELLED"
				| "FAILED"
				| "IN_PROGRESS"
				| "PENDING"
				| "ROLLED_BACK"
				| "SUCCESSFUL"
				| "UNKNOWN"
			/** @example https://my-dep-tool/marketing-us-prod/2 */
			readonly url: string
		}
		readonly RestDetailedGroup: {
			readonly deletable?: boolean
			/** @example group-a */
			readonly name?: string
		}
		readonly RestDetailedInvocation: {
			/** Format: int32 */
			readonly duration?: number
			readonly event?: string
			readonly eventScope?: {
				readonly id?: string
				readonly type?: string
			}
			/** Format: int32 */
			readonly finish?: number
			/** Format: int32 */
			readonly id?: number
			readonly request?: Record<string, unknown>
			readonly result?: Record<string, unknown>
			/** Format: int32 */
			readonly start?: number
		}
		readonly RestDetailedUser: {
			readonly active?: boolean
			readonly avatarUrl?: string
			readonly deletable?: boolean
			/** @example Bitbucket Internal Directory */
			readonly directoryName?: string
			/** @example Jane Citizen */
			readonly displayName?: string
			/** @example jane@example.com */
			readonly emailAddress?: string
			/**
			 * Format: int32
			 * @example 101
			 */
			readonly id?: number
			/** @example 1368145580548 */
			readonly lastAuthenticationTimestamp?: number
			readonly links?: Record<string, unknown>
			readonly mutableDetails?: boolean
			readonly mutableGroups?: boolean
			/** @example jcitizen */
			readonly name?: string
			/** @example jcitizen */
			readonly slug?: string
			/** @enum {string} */
			readonly type?: "NORMAL" | "SERVICE"
		}
		readonly RestDiff: {
			readonly binary?: boolean
			readonly destination?: {
				/** @example [
				 *       "path",
				 *       "to",
				 *       "file.txt"
				 *     ] */
				readonly components?: readonly string[]
				/** @example txt */
				readonly extension?: string
				/** @example file.txt */
				readonly name?: string
				/** @example path/to */
				readonly parent?: string
			}
			readonly hunks?: readonly components["schemas"]["RestDiffHunk"][]
			readonly lineComments?: readonly components["schemas"]["RestComment"][]
			readonly properties?: Record<string, unknown>
			readonly source?: {
				/** @example [
				 *       "path",
				 *       "to",
				 *       "file.txt"
				 *     ] */
				readonly components?: readonly string[]
				/** @example txt */
				readonly extension?: string
				/** @example file.txt */
				readonly name?: string
				/** @example path/to */
				readonly parent?: string
			}
			readonly truncated?: boolean
		}
		readonly RestDiffHunk: {
			readonly context?: string
			/** Format: int32 */
			readonly destinationLine?: number
			/** Format: int32 */
			readonly destinationSpan?: number
			readonly segments?: readonly components["schemas"]["RestDiffSegment"][]
			/** Format: int32 */
			readonly sourceLine?: number
			/** Format: int32 */
			readonly sourceSpan?: number
			readonly truncated?: boolean
		}
		readonly RestDiffLine: {
			readonly commentIds?: readonly number[]
			/** @enum {string} */
			readonly conflictMarker?: "MARKER" | "OURS" | "THEIRS"
			/** Format: int32 */
			readonly destination?: number
			readonly line?: string
			/** Format: int32 */
			readonly source?: number
			readonly truncated?: boolean
		}
		readonly RestDiffSegment: {
			readonly lines?: readonly components["schemas"]["RestDiffLine"][]
			readonly truncated?: boolean
			/** @enum {string} */
			readonly type?: "ADDED" | "CONTEXT" | "REMOVED"
		}
		readonly RestDiffStatsSummary: unknown
		readonly RestEmoticon: {
			readonly shortcut?: string
			readonly url?: string
			readonly value?: string
		}
		readonly RestEnhancedEntityLink: {
			/** @example a1b54cs4wsd45 */
			readonly applicationLinkId?: string
			/** @example example.com/jira */
			readonly displayUrl?: string
			/**
			 * Format: int64
			 * @example 10000
			 */
			readonly projectId?: number
			/** @example MPROJ */
			readonly projectKey?: string
			/** @example My Project */
			readonly projectName?: string
		}
		readonly RestErasedUser: {
			/** @example user-123ab */
			readonly newIdentifier?: string
		}
		readonly RestErrorMessage: {
			readonly context?: string
			readonly exceptionName?: string
			readonly message?: string
		}
		readonly RestErrors: {
			readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
		}
		readonly RestExportRequest: {
			/** @example example/sub/directory */
			readonly exportLocation?: string
			readonly repositoriesRequest: {
				readonly includes: readonly components["schemas"]["RestRepositorySelector"][]
			}
		}
		readonly RestFarmSynchronizationRequest: {
			/**
			 * Format: int32
			 * @example 1
			 */
			readonly attempt?: number
			/** @example 2022-08-18T02:04:46.435Z */
			readonly createdAt?: string
			/** @example 1 */
			readonly externalRepoId?: string
			/**
			 * @example INCREMENTAL
			 * @enum {string}
			 */
			readonly type?: "incremental" | "snapshot"
		}
		readonly RestGitTagCreateRequest: {
			readonly force?: boolean
			/** @example A new release tag */
			readonly message?: string
			/** @example release-tag */
			readonly name?: string
			/** @example refs/heads/master */
			readonly startPoint?: string
			/** @enum {string} */
			readonly type?: "ANNOTATED" | "LIGHTWEIGHT"
		}
		readonly RestGpgKey: {
			/** @example bitbucket@example.com */
			readonly emailAddress?: string
			/**
			 * Format: int64
			 * @example 61550496000000
			 */
			readonly expiryDate?: number
			/** @example 43:51:43:a1:b5:fc:8b:b7:0a:3a:a9:b1:0f:66:73:a8 */
			readonly fingerprint?: string
			/** @example 00000000000004d2 */
			readonly id?: string
			/** @example [] */
			readonly subKeys?: readonly components["schemas"]["RestGpgSubKey"][]
			/** @example -----BEGIN PGP SIGNATURE-----
			 *
			 *     iQEzBAABCAAdFiEEM8MrWnoxlp3K1lFY5BMGiWNefn4FAlkqKE4ACgkQ5BMGiWNe
			 *     fn6/kggAyzKhDDqdVb3Rq02hiSqeqKa1JuKRqDmzIpa6Pxa+1CpCnxwaIVrGgIii
			 *     vj0ZNJzL1Bm2xm0JasotJDiZq5pFKi0FfQ0WmskuhsW1VY/f08TltHpHvK2kHVRr
			 *     GEMVDUb0nj0I7Duc8XTipiYoDGS1GvydNR/bu3SsFTcZyapXirQcTCRT6/Sn0/IP
			 *     pUeIwQo1qK4e8gTOhWhfWEiVig39lQhiZFtm5S/vfAY72/Rgp68zMYmwasMSnBgF
			 *     /LLFW6lXAqZIoAP8AnmsMRjCH6mS98+/lxKq2+K71+2YUUIAnNEeO09Lufo3B3Da
			 *     Pbs7BpD28w4lKlzb2EQ0n0C9rrxdPA==
			 *     =VZpm
			 *     -----END PGP SIGNATURE-----
			 *      */
			readonly text?: string
		}
		readonly RestGpgSubKey: {
			/** Format: date-time */
			readonly expiryDate?: string
			readonly fingerprint?: string
		}
		readonly RestHookScript: {
			/** Format: date-time */
			readonly createdDate?: string
			readonly description?: string
			/** Format: int64 */
			readonly id?: number
			readonly name?: string
			readonly pluginKey?: string
			/** @enum {string} */
			readonly type?: "POST" | "PRE"
			/** Format: date-time */
			readonly updatedDate?: string
			/** Format: int32 */
			readonly version?: number
		}
		readonly RestHookScriptConfig: {
			readonly scope?: {
				/**
				 * Format: int32
				 * @example 2
				 */
				readonly resourceId?: number
				/** @enum {string} */
				readonly type?: "GLOBAL" | "PROJECT" | "REPOSITORY"
			}
			readonly script?: {
				/** Format: date-time */
				readonly createdDate?: string
				readonly description?: string
				/** Format: int64 */
				readonly id?: number
				readonly name?: string
				readonly pluginKey?: string
				/** @enum {string} */
				readonly type?: "POST" | "PRE"
				/** Format: date-time */
				readonly updatedDate?: string
				/** Format: int32 */
				readonly version?: number
			}
			readonly triggerIds?: readonly string[]
		}
		readonly RestHookScriptTriggers: {
			readonly triggerIds?: readonly string[]
		}
		readonly RestImportRequest: {
			/** @example Bitbucket_export_1.tar */
			readonly archivePath?: string
		}
		readonly RestInsightAnnotation: {
			/** @example external.id */
			readonly externalId?: string
			/**
			 * Format: int32
			 * @example 5
			 */
			readonly line?: number
			/** @example http://example.com/my/file/analysis?line=5 */
			readonly link?: string
			/** @example This is an annotation message */
			readonly message?: string
			/** @example src/some/structure/file.ext */
			readonly path?: string
			/** @example report.key */
			readonly reportKey?: string
			/** @example HIGH */
			readonly severity?: string
			/** @example BUG */
			readonly type?: string
		}
		readonly RestInsightAnnotationsResponse: {
			readonly annotations?: readonly components["schemas"]["RestInsightAnnotation"][]
		}
		readonly RestInsightReport: {
			/** @example 1630041546433 */
			readonly createdDate?: number
			readonly data?: readonly components["schemas"]["RestInsightReportData"][]
			/** @example This is the details of the report, it can be a longer string describing the report */
			readonly details?: string
			/** @example report.key */
			readonly key?: string
			/**
			 * Format: uri
			 * @example http://integration.example.com
			 */
			readonly link?: string
			/**
			 * Format: uri
			 * @example http://integration.example.com/logo
			 */
			readonly logoUrl?: string
			/** @example Reporter/tool that produced this report */
			readonly reporter?: string
			/**
			 * @example PASS
			 * @enum {string}
			 */
			readonly result?: "FAIL" | "PASS"
			/** @example report.title */
			readonly title?: string
		}
		readonly RestInsightReportData: {
			/** @example data.title */
			readonly title?: string
			/** @example NUMBER */
			readonly type?: string
			/** @example 9 */
			readonly value?: Record<string, unknown>
		}
		readonly RestInvocationHistory: unknown
		readonly RestInvocationRequest: unknown
		readonly RestInvocationResult: unknown
		readonly RestJiraIssue: {
			/** @example JRA-9 */
			readonly key?: string
			/** @example https://jira.atlassian.com/browse/JRA-9 */
			readonly url?: string
		}
		readonly RestJob: {
			/**
			 * Format: int64
			 * @example 1497657603000
			 */
			readonly endDate?: number
			/**
			 * Format: int64
			 * @example 1
			 */
			readonly id?: number
			readonly initiator?: {
				readonly active?: boolean
				readonly avatarUrl?: string
				/** @example Jane Citizen */
				readonly displayName?: string
				/** @example jane@example.com */
				readonly emailAddress?: string
				/**
				 * Format: int32
				 * @example 101
				 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example jcitizen */
				readonly name?: string
				/** @example jcitizen */
				readonly slug?: string
				/** @enum {string} */
				readonly type?: "NORMAL" | "SERVICE"
			}
			/** @example 1bec7499-077a-4b58-b27c-996a9c2187a4 */
			readonly nodeId?: string
			readonly progress?: {
				/** @example Working on it... */
				readonly message?: string
				/**
				 * Format: int32
				 * @example 42
				 */
				readonly percentage?: number
			}
			/**
			 * Format: int64
			 * @example 1497657601000
			 */
			readonly startDate?: number
			/** @enum {string} */
			readonly state?:
				| "ABORTED"
				| "CANCELED"
				| "CANCELING"
				| "COMPLETED"
				| "FAILED"
				| "FINALISING"
				| "INITIALISING"
				| "READY"
				| "RUNNING"
				| "TIMED_OUT"
			/** @example com.atlassian.bitbucket.migration.export */
			readonly type?: string
			/**
			 * Format: int64
			 * @example 1497657603000
			 */
			readonly updatedDate?: number
		}
		readonly RestJobMessage: {
			/** Format: date-time */
			readonly createdDate?: string
			/** @example 617 */
			readonly id?: string
			/** @enum {string} */
			readonly severity?: "ERROR" | "INFO" | "WARN"
			/** @example job */
			readonly subject?: string
			/** @example Something of interest happened */
			readonly text?: string
		}
		readonly RestLabel: {
			/** @example labelName */
			readonly name?: string
		}
		readonly RestLabelable: {
			readonly archived?: boolean
			/** @example main */
			readonly defaultBranch?: string
			/** @example My repo description */
			readonly description?: string
			readonly forkable?: boolean
			/** @example e3c939f9ef4a7fae272e */
			readonly hierarchyId?: string
			/** Format: int32 */
			readonly id?: number
			/** @enum {string} */
			readonly labelableType?: "REPOSITORY"
			readonly links?: Record<string, unknown>
			/** @example My repo */
			readonly name?: string
			readonly origin?: {
				readonly archived?: boolean
				/** @example main */
				readonly defaultBranch?: string
				/** @example My repo description */
				readonly description?: string
				readonly forkable?: boolean
				/** @example e3c939f9ef4a7fae272e */
				readonly hierarchyId?: string
				/** Format: int32 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example My repo */
				readonly name?: string
				/** Format: int32 */
				readonly partition?: number
				readonly project?: {
					readonly avatar?: string
					readonly avatarUrl?: string
					/** @example The description for my cool project */
					readonly description?: string
					/** Format: int32 */
					readonly id?: number
					/** @example PRJ */
					readonly key: string
					readonly links?: Record<string, unknown>
					/** @example My Cool Project */
					readonly name?: string
					readonly public?: boolean
					/** @example PROJECT */
					readonly scope?: string
					/** @enum {string} */
					readonly type?: "NORMAL" | "PERSONAL"
				}
				readonly public?: boolean
				readonly relatedLinks?: Record<string, unknown>
				/** @example git */
				readonly scmId?: string
				/** @example REPOSITORY */
				readonly scope?: string
				/** @example my-repo */
				readonly slug?: string
				/** @enum {string} */
				readonly state?:
					| "AVAILABLE"
					| "INITIALISATION_FAILED"
					| "INITIALISING"
					| "OFFLINE"
				/** @example Available */
				readonly statusMessage?: string
			}
			/** Format: int32 */
			readonly partition?: number
			readonly project?: {
				readonly avatar?: string
				readonly avatarUrl?: string
				/** @example The description for my cool project */
				readonly description?: string
				/** Format: int32 */
				readonly id?: number
				/** @example PRJ */
				readonly key: string
				readonly links?: Record<string, unknown>
				/** @example My Cool Project */
				readonly name?: string
				readonly public?: boolean
				/** @example PROJECT */
				readonly scope?: string
				/** @enum {string} */
				readonly type?: "NORMAL" | "PERSONAL"
			}
			readonly public?: boolean
			readonly relatedLinks?: Record<string, unknown>
			/** @example git */
			readonly scmId?: string
			/** @example REPOSITORY */
			readonly scope?: string
			/** @example my-repo */
			readonly slug?: string
			/** @enum {string} */
			readonly state?:
				| "AVAILABLE"
				| "INITIALISATION_FAILED"
				| "INITIALISING"
				| "OFFLINE"
			/** @example Available */
			readonly statusMessage?: string
		}
		readonly RestLogLevel: {
			/** @example DEBUG */
			readonly logLevel?: string
		}
		readonly RestMailConfiguration: {
			/** @example smtp.example.com */
			readonly hostname?: string
			/** @example password */
			readonly password?: string
			/**
			 * Format: int32
			 * @example 465
			 */
			readonly port?: number
			/** @enum {string} */
			readonly protocol?: "SMTP" | "SMTPS"
			readonly requireStartTls?: boolean
			/** @example stash-no-reply@company.com */
			readonly senderAddress?: string
			/** @example user */
			readonly username?: string
			readonly useStartTls?: boolean
		}
		readonly RestMarkup: {
			/** @example <h1>Hello World!</h1> */
			readonly html?: string
		}
		readonly RestMeshConnectivityReport: {
			readonly reports?: readonly components["schemas"]["RestNodeConnectivityReport"][]
		}
		readonly RestMeshMigrationQueueStateCounts: unknown
		readonly RestMeshMigrationRequest: {
			readonly all?: boolean
			readonly maxBytesPerSecond?: {
				/** Format: int64 */
				readonly asLong?: number
				readonly present?: boolean
			}
			readonly projectIds?: readonly number[]
			readonly repositoryIds?: readonly number[]
		}
		readonly RestMeshMigrationSummary: {
			/**
			 * Format: int64
			 * @example 1331038800000
			 */
			readonly endTime?: number
			/** Format: int64 */
			readonly jobId?: number
			/** Format: int64 */
			readonly maxBandwidth?: number
			/**
			 * Format: int32
			 * @example 53
			 */
			readonly progress?: number
			readonly queue?: Record<string, unknown>
			/**
			 * Format: int64
			 * @example 1331038800000
			 */
			readonly startTime?: number
			/** @example RUNNING */
			readonly state?: string
		}
		readonly RestMeshNode: {
			/** @example 1 */
			readonly id?: string
			/** @example 1630041546433 */
			readonly lastSeenDate?: number
			/** @example My node */
			readonly name?: string
			/** @example false */
			readonly offline?: boolean
			/** @example 1 */
			readonly rpcId?: string
			/** @example http://127.0.0.1:7999 */
			readonly rpcUrl?: string
			/**
			 * @example AVAILABLE
			 * @enum {string}
			 */
			readonly state?:
				| "AVAILABLE"
				| "DELETING"
				| "DISABLED"
				| "DRAINING"
				| "OFFLINE"
		}
		readonly RestMigrationRepository: {
			/** @enum {string} */
			readonly migrationState?:
				| "CANCELED"
				| "FAILED"
				| "MIGRATED"
				| "QUEUED"
				| "SKIPPED"
				| "STAGED"
				| "STAGING"
			readonly repository?: {
				readonly archived?: boolean
				/** @example main */
				readonly defaultBranch?: string
				/** @example My repo description */
				readonly description?: string
				readonly forkable?: boolean
				/** @example e3c939f9ef4a7fae272e */
				readonly hierarchyId?: string
				/** Format: int32 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example My repo */
				readonly name?: string
				readonly origin?: {
					readonly archived?: boolean
					/** @example main */
					readonly defaultBranch?: string
					/** @example My repo description */
					readonly description?: string
					readonly forkable?: boolean
					/** @example e3c939f9ef4a7fae272e */
					readonly hierarchyId?: string
					/** Format: int32 */
					readonly id?: number
					readonly links?: Record<string, unknown>
					/** @example My repo */
					readonly name?: string
					/** Format: int32 */
					readonly partition?: number
					readonly project?: {
						readonly avatar?: string
						readonly avatarUrl?: string
						/** @example The description for my cool project */
						readonly description?: string
						/** Format: int32 */
						readonly id?: number
						/** @example PRJ */
						readonly key: string
						readonly links?: Record<string, unknown>
						/** @example My Cool Project */
						readonly name?: string
						readonly public?: boolean
						/** @example PROJECT */
						readonly scope?: string
						/** @enum {string} */
						readonly type?: "NORMAL" | "PERSONAL"
					}
					readonly public?: boolean
					readonly relatedLinks?: Record<string, unknown>
					/** @example git */
					readonly scmId?: string
					/** @example REPOSITORY */
					readonly scope?: string
					/** @example my-repo */
					readonly slug?: string
					/** @enum {string} */
					readonly state?:
						| "AVAILABLE"
						| "INITIALISATION_FAILED"
						| "INITIALISING"
						| "OFFLINE"
					/** @example Available */
					readonly statusMessage?: string
				}
				/** Format: int32 */
				readonly partition?: number
				readonly project?: {
					readonly avatar?: string
					readonly avatarUrl?: string
					/** @example The description for my cool project */
					readonly description?: string
					/** Format: int32 */
					readonly id?: number
					/** @example PRJ */
					readonly key: string
					readonly links?: Record<string, unknown>
					/** @example My Cool Project */
					readonly name?: string
					readonly public?: boolean
					/** @example PROJECT */
					readonly scope?: string
					/** @enum {string} */
					readonly type?: "NORMAL" | "PERSONAL"
				}
				readonly public?: boolean
				readonly relatedLinks?: Record<string, unknown>
				/** @example git */
				readonly scmId?: string
				/** @example REPOSITORY */
				readonly scope?: string
				/** @example my-repo */
				readonly slug?: string
				/** @enum {string} */
				readonly state?:
					| "AVAILABLE"
					| "INITIALISATION_FAILED"
					| "INITIALISING"
					| "OFFLINE"
				/** @example Available */
				readonly statusMessage?: string
			}
		}
		readonly RestMinimalCommit: {
			/** @example abcdef0 */
			readonly displayId?: string
			/** @example abcdef0123abcdef4567abcdef8987abcdef6543 */
			readonly id?: string
		}
		readonly RestMinimalRef: {
			/** @example master */
			readonly displayId?: string
			/** @example refs/heads/master */
			readonly id?: string
			/** @enum {string} */
			readonly type?: "BRANCH" | "TAG"
		}
		readonly RestMirroredRepository: {
			readonly available?: boolean
			readonly cloneUrls?: readonly components["schemas"]["RestNamedLink"][]
			/** Format: date-time */
			readonly lastUpdated?: string
			/** @example Saigon Mirror */
			readonly mirrorName?: string
			readonly pushUrls?: readonly components["schemas"]["RestNamedLink"][]
			/** @example 1 */
			readonly repositoryId?: string
			/** @enum {string} */
			readonly status?:
				| "AVAILABLE"
				| "ERROR_AVAILABLE"
				| "ERROR_INITIALIZING"
				| "INITIALIZING"
				| "NOT_MIRRORED"
		}
		readonly RestMirroredRepositoryDescriptor: {
			readonly links?: Record<string, unknown>
			readonly mirrorServer?: {
				/** @example http://vietnam.example.com */
				readonly baseUrl?: string
				readonly enabled?: boolean
				/** @example B0F5-CS21-45C2-CCK3 */
				readonly id?: string
				/** Format: date-time */
				readonly lastSeenDate: string
				/** @enum {string} */
				readonly mirrorType?: "FARM" | "SINGLE"
				/** @example Mirror */
				readonly name?: string
				/** @example 8.0.0 */
				readonly productVersion?: string
			}
		}
		readonly RestMirrorHashes: {
			/** @example 677513e1f2a93ff50e7b709e3c96454c23a3fcd40046ab385c4093e30809500a */
			readonly content?: string
			/** @example 677513e1f2a93ff50e7b709e3c96454c23a3fcd40046ab385c4093e30809500a */
			readonly metadata?: string
		}
		readonly RestMirroringRequest: {
			/** Format: int32 */
			readonly id?: number
			/** @example https://bitbucket-eu.example.com:7990/bitbucket */
			readonly mirrorBaseUrl?: string
			/** @example 4f0eb5fc-67fc-48f8-b4a7-87981f026c6a */
			readonly mirrorId?: string
			/** @example Bitbucket Mirror */
			readonly mirrorName?: string
			/** @enum {string} */
			readonly mirrorType?: "FARM" | "SINGLE"
			/** @example 8.0.0 */
			readonly productVersion?: string
			/** @enum {string} */
			readonly state?: "ACCEPTED" | "PENDING" | "REJECTED"
		}
		readonly RestMirrorRepositorySynchronizationStatus: {
			/** @example 1 */
			readonly externalRepoId?: string
			/**
			 * Format: int32
			 * @example 1
			 */
			readonly failedSyncCount?: number
			readonly hashes?: {
				/** @example 677513e1f2a93ff50e7b709e3c96454c23a3fcd40046ab385c4093e30809500a */
				readonly content?: string
				/** @example 677513e1f2a93ff50e7b709e3c96454c23a3fcd40046ab385c4093e30809500a */
				readonly metadata?: string
			}
			/** Format: date-time */
			readonly initialSyncDate?: string
			/** Format: date-time */
			readonly lastSyncDate?: string
			/**
			 * Format: int32
			 * @example 1
			 */
			readonly localProjectId?: number
			/**
			 * Format: int32
			 * @example 1
			 */
			readonly localRepoId?: number
			/** @example 148728f5-df0f-3f3e-af11-5ca16be3725f */
			readonly upstreamId?: string
		}
		readonly RestMirrorServer: {
			/** @example http://vietnam.example.com */
			readonly baseUrl?: string
			readonly enabled?: boolean
			/** @example B0F5-CS21-45C2-CCK3 */
			readonly id?: string
			/** Format: date-time */
			readonly lastSeenDate?: string
			/** @enum {string} */
			readonly mirrorType?: "FARM" | "SINGLE"
			/** @example Mirror */
			readonly name?: string
			/** @example 8.0.0 */
			readonly productVersion?: string
		}
		readonly RestMirrorUpgradeRequest: {
			/** @example https://bitbucket-eu.example.com:7990/bitbucket */
			readonly baseUrl?: string
			/** @example 8.0.0 */
			readonly productVersion?: string
		}
		readonly RestMultilineCommentMarker: {
			/**
			 * Format: int32
			 * @description The line number where the multiline comment will begin
			 */
			readonly startLine?: number
			/**
			 * @description The segment type of the start line of the multiline comment
			 * @enum {string}
			 */
			readonly startLineType?: "ADDED" | "CONTEXT" | "REMOVED"
		}
		readonly RestMultipleBuildStats: unknown
		readonly RestNamedLink: {
			/** @example https://bitbucket.example.com/scm/awesomeproject/awesomerepo.git */
			readonly href?: string
			/** @example http */
			readonly name?: string
		}
		readonly RestNode: {
			/** @example 1 */
			readonly id?: string
			/** @example My Node */
			readonly name?: string
			/** @enum {string} */
			readonly type?: "BITBUCKET" | "MESH"
		}
		readonly RestNodeConnectivityReport: {
			readonly node?: {
				/** @example 1 */
				readonly id?: string
				/** @example My Node */
				readonly name?: string
				/** @enum {string} */
				readonly type?: "BITBUCKET" | "MESH"
			}
			readonly summaries?: readonly components["schemas"]["RestNodeConnectivitySummary"][]
		}
		readonly RestNodeConnectivitySummary: {
			readonly node?: {
				/** @example 1 */
				readonly id?: string
				/** @example My Node */
				readonly name?: string
				/** @enum {string} */
				readonly type?: "BITBUCKET" | "MESH"
			}
			readonly summary?: {
				/** @example Unable to connect to the node. */
				readonly errorMessage?: string
				/** @example true */
				readonly reachable?: boolean
				/**
				 * Format: int64
				 * @example 100
				 */
				readonly roundTripTime?: number
			}
		}
		readonly RestPageRestChange: {
			readonly isLastPage?: boolean
			/** Format: int32 */
			readonly limit?: number
			/** Format: int32 */
			readonly nextPageStart?: number
			/** Format: int32 */
			readonly size?: number
			/** Format: int32 */
			readonly start?: number
			readonly values?: Record<string, unknown>
		}
		readonly RestPath: {
			/** @example [
			 *       "path",
			 *       "to",
			 *       "file.txt"
			 *     ] */
			readonly components?: readonly string[]
			/** @example txt */
			readonly extension?: string
			/** @example file.txt */
			readonly name?: string
			/** @example path/to */
			readonly parent?: string
		}
		readonly RestPermitted: {
			/** @example true */
			readonly permitted?: boolean
		}
		readonly RestPermittedGroup: {
			readonly group?: {
				/** @example group_a */
				readonly name?: string
			}
			/** @example ADMIN */
			readonly permission?: string
		}
		readonly RestPermittedUser: {
			/** @enum {string} */
			readonly permission?:
				| "ADMIN"
				| "LICENSED_USER"
				| "PROJECT_ADMIN"
				| "PROJECT_CREATE"
				| "PROJECT_READ"
				| "PROJECT_VIEW"
				| "PROJECT_WRITE"
				| "REPO_ADMIN"
				| "REPO_CREATE"
				| "REPO_READ"
				| "REPO_WRITE"
				| "SYS_ADMIN"
				| "USER_ADMIN"
			readonly user?: {
				readonly active?: boolean
				readonly avatarUrl?: string
				/** @example Jane Citizen */
				readonly displayName?: string
				/** @example jane@example.com */
				readonly emailAddress?: string
				/**
				 * Format: int32
				 * @example 101
				 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example jcitizen */
				readonly name?: string
				/** @example jcitizen */
				readonly slug?: string
				/** @enum {string} */
				readonly type?: "NORMAL" | "SERVICE"
			}
		}
		readonly RestPerson: {
			readonly avatarUrl?: string
			/** @example charlie@example.com */
			readonly emailAddress?: string
			/** @example Charlie */
			readonly name?: string
		}
		readonly RestProgress: {
			/** @example Working on it... */
			readonly message?: string
			/**
			 * Format: int32
			 * @example 42
			 */
			readonly percentage?: number
		}
		readonly RestProject: {
			readonly avatar?: string
			readonly avatarUrl?: string
			/** @example The description for my cool project */
			readonly description?: string
			/** Format: int32 */
			readonly id?: number
			/** @example PRJ */
			readonly key?: string
			readonly links?: Record<string, unknown>
			/** @example My Cool Project */
			readonly name?: string
			readonly public?: boolean
			/** @example PROJECT */
			readonly scope?: string
			/** @enum {string} */
			readonly type?: "NORMAL" | "PERSONAL"
		}
		readonly RestProjectSettingsRestriction: {
			/** @example my-admin-component */
			readonly componentKey?: string
			/** @example my-admin-feature */
			readonly featureKey?: string
			/** @example org.featuredeveloper */
			readonly namespace?: string
			/**
			 * @example PROCESSED
			 * @enum {string}
			 */
			readonly processedState?:
				| "FAILED"
				| "IN_PROGRESS"
				| "PROCESSED"
				| "UNPROCESSED"
			readonly project?: {
				readonly avatar?: string
				readonly avatarUrl?: string
				/** @example The description for my cool project */
				readonly description?: string
				/** Format: int32 */
				readonly id?: number
				/** @example PRJ */
				readonly key: string
				readonly links?: Record<string, unknown>
				/** @example My Cool Project */
				readonly name?: string
				readonly public?: boolean
				/** @example PROJECT */
				readonly scope?: string
				/** @enum {string} */
				readonly type?: "NORMAL" | "PERSONAL"
			}
		}
		readonly RestProjectSettingsRestrictionRequest: {
			/** @example my-admin-component */
			readonly componentKey?: string
			/** @example my-admin-feature */
			readonly featureKey: string
			/** @example org.featuredeveloper */
			readonly namespace: string
		}
		readonly RestProperties: {
			/** @example 457389a0b871fb61012a7351d09aefc0cf1c57c306449d4b5df4d2f381df8433 */
			readonly contentHash?: string
			/** @example refs/heads/master */
			readonly defaultBranchId?: string
			/** @example 11e5cd17e8d74d84a11f2c8a6bbc6ae0a2b69059e54030f49214c94d980364c1 */
			readonly metadataHash?: string
		}
		readonly RestPullRequest: {
			readonly closed?: boolean
			/**
			 * Format: int64
			 * @example 19990759200
			 */
			readonly closedDate?: number
			/**
			 * Format: int64
			 * @example 13590759200
			 */
			readonly createdDate?: number
			/** @example It is a kludge, but put the tuple from the database in the cache. */
			readonly description?: string
			readonly descriptionAsHtml?: string
			readonly draft?: boolean
			readonly fromRef?: {
				/** @example feature-ABC-1233 */
				readonly displayId?: string
				/** @example refs/heads/feature-ABC-123 */
				readonly id?: string
				/** @example babecafebabecafebabecafebabecafebabecafe */
				readonly latestCommit?: string
				readonly repository?: {
					readonly archived?: boolean
					/** @example main */
					readonly defaultBranch?: string
					/** @example My repo description */
					readonly description?: string
					readonly forkable?: boolean
					/** @example e3c939f9ef4a7fae272e */
					readonly hierarchyId?: string
					/** Format: int32 */
					readonly id?: number
					readonly links?: Record<string, unknown>
					/** @example My repo */
					readonly name?: string
					readonly origin?: {
						readonly archived?: boolean
						/** @example main */
						readonly defaultBranch?: string
						/** @example My repo description */
						readonly description?: string
						readonly forkable?: boolean
						/** @example e3c939f9ef4a7fae272e */
						readonly hierarchyId?: string
						/** Format: int32 */
						readonly id?: number
						readonly links?: Record<string, unknown>
						/** @example My repo */
						readonly name?: string
						/** Format: int32 */
						readonly partition?: number
						readonly project?: {
							readonly avatar?: string
							readonly avatarUrl?: string
							/** @example The description for my cool project */
							readonly description?: string
							/** Format: int32 */
							readonly id?: number
							/** @example PRJ */
							readonly key: string
							readonly links?: Record<string, unknown>
							/** @example My Cool Project */
							readonly name?: string
							readonly public?: boolean
							/** @example PROJECT */
							readonly scope?: string
							/** @enum {string} */
							readonly type?: "NORMAL" | "PERSONAL"
						}
						readonly public?: boolean
						readonly relatedLinks?: Record<string, unknown>
						/** @example git */
						readonly scmId?: string
						/** @example REPOSITORY */
						readonly scope?: string
						/** @example my-repo */
						readonly slug?: string
						/** @enum {string} */
						readonly state?:
							| "AVAILABLE"
							| "INITIALISATION_FAILED"
							| "INITIALISING"
							| "OFFLINE"
						/** @example Available */
						readonly statusMessage?: string
					}
					/** Format: int32 */
					readonly partition?: number
					readonly project?: {
						readonly avatar?: string
						readonly avatarUrl?: string
						/** @example The description for my cool project */
						readonly description?: string
						/** Format: int32 */
						readonly id?: number
						/** @example PRJ */
						readonly key: string
						readonly links?: Record<string, unknown>
						/** @example My Cool Project */
						readonly name?: string
						readonly public?: boolean
						/** @example PROJECT */
						readonly scope?: string
						/** @enum {string} */
						readonly type?: "NORMAL" | "PERSONAL"
					}
					readonly public?: boolean
					readonly relatedLinks?: Record<string, unknown>
					/** @example git */
					readonly scmId?: string
					/** @example REPOSITORY */
					readonly scope?: string
					/** @example my-repo */
					readonly slug?: string
					/** @enum {string} */
					readonly state?:
						| "AVAILABLE"
						| "INITIALISATION_FAILED"
						| "INITIALISING"
						| "OFFLINE"
					/** @example Available */
					readonly statusMessage?: string
				}
				/** @enum {string} */
				readonly type?: "BRANCH" | "TAG"
			}
			readonly htmlDescription?: string
			/**
			 * Format: int64
			 * @example 1
			 */
			readonly id?: number
			readonly links?: Record<string, unknown>
			readonly locked?: boolean
			readonly open?: boolean
			readonly participants?: readonly components["schemas"]["RestPullRequestParticipant"][]
			readonly reviewers?: readonly components["schemas"]["RestPullRequestParticipant"][]
			/** @enum {string} */
			readonly state?: "DECLINED" | "MERGED" | "OPEN"
			/** @example Talking Nerdy */
			readonly title?: string
			readonly toRef?: {
				/** @example feature-ABC-1233 */
				readonly displayId?: string
				/** @example refs/heads/feature-ABC-123 */
				readonly id?: string
				/** @example babecafebabecafebabecafebabecafebabecafe */
				readonly latestCommit?: string
				readonly repository?: {
					readonly archived?: boolean
					/** @example main */
					readonly defaultBranch?: string
					/** @example My repo description */
					readonly description?: string
					readonly forkable?: boolean
					/** @example e3c939f9ef4a7fae272e */
					readonly hierarchyId?: string
					/** Format: int32 */
					readonly id?: number
					readonly links?: Record<string, unknown>
					/** @example My repo */
					readonly name?: string
					readonly origin?: {
						readonly archived?: boolean
						/** @example main */
						readonly defaultBranch?: string
						/** @example My repo description */
						readonly description?: string
						readonly forkable?: boolean
						/** @example e3c939f9ef4a7fae272e */
						readonly hierarchyId?: string
						/** Format: int32 */
						readonly id?: number
						readonly links?: Record<string, unknown>
						/** @example My repo */
						readonly name?: string
						/** Format: int32 */
						readonly partition?: number
						readonly project?: {
							readonly avatar?: string
							readonly avatarUrl?: string
							/** @example The description for my cool project */
							readonly description?: string
							/** Format: int32 */
							readonly id?: number
							/** @example PRJ */
							readonly key: string
							readonly links?: Record<string, unknown>
							/** @example My Cool Project */
							readonly name?: string
							readonly public?: boolean
							/** @example PROJECT */
							readonly scope?: string
							/** @enum {string} */
							readonly type?: "NORMAL" | "PERSONAL"
						}
						readonly public?: boolean
						readonly relatedLinks?: Record<string, unknown>
						/** @example git */
						readonly scmId?: string
						/** @example REPOSITORY */
						readonly scope?: string
						/** @example my-repo */
						readonly slug?: string
						/** @enum {string} */
						readonly state?:
							| "AVAILABLE"
							| "INITIALISATION_FAILED"
							| "INITIALISING"
							| "OFFLINE"
						/** @example Available */
						readonly statusMessage?: string
					}
					/** Format: int32 */
					readonly partition?: number
					readonly project?: {
						readonly avatar?: string
						readonly avatarUrl?: string
						/** @example The description for my cool project */
						readonly description?: string
						/** Format: int32 */
						readonly id?: number
						/** @example PRJ */
						readonly key: string
						readonly links?: Record<string, unknown>
						/** @example My Cool Project */
						readonly name?: string
						readonly public?: boolean
						/** @example PROJECT */
						readonly scope?: string
						/** @enum {string} */
						readonly type?: "NORMAL" | "PERSONAL"
					}
					readonly public?: boolean
					readonly relatedLinks?: Record<string, unknown>
					/** @example git */
					readonly scmId?: string
					/** @example REPOSITORY */
					readonly scope?: string
					/** @example my-repo */
					readonly slug?: string
					/** @enum {string} */
					readonly state?:
						| "AVAILABLE"
						| "INITIALISATION_FAILED"
						| "INITIALISING"
						| "OFFLINE"
					/** @example Available */
					readonly statusMessage?: string
				}
				/** @enum {string} */
				readonly type?: "BRANCH" | "TAG"
			}
			/**
			 * Format: int64
			 * @example 14490759200
			 */
			readonly updatedDate?: number
			/** Format: int32 */
			readonly version?: number
		}
		readonly RestPullRequestActivity: {
			/** @enum {string} */
			readonly action?:
				| "APPROVED"
				| "AUTO_MERGE_CANCELLED"
				| "AUTO_MERGE_REQUESTED"
				| "COMMENTED"
				| "DECLINED"
				| "DELETED"
				| "MERGED"
				| "OPENED"
				| "REOPENED"
				| "RESCOPED"
				| "REVIEW_COMMENTED"
				| "REVIEW_DISCARDED"
				| "REVIEW_FINISHED"
				| "REVIEWED"
				| "UNAPPROVED"
				| "UPDATED"
			/**
			 * Format: int64
			 * @example 19990759200
			 */
			readonly createdDate?: number
			/**
			 * Format: int64
			 * @example 1
			 */
			readonly id?: number
			readonly user?: {
				readonly active?: boolean
				readonly avatarUrl?: string
				/** @example Jane Citizen */
				readonly displayName?: string
				/** @example jane@example.com */
				readonly emailAddress?: string
				/**
				 * Format: int32
				 * @example 101
				 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example jcitizen */
				readonly name?: string
				/** @example jcitizen */
				readonly slug?: string
				/** @enum {string} */
				readonly type?: "NORMAL" | "SERVICE"
			}
		}
		readonly RestPullRequestAssignParticipantRoleRequest: {
			/** @enum {string} */
			readonly role?: "AUTHOR" | "PARTICIPANT" | "REVIEWER"
			readonly user?: {
				readonly active?: boolean
				readonly avatarUrl?: string
				/** @example Jane Citizen */
				readonly displayName?: string
				/** @example jane@example.com */
				readonly emailAddress?: string
				/**
				 * Format: int32
				 * @example 101
				 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example jcitizen */
				readonly name?: string
				/** @example jcitizen */
				readonly slug?: string
				/** @enum {string} */
				readonly type?: "NORMAL" | "SERVICE"
			}
		}
		readonly RestPullRequestAssignStatusRequest: {
			/** @example 685cac2c4499ff1f308851e35d2b4357844d8927 */
			readonly lastReviewedCommit?: string
			/** @enum {string} */
			readonly status?: "APPROVED" | "NEEDS_WORK" | "UNAPPROVED"
		}
		readonly RestPullRequestCommitMessageTemplate: {
			/** @example Merge in ${toProjectKey}/${toRepoSlug} from ${crossRepoProjectRepo}${fromRefName} to ${toRefName} */
			readonly body?: string
			/** @example Pull request #${id}: ${title} */
			readonly title?: string
		}
		readonly RestPullRequestCondition: {
			/**
			 * Format: int32
			 * @example 1
			 */
			readonly id?: number
			/**
			 * Format: int32
			 * @example 1
			 */
			readonly requiredApprovals?: number
			readonly reviewers?: readonly components["schemas"]["RestApplicationUser"][]
			readonly scope?: {
				/**
				 * Format: int32
				 * @example 2
				 */
				readonly resourceId?: number
				/** @enum {string} */
				readonly type?: "GLOBAL" | "PROJECT" | "REPOSITORY"
			}
			readonly sourceRefMatcher?: {
				/** @example main */
				readonly displayId?: string
				/** @example refs/heads/main */
				readonly id?: string
				readonly type?: {
					/** @enum {string} */
					readonly id?:
						| "ANY_REF"
						| "BRANCH"
						| "MODEL_BRANCH"
						| "MODEL_CATEGORY"
						| "PATTERN"
					/** @example Branch */
					readonly name?: string
				}
			}
			readonly targetRefMatcher?: {
				/** @example main */
				readonly displayId?: string
				/** @example refs/heads/main */
				readonly id?: string
				readonly type?: {
					/** @enum {string} */
					readonly id?:
						| "ANY_REF"
						| "BRANCH"
						| "MODEL_BRANCH"
						| "MODEL_CATEGORY"
						| "PATTERN"
					/** @example Branch */
					readonly name?: string
				}
			}
		}
		readonly RestPullRequestDeclineRequest: {
			/** @example An optional comment explaining why the pull request is being declined */
			readonly comment?: string
			/** Format: int32 */
			readonly version?: number
		}
		readonly RestPullRequestDeleteRequest: {
			/** Format: int32 */
			readonly version?: number
		}
		readonly RestPullRequestFinishReviewRequest: {
			/** @example General comment text */
			readonly commentText?: string
			/** @example 685cac2c4499ff1f308851e35d2b4357844d8927 */
			readonly lastReviewedCommit?: string
			/** @example approved */
			readonly participantStatus?: string
		}
		readonly RestPullRequestMergeability: {
			readonly conflicted?: boolean
			/** @enum {string} */
			readonly outcome?: "CLEAN" | "CONFLICTED" | "UNKNOWN"
			readonly vetoes?: readonly components["schemas"]["RestRepositoryHookVeto"][]
		}
		readonly RestPullRequestMergeConfig: {
			readonly commitMessageTemplate?: {
				/** @example Merge in ${toProjectKey}/${toRepoSlug} from ${crossRepoProjectRepo}${fromRefName} to ${toRefName} */
				readonly body?: string
				/** @example Pull request #${id}: ${title} */
				readonly title?: string
			}
			/** Format: int32 */
			readonly commitSummaries?: number
			readonly defaultStrategy?: {
				/** @example Always create a merge commit */
				readonly description?: string
				readonly enabled?: boolean
				/** @example --no-ff */
				readonly flag?: string
				/** @example no-ff */
				readonly id?: string
				readonly links?: Record<string, unknown>
				/** @example Merge commit */
				readonly name?: string
			}
			readonly strategies?: readonly components["schemas"]["RestPullRequestMergeStrategy"][]
			/** @example repository */
			readonly type?: string
		}
		readonly RestPullRequestMergeRequest: {
			/** @example false */
			readonly autoMerge?: boolean
			/** @example (Optional, 5.7+) true to prepend an auto-generated subject to the message (default), or false to use the message as-is */
			readonly autoSubject?: string
			/** @example (Optional) A descriptive message for the merge commit */
			readonly message?: string
			/** @example (Optional) squash */
			readonly strategyId?: string
			/** Format: int32 */
			readonly version?: number
		}
		readonly RestPullRequestMergeStrategy: {
			/** @example Always create a merge commit */
			readonly description?: string
			readonly enabled?: boolean
			/** @example --no-ff */
			readonly flag?: string
			/** @example no-ff */
			readonly id?: string
			readonly links?: Record<string, unknown>
			/** @example Merge commit */
			readonly name?: string
		}
		readonly RestPullRequestParticipant: {
			readonly approved?: boolean
			/** @example 7549846524f8aed2bd1c0249993ae1bf9d3c9998 */
			readonly lastReviewedCommit?: string
			/** @enum {string} */
			readonly role?: "AUTHOR" | "PARTICIPANT" | "REVIEWER"
			/** @enum {string} */
			readonly status?: "APPROVED" | "NEEDS_WORK" | "UNAPPROVED"
			readonly user?: {
				readonly active?: boolean
				readonly avatarUrl?: string
				/** @example Jane Citizen */
				readonly displayName?: string
				/** @example jane@example.com */
				readonly emailAddress?: string
				/**
				 * Format: int32
				 * @example 101
				 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example jcitizen */
				readonly name?: string
				/** @example jcitizen */
				readonly slug?: string
				/** @enum {string} */
				readonly type?: "NORMAL" | "SERVICE"
			}
		}
		readonly RestPullRequestRebaseability: {
			readonly vetoes?: readonly components["schemas"]["RestRepositoryHookVeto"][]
		}
		readonly RestPullRequestRebaseRequest: {
			/**
			 * Format: int32
			 * @example 1
			 */
			readonly version?: number
		}
		readonly RestPullRequestRebaseResult: {
			readonly refChange?: {
				/** @example 6053a1eaa1c009dd11092d09a72f3c41af1b59ad */
				readonly fromHash?: string
				readonly ref?: {
					/** @example master */
					readonly displayId?: string
					/** @example refs/heads/master */
					readonly id?: string
					/** @enum {string} */
					readonly type?: "BRANCH" | "TAG"
				}
				/** @example refs/heads/master */
				readonly refId?: string
				/** @example d6edcbf924697ab811a867421dab60d954ccad99 */
				readonly toHash?: string
				/** @enum {string} */
				readonly type?: "ADD" | "DELETE" | "UPDATE"
			}
		}
		readonly RestPullRequestRef: {
			/** @example feature-ABC-1233 */
			readonly displayId?: string
			/** @example refs/heads/feature-ABC-123 */
			readonly id?: string
			/** @example babecafebabecafebabecafebabecafebabecafe */
			readonly latestCommit?: string
			readonly repository?: {
				readonly archived?: boolean
				/** @example main */
				readonly defaultBranch?: string
				/** @example My repo description */
				readonly description?: string
				readonly forkable?: boolean
				/** @example e3c939f9ef4a7fae272e */
				readonly hierarchyId?: string
				/** Format: int32 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example My repo */
				readonly name?: string
				readonly origin?: {
					readonly archived?: boolean
					/** @example main */
					readonly defaultBranch?: string
					/** @example My repo description */
					readonly description?: string
					readonly forkable?: boolean
					/** @example e3c939f9ef4a7fae272e */
					readonly hierarchyId?: string
					/** Format: int32 */
					readonly id?: number
					readonly links?: Record<string, unknown>
					/** @example My repo */
					readonly name?: string
					/** Format: int32 */
					readonly partition?: number
					readonly project?: {
						readonly avatar?: string
						readonly avatarUrl?: string
						/** @example The description for my cool project */
						readonly description?: string
						/** Format: int32 */
						readonly id?: number
						/** @example PRJ */
						readonly key: string
						readonly links?: Record<string, unknown>
						/** @example My Cool Project */
						readonly name?: string
						readonly public?: boolean
						/** @example PROJECT */
						readonly scope?: string
						/** @enum {string} */
						readonly type?: "NORMAL" | "PERSONAL"
					}
					readonly public?: boolean
					readonly relatedLinks?: Record<string, unknown>
					/** @example git */
					readonly scmId?: string
					/** @example REPOSITORY */
					readonly scope?: string
					/** @example my-repo */
					readonly slug?: string
					/** @enum {string} */
					readonly state?:
						| "AVAILABLE"
						| "INITIALISATION_FAILED"
						| "INITIALISING"
						| "OFFLINE"
					/** @example Available */
					readonly statusMessage?: string
				}
				/** Format: int32 */
				readonly partition?: number
				readonly project?: {
					readonly avatar?: string
					readonly avatarUrl?: string
					/** @example The description for my cool project */
					readonly description?: string
					/** Format: int32 */
					readonly id?: number
					/** @example PRJ */
					readonly key: string
					readonly links?: Record<string, unknown>
					/** @example My Cool Project */
					readonly name?: string
					readonly public?: boolean
					/** @example PROJECT */
					readonly scope?: string
					/** @enum {string} */
					readonly type?: "NORMAL" | "PERSONAL"
				}
				readonly public?: boolean
				readonly relatedLinks?: Record<string, unknown>
				/** @example git */
				readonly scmId?: string
				/** @example REPOSITORY */
				readonly scope?: string
				/** @example my-repo */
				readonly slug?: string
				/** @enum {string} */
				readonly state?:
					| "AVAILABLE"
					| "INITIALISATION_FAILED"
					| "INITIALISING"
					| "OFFLINE"
				/** @example Available */
				readonly statusMessage?: string
			}
			/** @enum {string} */
			readonly type?: "BRANCH" | "TAG"
		}
		readonly RestPullRequestReopenRequest: {
			/** Format: int32 */
			readonly version?: number
		}
		readonly RestPullRequestSettings: {
			readonly mergeConfig?: {
				readonly commitMessageTemplate?: {
					/** @example Merge in ${toProjectKey}/${toRepoSlug} from ${crossRepoProjectRepo}${fromRefName} to ${toRefName} */
					readonly body?: string
					/** @example Pull request #${id}: ${title} */
					readonly title?: string
				}
				/** Format: int32 */
				readonly commitSummaries?: number
				readonly defaultStrategy?: {
					/** @example Always create a merge commit */
					readonly description?: string
					readonly enabled?: boolean
					/** @example --no-ff */
					readonly flag?: string
					/** @example no-ff */
					readonly id?: string
					readonly links?: Record<string, unknown>
					/** @example Merge commit */
					readonly name?: string
				}
				readonly strategies?: readonly components["schemas"]["RestPullRequestMergeStrategy"][]
				/** @example repository */
				readonly type?: string
			}
		}
		readonly RestPullRequestSuggestion: {
			/**
			 * Format: int64
			 * @example 1359075920
			 */
			readonly changeTme?: number
			readonly fromRef?: {
				/** @example master */
				readonly displayId?: string
				/** @example refs/heads/master */
				readonly id?: string
				/** @enum {string} */
				readonly type?: "BRANCH" | "TAG"
			}
			readonly refChange?: {
				/** @example 6053a1eaa1c009dd11092d09a72f3c41af1b59ad */
				readonly fromHash?: string
				readonly ref?: {
					/** @example master */
					readonly displayId?: string
					/** @example refs/heads/master */
					readonly id?: string
					/** @enum {string} */
					readonly type?: "BRANCH" | "TAG"
				}
				/** @example refs/heads/master */
				readonly refId?: string
				/** @example d6edcbf924697ab811a867421dab60d954ccad99 */
				readonly toHash?: string
				/** @enum {string} */
				readonly type?: "ADD" | "DELETE" | "UPDATE"
			}
			readonly repository?: {
				readonly archived?: boolean
				/** @example main */
				readonly defaultBranch?: string
				/** @example My repo description */
				readonly description?: string
				readonly forkable?: boolean
				/** @example e3c939f9ef4a7fae272e */
				readonly hierarchyId?: string
				/** Format: int32 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example My repo */
				readonly name?: string
				readonly origin?: {
					readonly archived?: boolean
					/** @example main */
					readonly defaultBranch?: string
					/** @example My repo description */
					readonly description?: string
					readonly forkable?: boolean
					/** @example e3c939f9ef4a7fae272e */
					readonly hierarchyId?: string
					/** Format: int32 */
					readonly id?: number
					readonly links?: Record<string, unknown>
					/** @example My repo */
					readonly name?: string
					/** Format: int32 */
					readonly partition?: number
					readonly project?: {
						readonly avatar?: string
						readonly avatarUrl?: string
						/** @example The description for my cool project */
						readonly description?: string
						/** Format: int32 */
						readonly id?: number
						/** @example PRJ */
						readonly key: string
						readonly links?: Record<string, unknown>
						/** @example My Cool Project */
						readonly name?: string
						readonly public?: boolean
						/** @example PROJECT */
						readonly scope?: string
						/** @enum {string} */
						readonly type?: "NORMAL" | "PERSONAL"
					}
					readonly public?: boolean
					readonly relatedLinks?: Record<string, unknown>
					/** @example git */
					readonly scmId?: string
					/** @example REPOSITORY */
					readonly scope?: string
					/** @example my-repo */
					readonly slug?: string
					/** @enum {string} */
					readonly state?:
						| "AVAILABLE"
						| "INITIALISATION_FAILED"
						| "INITIALISING"
						| "OFFLINE"
					/** @example Available */
					readonly statusMessage?: string
				}
				/** Format: int32 */
				readonly partition?: number
				readonly project?: {
					readonly avatar?: string
					readonly avatarUrl?: string
					/** @example The description for my cool project */
					readonly description?: string
					/** Format: int32 */
					readonly id?: number
					/** @example PRJ */
					readonly key: string
					readonly links?: Record<string, unknown>
					/** @example My Cool Project */
					readonly name?: string
					readonly public?: boolean
					/** @example PROJECT */
					readonly scope?: string
					/** @enum {string} */
					readonly type?: "NORMAL" | "PERSONAL"
				}
				readonly public?: boolean
				readonly relatedLinks?: Record<string, unknown>
				/** @example git */
				readonly scmId?: string
				/** @example REPOSITORY */
				readonly scope?: string
				/** @example my-repo */
				readonly slug?: string
				/** @enum {string} */
				readonly state?:
					| "AVAILABLE"
					| "INITIALISATION_FAILED"
					| "INITIALISING"
					| "OFFLINE"
				/** @example Available */
				readonly statusMessage?: string
			}
			readonly toRef?: {
				/** @example master */
				readonly displayId?: string
				/** @example refs/heads/master */
				readonly id?: string
				/** @enum {string} */
				readonly type?: "BRANCH" | "TAG"
			}
		}
		readonly RestPushRefChange: {
			/** @example 6053a1eaa1c009dd11092d09a72f3c41af1b59ad */
			readonly fromHash?: string
			readonly ref?: {
				/** @example master */
				readonly displayId?: string
				/** @example refs/heads/master */
				readonly id?: string
				/** @enum {string} */
				readonly type?: "BRANCH" | "TAG"
			}
			/** @example refs/heads/master */
			readonly refId?: string
			/** @example d6edcbf924697ab811a867421dab60d954ccad99 */
			readonly toHash?: string
			/** @enum {string} */
			readonly type?: "ADD" | "DELETE" | "UPDATE"
			/** @enum {string} */
			readonly updatedType?: "FORCED" | "NOT_FORCED" | "UNKNOWN" | "UNRESOLVED"
		}
		readonly RestRateLimitSettings: {
			readonly defaultSettings?: {
				/**
				 * Format: int32
				 * @example 60
				 */
				readonly capacity?: number
				/**
				 * Format: int32
				 * @example 5
				 */
				readonly fillRate?: number
			}
			readonly enabled?: boolean
		}
		readonly RestRawAccessToken: {
			/** Format: date-time */
			readonly createdDate?: string
			/** @example 252973515069 */
			readonly id?: string
			/** @example My access token */
			readonly name?: string
			/** @example MjUyOTczNTE1MDY5On2rDbID2EgYpH8AVOECHv0saruQ */
			readonly token?: string
		}
		readonly RestRefChange: {
			/** @example 6053a1eaa1c009dd11092d09a72f3c41af1b59ad */
			readonly fromHash?: string
			readonly ref?: {
				/** @example master */
				readonly displayId?: string
				/** @example refs/heads/master */
				readonly id?: string
				/** @enum {string} */
				readonly type?: "BRANCH" | "TAG"
			}
			/** @example refs/heads/master */
			readonly refId?: string
			/** @example d6edcbf924697ab811a867421dab60d954ccad99 */
			readonly toHash?: string
			/** @enum {string} */
			readonly type?: "ADD" | "DELETE" | "UPDATE"
		}
		readonly RestRefMatcher: {
			/** @example main */
			readonly displayId?: string
			/** @example refs/heads/main */
			readonly id?: string
			readonly type?: {
				/** @enum {string} */
				readonly id?:
					| "ANY_REF"
					| "BRANCH"
					| "MODEL_BRANCH"
					| "MODEL_CATEGORY"
					| "PATTERN"
				/** @example Branch */
				readonly name?: string
			}
		}
		readonly RestRefMatcherType: {
			/** @enum {string} */
			readonly id?:
				| "ANY_REF"
				| "BRANCH"
				| "MODEL_BRANCH"
				| "MODEL_CATEGORY"
				| "PATTERN"
			/** @example Branch */
			readonly name?: string
		}
		readonly RestRefRestriction: {
			readonly accessKeys?: readonly components["schemas"]["RestSshAccessKey"][]
			/** @example [
			 *       "group_a",
			 *       "group_b"
			 *     ] */
			readonly groups?: readonly string[]
			/**
			 * Format: int32
			 * @example 1
			 */
			readonly id?: number
			readonly matcher?: {
				/** @example main */
				readonly displayId?: string
				/** @example refs/heads/main */
				readonly id?: string
				readonly type?: {
					/** @enum {string} */
					readonly id?:
						| "ANY_REF"
						| "BRANCH"
						| "MODEL_BRANCH"
						| "MODEL_CATEGORY"
						| "PATTERN"
					/** @example Branch */
					readonly name?: string
				}
			}
			readonly scope?: {
				/**
				 * Format: int32
				 * @example 2
				 */
				readonly resourceId?: number
				/** @enum {string} */
				readonly type?: "GLOBAL" | "PROJECT" | "REPOSITORY"
			}
			/** @example pull-request-only */
			readonly type?: string
			readonly users?: readonly components["schemas"]["RestApplicationUser"][]
		}
		readonly RestRefSyncQueue: {
			readonly values?: readonly components["schemas"]["RestFarmSynchronizationRequest"][]
		}
		readonly RestRefSyncRequest: {
			/**
			 * @example MERGE
			 * @enum {string}
			 */
			readonly action?: "DISCARD" | "MERGE" | "REBASE"
			readonly context?: components["schemas"]["Context"]
			/** @example refs/heads/master */
			readonly refId?: string
		}
		readonly RestRefSyncStatus: {
			readonly aheadRefs?: {
				/** @example master */
				readonly displayId?: string
				/** @example refs/heads/master */
				readonly id?: string
				/** @enum {string} */
				readonly state?: "AHEAD" | "DIVERGED" | "ORPHANED"
				readonly tag?: boolean
				/** @enum {string} */
				readonly type?: "BRANCH" | "TAG"
			}
			readonly available?: boolean
			readonly divergedRefs?: {
				/** @example master */
				readonly displayId?: string
				/** @example refs/heads/master */
				readonly id?: string
				/** @enum {string} */
				readonly state?: "AHEAD" | "DIVERGED" | "ORPHANED"
				readonly tag?: boolean
				/** @enum {string} */
				readonly type?: "BRANCH" | "TAG"
			}
			readonly enabled?: boolean
			/** @example 1331038800000 */
			readonly lastSync?: number
			readonly orphanedRefs?: {
				/** @example master */
				readonly displayId?: string
				/** @example refs/heads/master */
				readonly id?: string
				/** @enum {string} */
				readonly state?: "AHEAD" | "DIVERGED" | "ORPHANED"
				readonly tag?: boolean
				/** @enum {string} */
				readonly type?: "BRANCH" | "TAG"
			}
		}
		readonly RestRejectedRef: {
			/** @example master */
			readonly displayId?: string
			/** @example refs/heads/master */
			readonly id?: string
			/** @enum {string} */
			readonly state?: "AHEAD" | "DIVERGED" | "ORPHANED"
			readonly tag?: boolean
			/** @enum {string} */
			readonly type?: "BRANCH" | "TAG"
		}
		readonly RestRelatedLinks: unknown
		readonly RestRepositoriesExportRequest: {
			readonly includes: readonly components["schemas"]["RestRepositorySelector"][]
		}
		readonly RestRepository: {
			readonly archived?: boolean
			/** @example main */
			readonly defaultBranch?: string
			/** @example My repo description */
			readonly description?: string
			readonly forkable?: boolean
			/** @example e3c939f9ef4a7fae272e */
			readonly hierarchyId?: string
			/** Format: int32 */
			readonly id?: number
			readonly links?: Record<string, unknown>
			/** @example My repo */
			readonly name?: string
			readonly origin?: {
				readonly archived?: boolean
				/** @example main */
				readonly defaultBranch?: string
				/** @example My repo description */
				readonly description?: string
				readonly forkable?: boolean
				/** @example e3c939f9ef4a7fae272e */
				readonly hierarchyId?: string
				/** Format: int32 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example My repo */
				readonly name?: string
				/** Format: int32 */
				readonly partition?: number
				readonly project?: {
					readonly avatar?: string
					readonly avatarUrl?: string
					/** @example The description for my cool project */
					readonly description?: string
					/** Format: int32 */
					readonly id?: number
					/** @example PRJ */
					readonly key: string
					readonly links?: Record<string, unknown>
					/** @example My Cool Project */
					readonly name?: string
					readonly public?: boolean
					/** @example PROJECT */
					readonly scope?: string
					/** @enum {string} */
					readonly type?: "NORMAL" | "PERSONAL"
				}
				readonly public?: boolean
				readonly relatedLinks?: Record<string, unknown>
				/** @example git */
				readonly scmId?: string
				/** @example REPOSITORY */
				readonly scope?: string
				/** @example my-repo */
				readonly slug?: string
				/** @enum {string} */
				readonly state?:
					| "AVAILABLE"
					| "INITIALISATION_FAILED"
					| "INITIALISING"
					| "OFFLINE"
				/** @example Available */
				readonly statusMessage?: string
			}
			/** Format: int32 */
			readonly partition?: number
			readonly project?: {
				readonly avatar?: string
				readonly avatarUrl?: string
				/** @example The description for my cool project */
				readonly description?: string
				/** Format: int32 */
				readonly id?: number
				/** @example PRJ */
				readonly key: string
				readonly links?: Record<string, unknown>
				/** @example My Cool Project */
				readonly name?: string
				readonly public?: boolean
				/** @example PROJECT */
				readonly scope?: string
				/** @enum {string} */
				readonly type?: "NORMAL" | "PERSONAL"
			}
			readonly public?: boolean
			readonly relatedLinks?: Record<string, unknown>
			/** @example git */
			readonly scmId?: string
			/** @example REPOSITORY */
			readonly scope?: string
			/** @example my-repo */
			readonly slug?: string
			/** @enum {string} */
			readonly state?:
				| "AVAILABLE"
				| "INITIALISATION_FAILED"
				| "INITIALISING"
				| "OFFLINE"
			/** @example Available */
			readonly statusMessage?: string
		}
		readonly RestRepositoryHook: {
			readonly configured?: boolean
			readonly details?: components["schemas"]["RepositoryHookDetails"]
			readonly enabled?: boolean
			readonly scope?: {
				/**
				 * Format: int32
				 * @example 2
				 */
				readonly resourceId?: number
				/** @enum {string} */
				readonly type?: "GLOBAL" | "PROJECT" | "REPOSITORY"
			}
		}
		readonly RestRepositoryHookVeto: {
			/** @example You have insufficient permissions to rebase 'refs/heads/feature-branch'. */
			readonly detailedMessage?: string
			/** @example Insufficient branch permissions */
			readonly summaryMessage?: string
		}
		readonly RestRepositoryLockOwner: {
			/**
			 * @description The repository ID for which the lock is held
			 * @example 101
			 */
			readonly externalRepositoryId?: string
			/**
			 * Format: date-time
			 * @description The time at which lock was last acquired
			 */
			readonly lockAcquireTime?: string
			/**
			 * @description The ID of the mirror node on which the lock is being held
			 * @example 4da47d83-ec95-489d-ad46-012cc086c0da
			 */
			readonly nodeId?: string
			/**
			 * @description The unique ID of the request for which the lock is being held
			 * @example *T75X1Tx955x782x0
			 */
			readonly requestId?: string
			/**
			 * @description Name of the thread that is holding the lock
			 * @example farm-refchange-poller:thread-2
			 */
			readonly threadName?: string
		}
		readonly RestRepositoryMirrorEvent: {
			/**
			 * Format: int32
			 * @example 42
			 */
			readonly mirrorRepoId?: number
			/** @enum {string} */
			readonly type?: "SYNCHRONIZATION_FAILED" | "SYNCHRONIZED"
			/** @example 24 */
			readonly upstreamRepoId?: string
		}
		readonly RestRepositoryPolicy: {
			/**
			 * @description The permission required to delete repositories. Must be one of: "SYS_ADMIN", "ADMIN", "PROJECT_ADMIN", "REPO_ADMIN".
			 * @example ADMIN
			 * @enum {string}
			 */
			readonly permission?:
				| "ADMIN"
				| "PROJECT_ADMIN"
				| "REPO_ADMIN"
				| "SYS_ADMIN"
		}
		readonly RestRepositoryPullRequestSettings: {
			readonly mergeConfig?: {
				readonly commitMessageTemplate?: {
					/** @example Merge in ${toProjectKey}/${toRepoSlug} from ${crossRepoProjectRepo}${fromRefName} to ${toRefName} */
					readonly body?: string
					/** @example Pull request #${id}: ${title} */
					readonly title?: string
				}
				/** Format: int32 */
				readonly commitSummaries?: number
				readonly defaultStrategy?: {
					/** @example Always create a merge commit */
					readonly description?: string
					readonly enabled?: boolean
					/** @example --no-ff */
					readonly flag?: string
					/** @example no-ff */
					readonly id?: string
					readonly links?: Record<string, unknown>
					/** @example Merge commit */
					readonly name?: string
				}
				readonly strategies?: readonly components["schemas"]["RestPullRequestMergeStrategy"][]
				/** @example repository */
				readonly type?: string
			}
			readonly requiredAllApprovers?: boolean
			readonly requiredAllTasksComplete?: boolean
			readonly requiredApprovers?: {
				/** @example 3 */
				readonly count?: string
				/** @example true */
				readonly enabled?: boolean
			}
			/** Format: int32 */
			readonly requiredApproversDeprecated?: number
			readonly requiredSuccessfulBuilds?: {
				/** @example 3 */
				readonly count?: string
				/** @example true */
				readonly enabled?: boolean
			}
			/** Format: int32 */
			readonly requiredSuccessfulBuildsDeprecated?: number
		}
		readonly RestRepositoryRefChangeActivity: {
			/**
			 * Format: int64
			 * @example 19990759200
			 */
			readonly createdDate?: number
			/**
			 * Format: int64
			 * @example 1
			 */
			readonly id?: number
			readonly refChange?: {
				/** @example 6053a1eaa1c009dd11092d09a72f3c41af1b59ad */
				readonly fromHash?: string
				readonly ref?: {
					/** @example master */
					readonly displayId?: string
					/** @example refs/heads/master */
					readonly id?: string
					/** @enum {string} */
					readonly type?: "BRANCH" | "TAG"
				}
				/** @example refs/heads/master */
				readonly refId?: string
				/** @example d6edcbf924697ab811a867421dab60d954ccad99 */
				readonly toHash?: string
				/** @enum {string} */
				readonly type?: "ADD" | "DELETE" | "UPDATE"
				/** @enum {string} */
				readonly updatedType?:
					| "FORCED"
					| "NOT_FORCED"
					| "UNKNOWN"
					| "UNRESOLVED"
			}
			readonly repository?: {
				readonly archived?: boolean
				/** @example main */
				readonly defaultBranch?: string
				/** @example My repo description */
				readonly description?: string
				readonly forkable?: boolean
				/** @example e3c939f9ef4a7fae272e */
				readonly hierarchyId?: string
				/** Format: int32 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example My repo */
				readonly name?: string
				readonly origin?: {
					readonly archived?: boolean
					/** @example main */
					readonly defaultBranch?: string
					/** @example My repo description */
					readonly description?: string
					readonly forkable?: boolean
					/** @example e3c939f9ef4a7fae272e */
					readonly hierarchyId?: string
					/** Format: int32 */
					readonly id?: number
					readonly links?: Record<string, unknown>
					/** @example My repo */
					readonly name?: string
					/** Format: int32 */
					readonly partition?: number
					readonly project?: {
						readonly avatar?: string
						readonly avatarUrl?: string
						/** @example The description for my cool project */
						readonly description?: string
						/** Format: int32 */
						readonly id?: number
						/** @example PRJ */
						readonly key: string
						readonly links?: Record<string, unknown>
						/** @example My Cool Project */
						readonly name?: string
						readonly public?: boolean
						/** @example PROJECT */
						readonly scope?: string
						/** @enum {string} */
						readonly type?: "NORMAL" | "PERSONAL"
					}
					readonly public?: boolean
					readonly relatedLinks?: Record<string, unknown>
					/** @example git */
					readonly scmId?: string
					/** @example REPOSITORY */
					readonly scope?: string
					/** @example my-repo */
					readonly slug?: string
					/** @enum {string} */
					readonly state?:
						| "AVAILABLE"
						| "INITIALISATION_FAILED"
						| "INITIALISING"
						| "OFFLINE"
					/** @example Available */
					readonly statusMessage?: string
				}
				/** Format: int32 */
				readonly partition?: number
				readonly project?: {
					readonly avatar?: string
					readonly avatarUrl?: string
					/** @example The description for my cool project */
					readonly description?: string
					/** Format: int32 */
					readonly id?: number
					/** @example PRJ */
					readonly key: string
					readonly links?: Record<string, unknown>
					/** @example My Cool Project */
					readonly name?: string
					readonly public?: boolean
					/** @example PROJECT */
					readonly scope?: string
					/** @enum {string} */
					readonly type?: "NORMAL" | "PERSONAL"
				}
				readonly public?: boolean
				readonly relatedLinks?: Record<string, unknown>
				/** @example git */
				readonly scmId?: string
				/** @example REPOSITORY */
				readonly scope?: string
				/** @example my-repo */
				readonly slug?: string
				/** @enum {string} */
				readonly state?:
					| "AVAILABLE"
					| "INITIALISATION_FAILED"
					| "INITIALISING"
					| "OFFLINE"
				/** @example Available */
				readonly statusMessage?: string
			}
			/** @example push */
			readonly trigger?: string
			readonly user?: {
				readonly active?: boolean
				readonly avatarUrl?: string
				/** @example Jane Citizen */
				readonly displayName?: string
				/** @example jane@example.com */
				readonly emailAddress?: string
				/**
				 * Format: int32
				 * @example 101
				 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example jcitizen */
				readonly name?: string
				/** @example jcitizen */
				readonly slug?: string
				/** @enum {string} */
				readonly type?: "NORMAL" | "SERVICE"
			}
		}
		readonly RestRepositorySelector: {
			/** @example PRJ */
			readonly projectKey?: string
			/** @example my-repo */
			readonly slug?: string
		}
		readonly RestRequiredBuildCondition: {
			/**
			 * @description A non-empty list of build parent keys that require green builds for this merge check to pass
			 * @example [
			 *       "build-key-1",
			 *       "build-key-2"
			 *     ]
			 */
			readonly buildParentKeys?: readonly string[]
			readonly exemptRefMatcher?: {
				/** @example main */
				readonly displayId?: string
				/** @example refs/heads/main */
				readonly id?: string
				readonly type?: {
					/** @enum {string} */
					readonly id?:
						| "ANY_REF"
						| "BRANCH"
						| "MODEL_BRANCH"
						| "MODEL_CATEGORY"
						| "PATTERN"
					/** @example Branch */
					readonly name?: string
				}
			}
			/**
			 * Format: int64
			 * @example 15
			 */
			readonly id?: number
			readonly refMatcher?: {
				/** @example main */
				readonly displayId?: string
				/** @example refs/heads/main */
				readonly id?: string
				readonly type?: {
					/** @enum {string} */
					readonly id?:
						| "ANY_REF"
						| "BRANCH"
						| "MODEL_BRANCH"
						| "MODEL_CATEGORY"
						| "PATTERN"
					/** @example Branch */
					readonly name?: string
				}
			}
		}
		readonly RestRequiredBuildConditionSetRequest: {
			/**
			 * @description A non-empty list of build parent keys that require green builds for this merge check to pass
			 * @example [
			 *       "build-key-1",
			 *       "build-key-2"
			 *     ]
			 */
			readonly buildParentKeys: readonly string[]
			readonly exemptRefMatcher?: components["schemas"]["RestRefMatcher"]
			readonly refMatcher: {
				/** @example main */
				readonly displayId?: string
				/** @example refs/heads/main */
				readonly id?: string
				readonly type?: {
					/** @enum {string} */
					readonly id?:
						| "ANY_REF"
						| "BRANCH"
						| "MODEL_BRANCH"
						| "MODEL_CATEGORY"
						| "PATTERN"
					/** @example Branch */
					readonly name?: string
				}
			}
		}
		readonly RestRestrictionRequest: {
			/** @example [
			 *       1,
			 *       2,
			 *       3
			 *     ] */
			readonly accessKeyIds?: readonly number[]
			readonly accessKeys?: readonly components["schemas"]["RestSshAccessKey"][]
			/** @example [
			 *       "bitbucket-developers"
			 *     ] */
			readonly groupNames?: readonly string[]
			/** @example [
			 *       "group_a",
			 *       "group_b"
			 *     ] */
			readonly groups?: readonly string[]
			/**
			 * Format: int32
			 * @example 1
			 */
			readonly id?: number
			readonly matcher?: {
				/** @example main */
				readonly displayId?: string
				/** @example refs/heads/main */
				readonly id?: string
				readonly type?: {
					/** @enum {string} */
					readonly id?:
						| "ANY_REF"
						| "BRANCH"
						| "MODEL_BRANCH"
						| "MODEL_CATEGORY"
						| "PATTERN"
					/** @example Branch */
					readonly name?: string
				}
			}
			readonly scope?: {
				/**
				 * Format: int32
				 * @example 2
				 */
				readonly resourceId?: number
				/** @enum {string} */
				readonly type?: "GLOBAL" | "PROJECT" | "REPOSITORY"
			}
			/** @example pull-request-only */
			readonly type?: string
			readonly users?: readonly components["schemas"]["RestApplicationUser"][]
			/** @example [
			 *       "bman",
			 *       "tstark",
			 *       "hulk"
			 *     ] */
			readonly userSlugs?: readonly string[]
		}
		readonly RestReviewerGroup: {
			readonly avatarUrl?: string
			/** @example null */
			readonly description?: string
			/** Format: int64 */
			readonly id?: number
			/** @example name */
			readonly name?: string
			readonly scope?: {
				/**
				 * Format: int32
				 * @example 2
				 */
				readonly resourceId?: number
				/** @enum {string} */
				readonly type?: "GLOBAL" | "PROJECT" | "REPOSITORY"
			}
			readonly users?: readonly components["schemas"]["ApplicationUser"][]
		}
		readonly RestRollingUpgradeState: {
			/** @example true */
			readonly rollingUpgradeEnabled?: boolean
			/** @example 9.0.0 */
			readonly version?: string
		}
		readonly RestScope: {
			/**
			 * Format: int32
			 * @example 2
			 */
			readonly resourceId?: number
			/** @enum {string} */
			readonly type?: "GLOBAL" | "PROJECT" | "REPOSITORY"
		}
		readonly RestScopesExample: {
			readonly links?: Record<string, unknown>
			readonly scopes?: readonly Record<string, unknown>[]
		}
		readonly RestSecretScanningAllowlistRule: {
			/**
			 * Format: int64
			 * @description The ID of the rule
			 * @example 7
			 */
			readonly id?: number
			/**
			 * @description If present, regular expression for matching a secret on a code line
			 * @example (BBDC-[a-zA-Z0-9+]{44})
			 */
			readonly lineRegex?: string
			/**
			 * @description Human readable name for the rule
			 * @example Bitbucket DC HTTP access token
			 */
			readonly name?: string
			/**
			 * @description If present, regular expression matching file names
			 * @example *.pem
			 */
			readonly pathRegex?: string
		}
		readonly RestSecretScanningAllowlistRuleSetRequest: {
			/**
			 * @description Regular expression for matching a secret on a code line
			 * @example (BBDC-[a-zA-Z0-9+]{44})
			 */
			readonly lineRegex?: string
			/**
			 * @description Human readable name for the rule
			 * @example Bitbucket DC HTTP access token
			 */
			readonly name?: string
			/**
			 * @description Regular expression matching file names
			 * @example *.pem
			 */
			readonly pathRegex?: string
		}
		readonly RestSecretScanningRule: {
			/**
			 * Format: int64
			 * @description The ID of the rule
			 * @example 7
			 */
			readonly id?: number
			/**
			 * @description If present, regular expression for matching a secret on a code line
			 * @example (BBDC-[a-zA-Z0-9+]{44})
			 */
			readonly lineRegex?: string
			/**
			 * @description Human readable name for the rule
			 * @example Bitbucket DC HTTP access token
			 */
			readonly name?: string
			/**
			 * @description If present, regular expression matching file names
			 * @example *.pem
			 */
			readonly pathRegex?: string
			/** @description The scope in which this rule was configured for. */
			readonly scope?: {
				/**
				 * Format: int32
				 * @example 2
				 */
				readonly resourceId?: number
				/** @enum {string} */
				readonly type?: "GLOBAL" | "PROJECT" | "REPOSITORY"
			}
		}
		readonly RestSecretScanningRuleSetRequest: {
			/**
			 * @description Regular expression for matching a secret on a code line
			 * @example (BBDC-[a-zA-Z0-9+]{44})
			 */
			readonly lineRegex?: string
			/**
			 * @description Human readable name for the rule
			 * @example Bitbucket DC HTTP access token
			 */
			readonly name?: string
			/**
			 * @description Regular expression matching file names
			 * @example *.pem
			 */
			readonly pathRegex?: string
		}
		readonly RestSetInsightReportRequest: {
			readonly coverageProviderKey?: string
			/**
			 * Format: int64
			 * @example 1630041546433
			 */
			readonly createdDate?: number
			readonly data: readonly components["schemas"]["RestInsightReportData"][]
			/** @example This is the details of the report, it can be a longer string describing the report. */
			readonly details?: string
			/** @example http://insight.example.com */
			readonly link?: string
			/** @example http://insight.example.com/logo */
			readonly logoUrl?: string
			/** @example Reporter/tool that produced this report */
			readonly reporter?: string
			/** @example PASS */
			readonly result?: string
			/** @example report.title */
			readonly title: string
		}
		readonly RestSingleAddInsightAnnotationRequest: {
			/** @example message-1 */
			readonly externalId?: string
			/**
			 * Format: int32
			 * @example 4
			 */
			readonly line?: number
			/** @example https://link.to.tool/that/produced/annotation/message-1 */
			readonly link?: string
			/** @example This is a bug here because reasons */
			readonly message: string
			/** @example path/to/file/in/repo */
			readonly path?: string
			/** @example MEDIUM */
			readonly severity: string
			/** @example CODE_SMELL */
			readonly type?: string
		}
		readonly RestSshAccessKey: {
			readonly key?: {
				readonly algorithmType?: string
				/** Format: int32 */
				readonly bitLength?: number
				/** Format: date-time */
				readonly createdDate?: string
				/**
				 * Format: int32
				 * @example 30
				 */
				readonly expiryDays?: number
				/** @example Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI */
				readonly fingerprint?: string
				/**
				 * Format: int32
				 * @example 1
				 */
				readonly id?: number
				/** @example me@127.0.0.1 */
				readonly label?: string
				/** @example 1630041546434 */
				readonly lastAuthenticated?: string
				/** @example ssh-rsa AAAAB3... me@127.0.0.1 */
				readonly text?: string
			}
			/** @enum {string} */
			readonly permission?:
				| "ADMIN"
				| "LICENSED_USER"
				| "PROJECT_ADMIN"
				| "PROJECT_CREATE"
				| "PROJECT_READ"
				| "PROJECT_VIEW"
				| "PROJECT_WRITE"
				| "REPO_ADMIN"
				| "REPO_CREATE"
				| "REPO_READ"
				| "REPO_WRITE"
				| "SYS_ADMIN"
				| "USER_ADMIN"
			readonly project?: {
				readonly avatar?: string
				readonly avatarUrl?: string
				/** @example The description for my cool project */
				readonly description?: string
				/** Format: int32 */
				readonly id?: number
				/** @example PRJ */
				readonly key: string
				readonly links?: Record<string, unknown>
				/** @example My Cool Project */
				readonly name?: string
				readonly public?: boolean
				/** @example PROJECT */
				readonly scope?: string
				/** @enum {string} */
				readonly type?: "NORMAL" | "PERSONAL"
			}
			readonly repository?: {
				readonly archived?: boolean
				/** @example main */
				readonly defaultBranch?: string
				/** @example My repo description */
				readonly description?: string
				readonly forkable?: boolean
				/** @example e3c939f9ef4a7fae272e */
				readonly hierarchyId?: string
				/** Format: int32 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example My repo */
				readonly name?: string
				readonly origin?: {
					readonly archived?: boolean
					/** @example main */
					readonly defaultBranch?: string
					/** @example My repo description */
					readonly description?: string
					readonly forkable?: boolean
					/** @example e3c939f9ef4a7fae272e */
					readonly hierarchyId?: string
					/** Format: int32 */
					readonly id?: number
					readonly links?: Record<string, unknown>
					/** @example My repo */
					readonly name?: string
					/** Format: int32 */
					readonly partition?: number
					readonly project?: {
						readonly avatar?: string
						readonly avatarUrl?: string
						/** @example The description for my cool project */
						readonly description?: string
						/** Format: int32 */
						readonly id?: number
						/** @example PRJ */
						readonly key: string
						readonly links?: Record<string, unknown>
						/** @example My Cool Project */
						readonly name?: string
						readonly public?: boolean
						/** @example PROJECT */
						readonly scope?: string
						/** @enum {string} */
						readonly type?: "NORMAL" | "PERSONAL"
					}
					readonly public?: boolean
					readonly relatedLinks?: Record<string, unknown>
					/** @example git */
					readonly scmId?: string
					/** @example REPOSITORY */
					readonly scope?: string
					/** @example my-repo */
					readonly slug?: string
					/** @enum {string} */
					readonly state?:
						| "AVAILABLE"
						| "INITIALISATION_FAILED"
						| "INITIALISING"
						| "OFFLINE"
					/** @example Available */
					readonly statusMessage?: string
				}
				/** Format: int32 */
				readonly partition?: number
				readonly project?: {
					readonly avatar?: string
					readonly avatarUrl?: string
					/** @example The description for my cool project */
					readonly description?: string
					/** Format: int32 */
					readonly id?: number
					/** @example PRJ */
					readonly key: string
					readonly links?: Record<string, unknown>
					/** @example My Cool Project */
					readonly name?: string
					readonly public?: boolean
					/** @example PROJECT */
					readonly scope?: string
					/** @enum {string} */
					readonly type?: "NORMAL" | "PERSONAL"
				}
				readonly public?: boolean
				readonly relatedLinks?: Record<string, unknown>
				/** @example git */
				readonly scmId?: string
				/** @example REPOSITORY */
				readonly scope?: string
				/** @example my-repo */
				readonly slug?: string
				/** @enum {string} */
				readonly state?:
					| "AVAILABLE"
					| "INITIALISATION_FAILED"
					| "INITIALISING"
					| "OFFLINE"
				/** @example Available */
				readonly statusMessage?: string
			}
		}
		readonly RestSshAccessKeyLocations: {
			readonly projects?: components["schemas"]["RestProject"]
			readonly repositories?: components["schemas"]["RestRepository"]
		}
		readonly RestSshCredentials: {
			/**
			 * @description The key algorithm, if passing in a legacy X.509 encoded key. Do not specify for OpenSSH encoded keys
			 * @example RSA
			 */
			readonly algorithm?: string
			/**
			 * @description The public key text in the OpenSSH format. The algorithm must be specified in case of the legacy X.509 keys
			 * @example ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKjFjYCLJjrIY/jCXPbJ9wd3drcGospvPkKFNZ1ZcacA test@test.local
			 */
			readonly publicKey: string
			/** @example git */
			readonly username?: string
		}
		readonly RestSshKey: {
			readonly algorithmType?: string
			/** Format: int32 */
			readonly bitLength?: number
			/** Format: date-time */
			readonly createdDate?: string
			/**
			 * Format: int32
			 * @example 30
			 */
			readonly expiryDays?: number
			/** @example Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI */
			readonly fingerprint?: string
			/**
			 * Format: int32
			 * @example 1
			 */
			readonly id?: number
			/** @example me@127.0.0.1 */
			readonly label?: string
			/** @example 1630041546434 */
			readonly lastAuthenticated?: string
			/** @example ssh-rsa AAAAB3... me@127.0.0.1 */
			readonly text?: string
		}
		readonly RestSshKeySettings: {
			readonly keyTypeRestrictions?: readonly components["schemas"]["RestSshKeyTypeRestriction"][]
			readonly maxExpiryDays?: {
				/** Format: int32 */
				readonly asInt?: number
				readonly present?: boolean
			}
		}
		readonly RestSshKeyTypeRestriction: {
			/** @example RSA */
			readonly algorithm?: string
			/** @example true */
			readonly allowed?: boolean
			/** @example 2048 */
			readonly minKeyLength?: {
				/** Format: int32 */
				readonly asInt?: number
				readonly present?: boolean
			}
		}
		readonly RestSshSettings: {
			readonly accessKeysEnabled?: boolean
			/** @example ssh://example.com */
			readonly baseUrl?: string
			/** @example true */
			readonly enabled?: boolean
			readonly fingerprint?: components["schemas"]["SimpleSshKeyFingerprint"]
			/**
			 * Format: int32
			 * @example 7999
			 */
			readonly port?: number
		}
		readonly RestSyncProgress: {
			readonly discovering?: boolean
			/** Format: int32 */
			readonly syncedRepos?: number
			/** Format: int32 */
			readonly totalRepos?: number
		}
		readonly RestSystemSigningConfiguration: {
			/** @example false */
			readonly enabled?: boolean
		}
		readonly RestTag: {
			/** @example master */
			readonly displayId?: string
			/** @example 8d51122def5632836d1cb1026e879069e10a1e13 */
			readonly hash?: string
			/** @example refs/heads/master */
			readonly id?: string
			/** @example 8d51122def5632836d1cb1026e879069e10a1e13 */
			readonly latestChangeset?: string
			/** @example 8d51122def5632836d1cb1026e879069e10a1e13 */
			readonly latestCommit?: string
			/** @enum {string} */
			readonly type?: "BRANCH" | "TAG"
		}
		readonly RestTestResults: {
			/**
			 * Format: int32
			 * @example 1
			 */
			readonly failed?: number
			/**
			 * Format: int32
			 * @example 5
			 */
			readonly skipped?: number
			/**
			 * Format: int32
			 * @example 134
			 */
			readonly successful?: number
		}
		readonly RestTokenBucketSettings: {
			/**
			 * Format: int32
			 * @example 60
			 */
			readonly capacity?: number
			/**
			 * Format: int32
			 * @example 5
			 */
			readonly fillRate?: number
		}
		readonly RestUpstreamServer: {
			/** @example https://bitbucket.example.com */
			readonly baseUrl?: string
			/** @example f76a35c5-4592-425d-bf85-b4d9db68e809 */
			readonly id?: string
			/**
			 * @example INSTALLED
			 * @enum {string}
			 */
			readonly state?:
				| "INITIALIZING"
				| "INSTALLED"
				| "PENDING"
				| "REMOVED"
				| "UNKNOWN"
		}
		readonly RestUpstreamSettings: {
			/** @enum {string} */
			readonly mode?: "ALL_PROJECTS" | "SELECTED_PROJECTS"
			readonly projectIds?: readonly string[]
		}
		readonly RestUserDirectory: {
			/** @example true */
			readonly active?: boolean
			/** @example This directory has users that are able to access Bitbucket DC */
			readonly description?: string
			/** @example Bitbucket Internal Directory */
			readonly name?: string
			/** @example Crowd */
			readonly type?: string
		}
		readonly RestUsernamePasswordCredentials: {
			/** @example secr3t */
			readonly password: string
			/** @example user1 */
			readonly username: string
		}
		readonly RestUserRateLimitSettings: {
			readonly settings?: {
				/**
				 * Format: int32
				 * @example 60
				 */
				readonly capacity?: number
				/**
				 * Format: int32
				 * @example 5
				 */
				readonly fillRate?: number
			}
			readonly user?: {
				readonly active?: boolean
				readonly avatarUrl?: string
				/** @example Jane Citizen */
				readonly displayName?: string
				/** @example jane@example.com */
				readonly emailAddress?: string
				/**
				 * Format: int32
				 * @example 101
				 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example jcitizen */
				readonly name?: string
				/** @example jcitizen */
				readonly slug?: string
				/** @enum {string} */
				readonly type?: "NORMAL" | "SERVICE"
			}
			readonly whitelisted?: boolean
		}
		readonly RestUserRateLimitSettingsUpdateRequest: {
			readonly settings?: {
				/**
				 * Format: int32
				 * @example 60
				 */
				readonly capacity?: number
				/**
				 * Format: int32
				 * @example 5
				 */
				readonly fillRate?: number
			}
			readonly whitelisted?: boolean
		}
		readonly RestUserReaction: {
			readonly comment?: {
				readonly anchor?: {
					/** @enum {string} */
					readonly diffType?: "COMMIT" | "EFFECTIVE" | "RANGE"
					/** @enum {string} */
					readonly fileType?: "FROM" | "TO"
					/** @example 62a0505e8204115b8b9c8a95bfa264a8c0896a93 */
					readonly fromHash?: string
					/**
					 * Format: int32
					 * @example 98
					 */
					readonly line?: number
					/** @enum {string} */
					readonly lineType?: "ADDED" | "CONTEXT" | "REMOVED"
					readonly multilineMarker?: {
						/**
						 * Format: int32
						 * @description The line number where the multiline comment will begin
						 */
						readonly startLine?: number
						/**
						 * @description The segment type of the start line of the multiline comment
						 * @enum {string}
						 */
						readonly startLineType: "ADDED" | "CONTEXT" | "REMOVED"
					}
					readonly path?: {
						/** @example [
						 *       "path",
						 *       "to",
						 *       "file.txt"
						 *     ] */
						readonly components?: readonly string[]
						/** @example txt */
						readonly extension?: string
						/** @example file.txt */
						readonly name?: string
						/** @example path/to */
						readonly parent?: string
					}
					readonly pullRequest?: {
						readonly closed?: boolean
						/**
						 * Format: int64
						 * @example 19990759200
						 */
						readonly closedDate?: number
						/**
						 * Format: int64
						 * @example 13590759200
						 */
						readonly createdDate?: number
						/** @example It is a kludge, but put the tuple from the database in the cache. */
						readonly description?: string
						readonly descriptionAsHtml?: string
						readonly draft?: boolean
						readonly fromRef?: {
							/** @example feature-ABC-1233 */
							readonly displayId?: string
							/** @example refs/heads/feature-ABC-123 */
							readonly id?: string
							/** @example babecafebabecafebabecafebabecafebabecafe */
							readonly latestCommit?: string
							readonly repository?: {
								readonly archived?: boolean
								/** @example main */
								readonly defaultBranch?: string
								/** @example My repo description */
								readonly description?: string
								readonly forkable?: boolean
								/** @example e3c939f9ef4a7fae272e */
								readonly hierarchyId?: string
								/** Format: int32 */
								readonly id?: number
								readonly links?: Record<string, unknown>
								/** @example My repo */
								readonly name?: string
								readonly origin?: {
									readonly archived?: boolean
									/** @example main */
									readonly defaultBranch?: string
									/** @example My repo description */
									readonly description?: string
									readonly forkable?: boolean
									/** @example e3c939f9ef4a7fae272e */
									readonly hierarchyId?: string
									/** Format: int32 */
									readonly id?: number
									readonly links?: Record<string, unknown>
									/** @example My repo */
									readonly name?: string
									/** Format: int32 */
									readonly partition?: number
									readonly project?: {
										readonly avatar?: string
										readonly avatarUrl?: string
										/** @example The description for my cool project */
										readonly description?: string
										/** Format: int32 */
										readonly id?: number
										/** @example PRJ */
										readonly key: string
										readonly links?: Record<string, unknown>
										/** @example My Cool Project */
										readonly name?: string
										readonly public?: boolean
										/** @example PROJECT */
										readonly scope?: string
										/** @enum {string} */
										readonly type?: "NORMAL" | "PERSONAL"
									}
									readonly public?: boolean
									readonly relatedLinks?: Record<string, unknown>
									/** @example git */
									readonly scmId?: string
									/** @example REPOSITORY */
									readonly scope?: string
									/** @example my-repo */
									readonly slug?: string
									/** @enum {string} */
									readonly state?:
										| "AVAILABLE"
										| "INITIALISATION_FAILED"
										| "INITIALISING"
										| "OFFLINE"
									/** @example Available */
									readonly statusMessage?: string
								}
								/** Format: int32 */
								readonly partition?: number
								readonly project?: {
									readonly avatar?: string
									readonly avatarUrl?: string
									/** @example The description for my cool project */
									readonly description?: string
									/** Format: int32 */
									readonly id?: number
									/** @example PRJ */
									readonly key: string
									readonly links?: Record<string, unknown>
									/** @example My Cool Project */
									readonly name?: string
									readonly public?: boolean
									/** @example PROJECT */
									readonly scope?: string
									/** @enum {string} */
									readonly type?: "NORMAL" | "PERSONAL"
								}
								readonly public?: boolean
								readonly relatedLinks?: Record<string, unknown>
								/** @example git */
								readonly scmId?: string
								/** @example REPOSITORY */
								readonly scope?: string
								/** @example my-repo */
								readonly slug?: string
								/** @enum {string} */
								readonly state?:
									| "AVAILABLE"
									| "INITIALISATION_FAILED"
									| "INITIALISING"
									| "OFFLINE"
								/** @example Available */
								readonly statusMessage?: string
							}
							/** @enum {string} */
							readonly type?: "BRANCH" | "TAG"
						}
						readonly htmlDescription?: string
						/**
						 * Format: int64
						 * @example 1
						 */
						readonly id?: number
						readonly links?: Record<string, unknown>
						readonly locked?: boolean
						readonly open?: boolean
						readonly participants?: readonly components["schemas"]["RestPullRequestParticipant"][]
						readonly reviewers?: readonly components["schemas"]["RestPullRequestParticipant"][]
						/** @enum {string} */
						readonly state?: "DECLINED" | "MERGED" | "OPEN"
						/** @example Talking Nerdy */
						readonly title?: string
						readonly toRef?: {
							/** @example feature-ABC-1233 */
							readonly displayId?: string
							/** @example refs/heads/feature-ABC-123 */
							readonly id?: string
							/** @example babecafebabecafebabecafebabecafebabecafe */
							readonly latestCommit?: string
							readonly repository?: {
								readonly archived?: boolean
								/** @example main */
								readonly defaultBranch?: string
								/** @example My repo description */
								readonly description?: string
								readonly forkable?: boolean
								/** @example e3c939f9ef4a7fae272e */
								readonly hierarchyId?: string
								/** Format: int32 */
								readonly id?: number
								readonly links?: Record<string, unknown>
								/** @example My repo */
								readonly name?: string
								readonly origin?: {
									readonly archived?: boolean
									/** @example main */
									readonly defaultBranch?: string
									/** @example My repo description */
									readonly description?: string
									readonly forkable?: boolean
									/** @example e3c939f9ef4a7fae272e */
									readonly hierarchyId?: string
									/** Format: int32 */
									readonly id?: number
									readonly links?: Record<string, unknown>
									/** @example My repo */
									readonly name?: string
									/** Format: int32 */
									readonly partition?: number
									readonly project?: {
										readonly avatar?: string
										readonly avatarUrl?: string
										/** @example The description for my cool project */
										readonly description?: string
										/** Format: int32 */
										readonly id?: number
										/** @example PRJ */
										readonly key: string
										readonly links?: Record<string, unknown>
										/** @example My Cool Project */
										readonly name?: string
										readonly public?: boolean
										/** @example PROJECT */
										readonly scope?: string
										/** @enum {string} */
										readonly type?: "NORMAL" | "PERSONAL"
									}
									readonly public?: boolean
									readonly relatedLinks?: Record<string, unknown>
									/** @example git */
									readonly scmId?: string
									/** @example REPOSITORY */
									readonly scope?: string
									/** @example my-repo */
									readonly slug?: string
									/** @enum {string} */
									readonly state?:
										| "AVAILABLE"
										| "INITIALISATION_FAILED"
										| "INITIALISING"
										| "OFFLINE"
									/** @example Available */
									readonly statusMessage?: string
								}
								/** Format: int32 */
								readonly partition?: number
								readonly project?: {
									readonly avatar?: string
									readonly avatarUrl?: string
									/** @example The description for my cool project */
									readonly description?: string
									/** Format: int32 */
									readonly id?: number
									/** @example PRJ */
									readonly key: string
									readonly links?: Record<string, unknown>
									/** @example My Cool Project */
									readonly name?: string
									readonly public?: boolean
									/** @example PROJECT */
									readonly scope?: string
									/** @enum {string} */
									readonly type?: "NORMAL" | "PERSONAL"
								}
								readonly public?: boolean
								readonly relatedLinks?: Record<string, unknown>
								/** @example git */
								readonly scmId?: string
								/** @example REPOSITORY */
								readonly scope?: string
								/** @example my-repo */
								readonly slug?: string
								/** @enum {string} */
								readonly state?:
									| "AVAILABLE"
									| "INITIALISATION_FAILED"
									| "INITIALISING"
									| "OFFLINE"
								/** @example Available */
								readonly statusMessage?: string
							}
							/** @enum {string} */
							readonly type?: "BRANCH" | "TAG"
						}
						/**
						 * Format: int64
						 * @example 14490759200
						 */
						readonly updatedDate?: number
						/** Format: int32 */
						readonly version?: number
					}
					readonly srcPath?: {
						/** @example [
						 *       "path",
						 *       "to",
						 *       "file.txt"
						 *     ] */
						readonly components?: readonly string[]
						/** @example txt */
						readonly extension?: string
						/** @example file.txt */
						readonly name?: string
						/** @example path/to */
						readonly parent?: string
					}
					/** @example 3cdd5d19178a54d2e51b5098d43b57571241d0ab */
					readonly toHash?: string
				}
				readonly anchored?: boolean
				readonly author?: {
					readonly active?: boolean
					readonly avatarUrl?: string
					/** @example Jane Citizen */
					readonly displayName?: string
					/** @example jane@example.com */
					readonly emailAddress?: string
					/**
					 * Format: int32
					 * @example 101
					 */
					readonly id?: number
					readonly links?: Record<string, unknown>
					/** @example jcitizen */
					readonly name?: string
					/** @example jcitizen */
					readonly slug?: string
					/** @enum {string} */
					readonly type?: "NORMAL" | "SERVICE"
				}
				readonly comments?: readonly components["schemas"]["RestComment"][]
				/**
				 * Format: int64
				 * @example 1359075920
				 */
				readonly createdDate?: number
				readonly html?: string
				/**
				 * Format: int64
				 * @example 1
				 */
				readonly id?: number
				readonly parent?: {
					readonly anchor?: {
						/** @enum {string} */
						readonly diffType?: "COMMIT" | "EFFECTIVE" | "RANGE"
						/** @enum {string} */
						readonly fileType?: "FROM" | "TO"
						/** @example 62a0505e8204115b8b9c8a95bfa264a8c0896a93 */
						readonly fromHash?: string
						/**
						 * Format: int32
						 * @example 98
						 */
						readonly line?: number
						/** @enum {string} */
						readonly lineType?: "ADDED" | "CONTEXT" | "REMOVED"
						readonly multilineMarker?: {
							/**
							 * Format: int32
							 * @description The line number where the multiline comment will begin
							 */
							readonly startLine?: number
							/**
							 * @description The segment type of the start line of the multiline comment
							 * @enum {string}
							 */
							readonly startLineType: "ADDED" | "CONTEXT" | "REMOVED"
						}
						readonly path?: {
							/** @example [
							 *       "path",
							 *       "to",
							 *       "file.txt"
							 *     ] */
							readonly components?: readonly string[]
							/** @example txt */
							readonly extension?: string
							/** @example file.txt */
							readonly name?: string
							/** @example path/to */
							readonly parent?: string
						}
						readonly pullRequest?: {
							readonly closed?: boolean
							/**
							 * Format: int64
							 * @example 19990759200
							 */
							readonly closedDate?: number
							/**
							 * Format: int64
							 * @example 13590759200
							 */
							readonly createdDate?: number
							/** @example It is a kludge, but put the tuple from the database in the cache. */
							readonly description?: string
							readonly descriptionAsHtml?: string
							readonly draft?: boolean
							readonly fromRef?: {
								/** @example feature-ABC-1233 */
								readonly displayId?: string
								/** @example refs/heads/feature-ABC-123 */
								readonly id?: string
								/** @example babecafebabecafebabecafebabecafebabecafe */
								readonly latestCommit?: string
								readonly repository?: {
									readonly archived?: boolean
									/** @example main */
									readonly defaultBranch?: string
									/** @example My repo description */
									readonly description?: string
									readonly forkable?: boolean
									/** @example e3c939f9ef4a7fae272e */
									readonly hierarchyId?: string
									/** Format: int32 */
									readonly id?: number
									readonly links?: Record<string, unknown>
									/** @example My repo */
									readonly name?: string
									readonly origin?: {
										readonly archived?: boolean
										/** @example main */
										readonly defaultBranch?: string
										/** @example My repo description */
										readonly description?: string
										readonly forkable?: boolean
										/** @example e3c939f9ef4a7fae272e */
										readonly hierarchyId?: string
										/** Format: int32 */
										readonly id?: number
										readonly links?: Record<string, unknown>
										/** @example My repo */
										readonly name?: string
										/** Format: int32 */
										readonly partition?: number
										readonly project?: {
											readonly avatar?: string
											readonly avatarUrl?: string
											/** @example The description for my cool project */
											readonly description?: string
											/** Format: int32 */
											readonly id?: number
											/** @example PRJ */
											readonly key: string
											readonly links?: Record<string, unknown>
											/** @example My Cool Project */
											readonly name?: string
											readonly public?: boolean
											/** @example PROJECT */
											readonly scope?: string
											/** @enum {string} */
											readonly type?: "NORMAL" | "PERSONAL"
										}
										readonly public?: boolean
										readonly relatedLinks?: Record<string, unknown>
										/** @example git */
										readonly scmId?: string
										/** @example REPOSITORY */
										readonly scope?: string
										/** @example my-repo */
										readonly slug?: string
										/** @enum {string} */
										readonly state?:
											| "AVAILABLE"
											| "INITIALISATION_FAILED"
											| "INITIALISING"
											| "OFFLINE"
										/** @example Available */
										readonly statusMessage?: string
									}
									/** Format: int32 */
									readonly partition?: number
									readonly project?: {
										readonly avatar?: string
										readonly avatarUrl?: string
										/** @example The description for my cool project */
										readonly description?: string
										/** Format: int32 */
										readonly id?: number
										/** @example PRJ */
										readonly key: string
										readonly links?: Record<string, unknown>
										/** @example My Cool Project */
										readonly name?: string
										readonly public?: boolean
										/** @example PROJECT */
										readonly scope?: string
										/** @enum {string} */
										readonly type?: "NORMAL" | "PERSONAL"
									}
									readonly public?: boolean
									readonly relatedLinks?: Record<string, unknown>
									/** @example git */
									readonly scmId?: string
									/** @example REPOSITORY */
									readonly scope?: string
									/** @example my-repo */
									readonly slug?: string
									/** @enum {string} */
									readonly state?:
										| "AVAILABLE"
										| "INITIALISATION_FAILED"
										| "INITIALISING"
										| "OFFLINE"
									/** @example Available */
									readonly statusMessage?: string
								}
								/** @enum {string} */
								readonly type?: "BRANCH" | "TAG"
							}
							readonly htmlDescription?: string
							/**
							 * Format: int64
							 * @example 1
							 */
							readonly id?: number
							readonly links?: Record<string, unknown>
							readonly locked?: boolean
							readonly open?: boolean
							readonly participants?: readonly components["schemas"]["RestPullRequestParticipant"][]
							readonly reviewers?: readonly components["schemas"]["RestPullRequestParticipant"][]
							/** @enum {string} */
							readonly state?: "DECLINED" | "MERGED" | "OPEN"
							/** @example Talking Nerdy */
							readonly title?: string
							readonly toRef?: {
								/** @example feature-ABC-1233 */
								readonly displayId?: string
								/** @example refs/heads/feature-ABC-123 */
								readonly id?: string
								/** @example babecafebabecafebabecafebabecafebabecafe */
								readonly latestCommit?: string
								readonly repository?: {
									readonly archived?: boolean
									/** @example main */
									readonly defaultBranch?: string
									/** @example My repo description */
									readonly description?: string
									readonly forkable?: boolean
									/** @example e3c939f9ef4a7fae272e */
									readonly hierarchyId?: string
									/** Format: int32 */
									readonly id?: number
									readonly links?: Record<string, unknown>
									/** @example My repo */
									readonly name?: string
									readonly origin?: {
										readonly archived?: boolean
										/** @example main */
										readonly defaultBranch?: string
										/** @example My repo description */
										readonly description?: string
										readonly forkable?: boolean
										/** @example e3c939f9ef4a7fae272e */
										readonly hierarchyId?: string
										/** Format: int32 */
										readonly id?: number
										readonly links?: Record<string, unknown>
										/** @example My repo */
										readonly name?: string
										/** Format: int32 */
										readonly partition?: number
										readonly project?: {
											readonly avatar?: string
											readonly avatarUrl?: string
											/** @example The description for my cool project */
											readonly description?: string
											/** Format: int32 */
											readonly id?: number
											/** @example PRJ */
											readonly key: string
											readonly links?: Record<string, unknown>
											/** @example My Cool Project */
											readonly name?: string
											readonly public?: boolean
											/** @example PROJECT */
											readonly scope?: string
											/** @enum {string} */
											readonly type?: "NORMAL" | "PERSONAL"
										}
										readonly public?: boolean
										readonly relatedLinks?: Record<string, unknown>
										/** @example git */
										readonly scmId?: string
										/** @example REPOSITORY */
										readonly scope?: string
										/** @example my-repo */
										readonly slug?: string
										/** @enum {string} */
										readonly state?:
											| "AVAILABLE"
											| "INITIALISATION_FAILED"
											| "INITIALISING"
											| "OFFLINE"
										/** @example Available */
										readonly statusMessage?: string
									}
									/** Format: int32 */
									readonly partition?: number
									readonly project?: {
										readonly avatar?: string
										readonly avatarUrl?: string
										/** @example The description for my cool project */
										readonly description?: string
										/** Format: int32 */
										readonly id?: number
										/** @example PRJ */
										readonly key: string
										readonly links?: Record<string, unknown>
										/** @example My Cool Project */
										readonly name?: string
										readonly public?: boolean
										/** @example PROJECT */
										readonly scope?: string
										/** @enum {string} */
										readonly type?: "NORMAL" | "PERSONAL"
									}
									readonly public?: boolean
									readonly relatedLinks?: Record<string, unknown>
									/** @example git */
									readonly scmId?: string
									/** @example REPOSITORY */
									readonly scope?: string
									/** @example my-repo */
									readonly slug?: string
									/** @enum {string} */
									readonly state?:
										| "AVAILABLE"
										| "INITIALISATION_FAILED"
										| "INITIALISING"
										| "OFFLINE"
									/** @example Available */
									readonly statusMessage?: string
								}
								/** @enum {string} */
								readonly type?: "BRANCH" | "TAG"
							}
							/**
							 * Format: int64
							 * @example 14490759200
							 */
							readonly updatedDate?: number
							/** Format: int32 */
							readonly version?: number
						}
						readonly srcPath?: {
							/** @example [
							 *       "path",
							 *       "to",
							 *       "file.txt"
							 *     ] */
							readonly components?: readonly string[]
							/** @example txt */
							readonly extension?: string
							/** @example file.txt */
							readonly name?: string
							/** @example path/to */
							readonly parent?: string
						}
						/** @example 3cdd5d19178a54d2e51b5098d43b57571241d0ab */
						readonly toHash?: string
					}
					readonly anchored?: boolean
					readonly author?: {
						readonly active?: boolean
						readonly avatarUrl?: string
						/** @example Jane Citizen */
						readonly displayName?: string
						/** @example jane@example.com */
						readonly emailAddress?: string
						/**
						 * Format: int32
						 * @example 101
						 */
						readonly id?: number
						readonly links?: Record<string, unknown>
						/** @example jcitizen */
						readonly name?: string
						/** @example jcitizen */
						readonly slug?: string
						/** @enum {string} */
						readonly type?: "NORMAL" | "SERVICE"
					}
					readonly comments?: readonly components["schemas"]["RestComment"][]
					/**
					 * Format: int64
					 * @example 1359075920
					 */
					readonly createdDate?: number
					readonly html?: string
					/**
					 * Format: int64
					 * @example 1
					 */
					readonly id?: number
					readonly pending?: boolean
					readonly properties?: Record<string, unknown>
					readonly reply?: boolean
					/**
					 * Format: int64
					 * @example 1239075920
					 */
					readonly resolvedDate?: number
					readonly resolver?: {
						readonly active?: boolean
						readonly avatarUrl?: string
						/** @example Jane Citizen */
						readonly displayName?: string
						/** @example jane@example.com */
						readonly emailAddress?: string
						/**
						 * Format: int32
						 * @example 101
						 */
						readonly id?: number
						readonly links?: Record<string, unknown>
						/** @example jcitizen */
						readonly name?: string
						/** @example jcitizen */
						readonly slug?: string
						/** @enum {string} */
						readonly type?: "NORMAL" | "SERVICE"
					}
					/** @example NORMAL */
					readonly severity?: string
					/** @example OPEN */
					readonly state?: string
					/** @example An insightful comment. */
					readonly text?: string
					/** @description Indicates if this comment thread has been marked as resolved or not */
					readonly threadResolved?: boolean
					/**
					 * Format: int64
					 * @example 1569075920
					 */
					readonly threadResolvedDate?: number
					readonly threadResolver?: {
						readonly active?: boolean
						readonly avatarUrl?: string
						/** @example Jane Citizen */
						readonly displayName?: string
						/** @example jane@example.com */
						readonly emailAddress?: string
						/**
						 * Format: int32
						 * @example 101
						 */
						readonly id?: number
						readonly links?: Record<string, unknown>
						/** @example jcitizen */
						readonly name?: string
						/** @example jcitizen */
						readonly slug?: string
						/** @enum {string} */
						readonly type?: "NORMAL" | "SERVICE"
					}
					/**
					 * Format: int64
					 * @example 1449075920
					 */
					readonly updatedDate?: number
					/**
					 * Format: int32
					 * @example 1
					 */
					readonly version?: number
				}
				readonly pending?: boolean
				readonly properties?: Record<string, unknown>
				readonly reply?: boolean
				/**
				 * Format: int64
				 * @example 1239075920
				 */
				readonly resolvedDate?: number
				readonly resolver?: {
					readonly active?: boolean
					readonly avatarUrl?: string
					/** @example Jane Citizen */
					readonly displayName?: string
					/** @example jane@example.com */
					readonly emailAddress?: string
					/**
					 * Format: int32
					 * @example 101
					 */
					readonly id?: number
					readonly links?: Record<string, unknown>
					/** @example jcitizen */
					readonly name?: string
					/** @example jcitizen */
					readonly slug?: string
					/** @enum {string} */
					readonly type?: "NORMAL" | "SERVICE"
				}
				/** @example NORMAL */
				readonly severity?: string
				/** @example OPEN */
				readonly state?: string
				/** @example An insightful comment. */
				readonly text?: string
				/** @description Indicates if this comment thread has been marked as resolved or not */
				readonly threadResolved?: boolean
				/**
				 * Format: int64
				 * @example 1569075920
				 */
				readonly threadResolvedDate?: number
				readonly threadResolver?: {
					readonly active?: boolean
					readonly avatarUrl?: string
					/** @example Jane Citizen */
					readonly displayName?: string
					/** @example jane@example.com */
					readonly emailAddress?: string
					/**
					 * Format: int32
					 * @example 101
					 */
					readonly id?: number
					readonly links?: Record<string, unknown>
					/** @example jcitizen */
					readonly name?: string
					/** @example jcitizen */
					readonly slug?: string
					/** @enum {string} */
					readonly type?: "NORMAL" | "SERVICE"
				}
				/**
				 * Format: int64
				 * @example 1449075920
				 */
				readonly updatedDate?: number
				/**
				 * Format: int32
				 * @example 1
				 */
				readonly version?: number
			}
			readonly emoticon?: {
				readonly shortcut?: string
				readonly url?: string
				readonly value?: string
			}
			readonly user?: {
				readonly active?: boolean
				readonly avatarUrl?: string
				/** @example Jane Citizen */
				readonly displayName?: string
				/** @example jane@example.com */
				readonly emailAddress?: string
				/**
				 * Format: int32
				 * @example 101
				 */
				readonly id?: number
				readonly links?: Record<string, unknown>
				/** @example jcitizen */
				readonly name?: string
				/** @example jcitizen */
				readonly slug?: string
				/** @enum {string} */
				readonly type?: "NORMAL" | "SERVICE"
			}
		}
		readonly RestWebhook: {
			readonly active?: boolean
			readonly configuration?: Record<string, unknown>
			readonly credentials?: components["schemas"]["RestWebhookCredentials"]
			readonly events?: readonly string[]
			readonly name?: string
			readonly scopeType?: string
			readonly sslVerificationRequired?: boolean
			readonly statistics?: Record<string, unknown>
			readonly url?: string
		}
		readonly RestWebhookCredentials: {
			readonly password?: string
			readonly username?: string
		}
		readonly RestWebhookRequestResponse: unknown
		readonly RestWebhookScope: {
			readonly id?: string
			readonly type?: string
		}
		readonly RestX509Certificate: {
			/**
			 * @description The SHA-256 fingerprint of the X.509 certificate
			 * @example e5e8d632c0b86f5bd5ef9a0d55c58ba1fd7776f6bb7c35ca23d85d23281ce58f
			 */
			readonly fingerprint?: string
			/**
			 * Format: int64
			 * @description The ID of the X.509 certificate
			 * @example 7
			 */
			readonly id?: number
		}
		readonly Scope: {
			/** Format: int32 */
			readonly resourceId?: number
			/** @enum {string} */
			readonly type?: "GLOBAL" | "PROJECT" | "REPOSITORY"
		}
		readonly SimpleSshKeyFingerprint: {
			readonly algorithm?: string
			readonly value?: string
		}
		readonly UserAndGroups: {
			/** @example [
			 *       "group_a",
			 *       "group_b"
			 *     ] */
			readonly groups: readonly string[]
			/** @example user */
			readonly user?: string
		}
		readonly UserPasswordUpdate: {
			/** @example my-old-secret-password */
			readonly oldPassword?: string
			/** @example my-secret-password */
			readonly password?: string
			/** @example my-secret-password */
			readonly passwordConfirm?: string
		}
		readonly UserPickerContext: {
			/** @example group_a */
			readonly context?: string
			/** @example user_a */
			readonly itemName?: string
		}
		readonly UserRename: {
			/** @example jcitizen */
			readonly name?: string
			/** @example jcitizen-new */
			readonly newName?: string
		}
		readonly UserUpdate: {
			/** @example Jane Citizen */
			readonly displayName?: string
			/** @example jane@example.com */
			readonly email?: string
			/** @example jcitizen */
			readonly name?: string
		}
	}
	responses: never
	parameters: never
	requestBodies: never
	headers: never
	pathItems: never
}
export type SchemaAdminPasswordUpdate =
	components["schemas"]["AdminPasswordUpdate"]
export type SchemaApplicationId = components["schemas"]["ApplicationId"]
export type SchemaApplicationUser = components["schemas"]["ApplicationUser"]
export type SchemaComment = components["schemas"]["Comment"]
export type SchemaCommentable = components["schemas"]["Commentable"]
export type SchemaCommentOperations = components["schemas"]["CommentOperations"]
export type SchemaCommentThread = components["schemas"]["CommentThread"]
export type SchemaCommentThreadDiffAnchor =
	components["schemas"]["CommentThreadDiffAnchor"]
export type SchemaContext = components["schemas"]["Context"]
export type SchemaCredentials = components["schemas"]["Credentials"]
export type SchemaDiffContentFilter = components["schemas"]["DiffContentFilter"]
export type SchemaEnrichedRepository =
	components["schemas"]["EnrichedRepository"]
export type SchemaExampleAvatarMultipartFormData =
	components["schemas"]["ExampleAvatarMultipartFormData"]
export type SchemaExampleCertificateMultipartFormData =
	components["schemas"]["ExampleCertificateMultipartFormData"]
export type SchemaExampleFiles = components["schemas"]["ExampleFiles"]
export type SchemaExampleJsonLastModifiedCallback =
	components["schemas"]["ExampleJsonLastModifiedCallback"]
export type SchemaExampleMultipartFormData =
	components["schemas"]["ExampleMultipartFormData"]
export type SchemaExamplePostMultipartFormData =
	components["schemas"]["ExamplePostMultipartFormData"]
export type SchemaExamplePreviewMigration =
	components["schemas"]["ExamplePreviewMigration"]
export type SchemaExamplePutMultipartFormData =
	components["schemas"]["ExamplePutMultipartFormData"]
export type SchemaExampleRequirements =
	components["schemas"]["ExampleRequirements"]
export type SchemaExampleSettings = components["schemas"]["ExampleSettings"]
export type SchemaExampleSettingsMap =
	components["schemas"]["ExampleSettingsMap"]
export type SchemaExampleSocketAddress =
	components["schemas"]["ExampleSocketAddress"]
export type SchemaExampleStatus = components["schemas"]["ExampleStatus"]
export type SchemaFileListResource = components["schemas"]["FileListResource"]
export type SchemaFilePart = components["schemas"]["FilePart"]
export type SchemaGroup = components["schemas"]["Group"]
export type SchemaGroupAndUsers = components["schemas"]["GroupAndUsers"]
export type SchemaGroupPickerContext =
	components["schemas"]["GroupPickerContext"]
export type SchemaOptionalBodyBeanParam =
	components["schemas"]["OptionalBodyBeanParam"]
export type SchemaPageRequestImpl = components["schemas"]["PageRequestImpl"]
export type SchemaProject = components["schemas"]["Project"]
export type SchemaPropertyMap = components["schemas"]["PropertyMap"]
export type SchemaPullRequest = components["schemas"]["PullRequest"]
export type SchemaPullRequestParticipant =
	components["schemas"]["PullRequestParticipant"]
export type SchemaPullRequestRef = components["schemas"]["PullRequestRef"]
export type SchemaRefType = components["schemas"]["RefType"]
export type SchemaRepository = components["schemas"]["Repository"]
export type SchemaRepositoryHookDetails =
	components["schemas"]["RepositoryHookDetails"]
export type SchemaRestAccessToken = components["schemas"]["RestAccessToken"]
export type SchemaRestAccessTokenRequest =
	components["schemas"]["RestAccessTokenRequest"]
export type SchemaRestAggregateRejectCounter =
	components["schemas"]["RestAggregateRejectCounter"]
export type SchemaRestAnalyticsSettings =
	components["schemas"]["RestAnalyticsSettings"]
export type SchemaRestAnnouncementBanner =
	components["schemas"]["RestAnnouncementBanner"]
export type SchemaRestApplicationProperties =
	components["schemas"]["RestApplicationProperties"]
export type SchemaRestApplicationUser =
	components["schemas"]["RestApplicationUser"]
export type SchemaRestApplicationUserWithPermissions =
	components["schemas"]["RestApplicationUserWithPermissions"]
export type SchemaRestApplySuggestionRequest =
	components["schemas"]["RestApplySuggestionRequest"]
export type SchemaRestAttachmentMetadata =
	components["schemas"]["RestAttachmentMetadata"]
export type SchemaRestAuthenticationRequest =
	components["schemas"]["RestAuthenticationRequest"]
export type SchemaRestAutoDeclineSettings =
	components["schemas"]["RestAutoDeclineSettings"]
export type SchemaRestAutoDeclineSettingsRequest =
	components["schemas"]["RestAutoDeclineSettingsRequest"]
export type SchemaRestAutoMergeProcessingResult =
	components["schemas"]["RestAutoMergeProcessingResult"]
export type SchemaRestAutoMergeProjectSettingsRequest =
	components["schemas"]["RestAutoMergeProjectSettingsRequest"]
export type SchemaRestAutoMergeRequest =
	components["schemas"]["RestAutoMergeRequest"]
export type SchemaRestAutoMergeRestrictedSettings =
	components["schemas"]["RestAutoMergeRestrictedSettings"]
export type SchemaRestAutoMergeSettingsRequest =
	components["schemas"]["RestAutoMergeSettingsRequest"]
export type SchemaRestBearerTokenCredentials =
	components["schemas"]["RestBearerTokenCredentials"]
export type SchemaRestBitbucketLicense =
	components["schemas"]["RestBitbucketLicense"]
export type SchemaRestBranch = components["schemas"]["RestBranch"]
export type SchemaRestBranchCreateRequest =
	components["schemas"]["RestBranchCreateRequest"]
export type SchemaRestBranchDeleteRequest =
	components["schemas"]["RestBranchDeleteRequest"]
export type SchemaRestBuildCapabilities =
	components["schemas"]["RestBuildCapabilities"]
export type SchemaRestBuildStats = components["schemas"]["RestBuildStats"]
export type SchemaRestBuildStatus = components["schemas"]["RestBuildStatus"]
export type SchemaRestBuildStatusSetRequest =
	components["schemas"]["RestBuildStatusSetRequest"]
export type SchemaRestBulkAddInsightAnnotationRequest =
	components["schemas"]["RestBulkAddInsightAnnotationRequest"]
export type SchemaRestBulkUserRateLimitSettingsUpdateRequest =
	components["schemas"]["RestBulkUserRateLimitSettingsUpdateRequest"]
export type SchemaRestChange = components["schemas"]["RestChange"]
export type SchemaRestChangeset = components["schemas"]["RestChangeset"]
export type SchemaRestClusterInformation =
	components["schemas"]["RestClusterInformation"]
export type SchemaRestClusterNode = components["schemas"]["RestClusterNode"]
export type SchemaRestComment = components["schemas"]["RestComment"]
export type SchemaRestCommentJiraIssue =
	components["schemas"]["RestCommentJiraIssue"]
export type SchemaRestCommentThreadDiffAnchor =
	components["schemas"]["RestCommentThreadDiffAnchor"]
export type SchemaRestCommit = components["schemas"]["RestCommit"]
export type SchemaRestCommitMessageSuggestion =
	components["schemas"]["RestCommitMessageSuggestion"]
export type SchemaRestConflict = components["schemas"]["RestConflict"]
export type SchemaRestConflictChange =
	components["schemas"]["RestConflictChange"]
export type SchemaRestConnectivitySummary =
	components["schemas"]["RestConnectivitySummary"]
export type SchemaRestCreateBranchRequest =
	components["schemas"]["RestCreateBranchRequest"]
export type SchemaRestCreateTagRequest =
	components["schemas"]["RestCreateTagRequest"]
export type SchemaRestDefaultBranch = components["schemas"]["RestDefaultBranch"]
export type SchemaRestDefaultReviewersRequest =
	components["schemas"]["RestDefaultReviewersRequest"]
export type SchemaRestDefaultTask = components["schemas"]["RestDefaultTask"]
export type SchemaRestDefaultTaskRequest =
	components["schemas"]["RestDefaultTaskRequest"]
export type SchemaRestDeployment = components["schemas"]["RestDeployment"]
export type SchemaRestDeploymentEnvironment =
	components["schemas"]["RestDeploymentEnvironment"]
export type SchemaRestDeploymentSetRequest =
	components["schemas"]["RestDeploymentSetRequest"]
export type SchemaRestDetailedGroup = components["schemas"]["RestDetailedGroup"]
export type SchemaRestDetailedInvocation =
	components["schemas"]["RestDetailedInvocation"]
export type SchemaRestDetailedUser = components["schemas"]["RestDetailedUser"]
export type SchemaRestDiff = components["schemas"]["RestDiff"]
export type SchemaRestDiffHunk = components["schemas"]["RestDiffHunk"]
export type SchemaRestDiffLine = components["schemas"]["RestDiffLine"]
export type SchemaRestDiffSegment = components["schemas"]["RestDiffSegment"]
export type SchemaRestDiffStatsSummary =
	components["schemas"]["RestDiffStatsSummary"]
export type SchemaRestEmoticon = components["schemas"]["RestEmoticon"]
export type SchemaRestEnhancedEntityLink =
	components["schemas"]["RestEnhancedEntityLink"]
export type SchemaRestErasedUser = components["schemas"]["RestErasedUser"]
export type SchemaRestErrorMessage = components["schemas"]["RestErrorMessage"]
export type SchemaRestErrors = components["schemas"]["RestErrors"]
export type SchemaRestExportRequest = components["schemas"]["RestExportRequest"]
export type SchemaRestFarmSynchronizationRequest =
	components["schemas"]["RestFarmSynchronizationRequest"]
export type SchemaRestGitTagCreateRequest =
	components["schemas"]["RestGitTagCreateRequest"]
export type SchemaRestGpgKey = components["schemas"]["RestGpgKey"]
export type SchemaRestGpgSubKey = components["schemas"]["RestGpgSubKey"]
export type SchemaRestHookScript = components["schemas"]["RestHookScript"]
export type SchemaRestHookScriptConfig =
	components["schemas"]["RestHookScriptConfig"]
export type SchemaRestHookScriptTriggers =
	components["schemas"]["RestHookScriptTriggers"]
export type SchemaRestImportRequest = components["schemas"]["RestImportRequest"]
export type SchemaRestInsightAnnotation =
	components["schemas"]["RestInsightAnnotation"]
export type SchemaRestInsightAnnotationsResponse =
	components["schemas"]["RestInsightAnnotationsResponse"]
export type SchemaRestInsightReport = components["schemas"]["RestInsightReport"]
export type SchemaRestInsightReportData =
	components["schemas"]["RestInsightReportData"]
export type SchemaRestInvocationHistory =
	components["schemas"]["RestInvocationHistory"]
export type SchemaRestInvocationRequest =
	components["schemas"]["RestInvocationRequest"]
export type SchemaRestInvocationResult =
	components["schemas"]["RestInvocationResult"]
export type SchemaRestJiraIssue = components["schemas"]["RestJiraIssue"]
export type SchemaRestJob = components["schemas"]["RestJob"]
export type SchemaRestJobMessage = components["schemas"]["RestJobMessage"]
export type SchemaRestLabel = components["schemas"]["RestLabel"]
export type SchemaRestLabelable = components["schemas"]["RestLabelable"]
export type SchemaRestLogLevel = components["schemas"]["RestLogLevel"]
export type SchemaRestMailConfiguration =
	components["schemas"]["RestMailConfiguration"]
export type SchemaRestMarkup = components["schemas"]["RestMarkup"]
export type SchemaRestMeshConnectivityReport =
	components["schemas"]["RestMeshConnectivityReport"]
export type SchemaRestMeshMigrationQueueStateCounts =
	components["schemas"]["RestMeshMigrationQueueStateCounts"]
export type SchemaRestMeshMigrationRequest =
	components["schemas"]["RestMeshMigrationRequest"]
export type SchemaRestMeshMigrationSummary =
	components["schemas"]["RestMeshMigrationSummary"]
export type SchemaRestMeshNode = components["schemas"]["RestMeshNode"]
export type SchemaRestMigrationRepository =
	components["schemas"]["RestMigrationRepository"]
export type SchemaRestMinimalCommit = components["schemas"]["RestMinimalCommit"]
export type SchemaRestMinimalRef = components["schemas"]["RestMinimalRef"]
export type SchemaRestMirroredRepository =
	components["schemas"]["RestMirroredRepository"]
export type SchemaRestMirroredRepositoryDescriptor =
	components["schemas"]["RestMirroredRepositoryDescriptor"]
export type SchemaRestMirrorHashes = components["schemas"]["RestMirrorHashes"]
export type SchemaRestMirroringRequest =
	components["schemas"]["RestMirroringRequest"]
export type SchemaRestMirrorRepositorySynchronizationStatus =
	components["schemas"]["RestMirrorRepositorySynchronizationStatus"]
export type SchemaRestMirrorServer = components["schemas"]["RestMirrorServer"]
export type SchemaRestMirrorUpgradeRequest =
	components["schemas"]["RestMirrorUpgradeRequest"]
export type SchemaRestMultilineCommentMarker =
	components["schemas"]["RestMultilineCommentMarker"]
export type SchemaRestMultipleBuildStats =
	components["schemas"]["RestMultipleBuildStats"]
export type SchemaRestNamedLink = components["schemas"]["RestNamedLink"]
export type SchemaRestNode = components["schemas"]["RestNode"]
export type SchemaRestNodeConnectivityReport =
	components["schemas"]["RestNodeConnectivityReport"]
export type SchemaRestNodeConnectivitySummary =
	components["schemas"]["RestNodeConnectivitySummary"]
export type SchemaRestPageRestChange =
	components["schemas"]["RestPageRestChange"]
export type SchemaRestPath = components["schemas"]["RestPath"]
export type SchemaRestPermitted = components["schemas"]["RestPermitted"]
export type SchemaRestPermittedGroup =
	components["schemas"]["RestPermittedGroup"]
export type SchemaRestPermittedUser = components["schemas"]["RestPermittedUser"]
export type SchemaRestPerson = components["schemas"]["RestPerson"]
export type SchemaRestProgress = components["schemas"]["RestProgress"]
export type SchemaRestProject = components["schemas"]["RestProject"]
export type SchemaRestProjectSettingsRestriction =
	components["schemas"]["RestProjectSettingsRestriction"]
export type SchemaRestProjectSettingsRestrictionRequest =
	components["schemas"]["RestProjectSettingsRestrictionRequest"]
export type SchemaRestProperties = components["schemas"]["RestProperties"]
export type SchemaRestPullRequest = components["schemas"]["RestPullRequest"]
export type SchemaRestPullRequestActivity =
	components["schemas"]["RestPullRequestActivity"]
export type SchemaRestPullRequestAssignParticipantRoleRequest =
	components["schemas"]["RestPullRequestAssignParticipantRoleRequest"]
export type SchemaRestPullRequestAssignStatusRequest =
	components["schemas"]["RestPullRequestAssignStatusRequest"]
export type SchemaRestPullRequestCommitMessageTemplate =
	components["schemas"]["RestPullRequestCommitMessageTemplate"]
export type SchemaRestPullRequestCondition =
	components["schemas"]["RestPullRequestCondition"]
export type SchemaRestPullRequestDeclineRequest =
	components["schemas"]["RestPullRequestDeclineRequest"]
export type SchemaRestPullRequestDeleteRequest =
	components["schemas"]["RestPullRequestDeleteRequest"]
export type SchemaRestPullRequestFinishReviewRequest =
	components["schemas"]["RestPullRequestFinishReviewRequest"]
export type SchemaRestPullRequestMergeability =
	components["schemas"]["RestPullRequestMergeability"]
export type SchemaRestPullRequestMergeConfig =
	components["schemas"]["RestPullRequestMergeConfig"]
export type SchemaRestPullRequestMergeRequest =
	components["schemas"]["RestPullRequestMergeRequest"]
export type SchemaRestPullRequestMergeStrategy =
	components["schemas"]["RestPullRequestMergeStrategy"]
export type SchemaRestPullRequestParticipant =
	components["schemas"]["RestPullRequestParticipant"]
export type SchemaRestPullRequestRebaseability =
	components["schemas"]["RestPullRequestRebaseability"]
export type SchemaRestPullRequestRebaseRequest =
	components["schemas"]["RestPullRequestRebaseRequest"]
export type SchemaRestPullRequestRebaseResult =
	components["schemas"]["RestPullRequestRebaseResult"]
export type SchemaRestPullRequestRef =
	components["schemas"]["RestPullRequestRef"]
export type SchemaRestPullRequestReopenRequest =
	components["schemas"]["RestPullRequestReopenRequest"]
export type SchemaRestPullRequestSettings =
	components["schemas"]["RestPullRequestSettings"]
export type SchemaRestPullRequestSuggestion =
	components["schemas"]["RestPullRequestSuggestion"]
export type SchemaRestPushRefChange = components["schemas"]["RestPushRefChange"]
export type SchemaRestRateLimitSettings =
	components["schemas"]["RestRateLimitSettings"]
export type SchemaRestRawAccessToken =
	components["schemas"]["RestRawAccessToken"]
export type SchemaRestRefChange = components["schemas"]["RestRefChange"]
export type SchemaRestRefMatcher = components["schemas"]["RestRefMatcher"]
export type SchemaRestRefMatcherType =
	components["schemas"]["RestRefMatcherType"]
export type SchemaRestRefRestriction =
	components["schemas"]["RestRefRestriction"]
export type SchemaRestRefSyncQueue = components["schemas"]["RestRefSyncQueue"]
export type SchemaRestRefSyncRequest =
	components["schemas"]["RestRefSyncRequest"]
export type SchemaRestRefSyncStatus = components["schemas"]["RestRefSyncStatus"]
export type SchemaRestRejectedRef = components["schemas"]["RestRejectedRef"]
export type SchemaRestRelatedLinks = components["schemas"]["RestRelatedLinks"]
export type SchemaRestRepositoriesExportRequest =
	components["schemas"]["RestRepositoriesExportRequest"]
export type SchemaRestRepository = components["schemas"]["RestRepository"]
export type SchemaRestRepositoryHook =
	components["schemas"]["RestRepositoryHook"]
export type SchemaRestRepositoryHookVeto =
	components["schemas"]["RestRepositoryHookVeto"]
export type SchemaRestRepositoryLockOwner =
	components["schemas"]["RestRepositoryLockOwner"]
export type SchemaRestRepositoryMirrorEvent =
	components["schemas"]["RestRepositoryMirrorEvent"]
export type SchemaRestRepositoryPolicy =
	components["schemas"]["RestRepositoryPolicy"]
export type SchemaRestRepositoryPullRequestSettings =
	components["schemas"]["RestRepositoryPullRequestSettings"]
export type SchemaRestRepositoryRefChangeActivity =
	components["schemas"]["RestRepositoryRefChangeActivity"]
export type SchemaRestRepositorySelector =
	components["schemas"]["RestRepositorySelector"]
export type SchemaRestRequiredBuildCondition =
	components["schemas"]["RestRequiredBuildCondition"]
export type SchemaRestRequiredBuildConditionSetRequest =
	components["schemas"]["RestRequiredBuildConditionSetRequest"]
export type SchemaRestRestrictionRequest =
	components["schemas"]["RestRestrictionRequest"]
export type SchemaRestReviewerGroup = components["schemas"]["RestReviewerGroup"]
export type SchemaRestRollingUpgradeState =
	components["schemas"]["RestRollingUpgradeState"]
export type SchemaRestScope = components["schemas"]["RestScope"]
export type SchemaRestScopesExample = components["schemas"]["RestScopesExample"]
export type SchemaRestSecretScanningAllowlistRule =
	components["schemas"]["RestSecretScanningAllowlistRule"]
export type SchemaRestSecretScanningAllowlistRuleSetRequest =
	components["schemas"]["RestSecretScanningAllowlistRuleSetRequest"]
export type SchemaRestSecretScanningRule =
	components["schemas"]["RestSecretScanningRule"]
export type SchemaRestSecretScanningRuleSetRequest =
	components["schemas"]["RestSecretScanningRuleSetRequest"]
export type SchemaRestSetInsightReportRequest =
	components["schemas"]["RestSetInsightReportRequest"]
export type SchemaRestSingleAddInsightAnnotationRequest =
	components["schemas"]["RestSingleAddInsightAnnotationRequest"]
export type SchemaRestSshAccessKey = components["schemas"]["RestSshAccessKey"]
export type SchemaRestSshAccessKeyLocations =
	components["schemas"]["RestSshAccessKeyLocations"]
export type SchemaRestSshCredentials =
	components["schemas"]["RestSshCredentials"]
export type SchemaRestSshKey = components["schemas"]["RestSshKey"]
export type SchemaRestSshKeySettings =
	components["schemas"]["RestSshKeySettings"]
export type SchemaRestSshKeyTypeRestriction =
	components["schemas"]["RestSshKeyTypeRestriction"]
export type SchemaRestSshSettings = components["schemas"]["RestSshSettings"]
export type SchemaRestSyncProgress = components["schemas"]["RestSyncProgress"]
export type SchemaRestSystemSigningConfiguration =
	components["schemas"]["RestSystemSigningConfiguration"]
export type SchemaRestTag = components["schemas"]["RestTag"]
export type SchemaRestTestResults = components["schemas"]["RestTestResults"]
export type SchemaRestTokenBucketSettings =
	components["schemas"]["RestTokenBucketSettings"]
export type SchemaRestUpstreamServer =
	components["schemas"]["RestUpstreamServer"]
export type SchemaRestUpstreamSettings =
	components["schemas"]["RestUpstreamSettings"]
export type SchemaRestUserDirectory = components["schemas"]["RestUserDirectory"]
export type SchemaRestUsernamePasswordCredentials =
	components["schemas"]["RestUsernamePasswordCredentials"]
export type SchemaRestUserRateLimitSettings =
	components["schemas"]["RestUserRateLimitSettings"]
export type SchemaRestUserRateLimitSettingsUpdateRequest =
	components["schemas"]["RestUserRateLimitSettingsUpdateRequest"]
export type SchemaRestUserReaction = components["schemas"]["RestUserReaction"]
export type SchemaRestWebhook = components["schemas"]["RestWebhook"]
export type SchemaRestWebhookCredentials =
	components["schemas"]["RestWebhookCredentials"]
export type SchemaRestWebhookRequestResponse =
	components["schemas"]["RestWebhookRequestResponse"]
export type SchemaRestWebhookScope = components["schemas"]["RestWebhookScope"]
export type SchemaRestX509Certificate =
	components["schemas"]["RestX509Certificate"]
export type SchemaScope = components["schemas"]["Scope"]
export type SchemaSimpleSshKeyFingerprint =
	components["schemas"]["SimpleSshKeyFingerprint"]
export type SchemaUserAndGroups = components["schemas"]["UserAndGroups"]
export type SchemaUserPasswordUpdate =
	components["schemas"]["UserPasswordUpdate"]
export type SchemaUserPickerContext = components["schemas"]["UserPickerContext"]
export type SchemaUserRename = components["schemas"]["UserRename"]
export type SchemaUserUpdate = components["schemas"]["UserUpdate"]
export type $defs = Record<string, never>
export interface operations {
	readonly getAllAccessTokens: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A response containing a page of access tokens and associated details. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestAccessToken"][]
					}
				}
			}
			/** @description The currently authenticated user is not permitted to get access tokens for this project or authentication failed. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createAccessToken: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		/** @description The request containing the details of the access token to create. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestAccessTokenRequest"]
			}
		}
		readonly responses: {
			/** @description A response containing the raw access token and associated details. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRawAccessToken"]
				}
			}
			/** @description One of the following error cases occurred (check the error message for more details).
			 *
			 *     - The request does not contain a token name
			 *     - The request does not contain a list of permissions, or the list of permissions is empty
			 *     - One of the provided permission levels are unknown
			 *     - The project already has the maximum number of tokens
			 *      */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not permitted to create an access token for this project or authentication failed. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getById: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The token id. */
				readonly tokenId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A response containing the access token and associated details. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestAccessToken"]
				}
			}
			/** @description The currently authenticated user is not permitted to get access tokens on behalf of this user or authentication failed. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user or token does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateAccessToken: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The token id. */
				readonly tokenId: string
			}
			readonly cookie?: never
		}
		/** @description The request containing the details of the access token to modify */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestAccessTokenRequest"]
			}
		}
		readonly responses: {
			/** @description A response containing the updated access token and associated details. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestAccessToken"]
				}
			}
			/** @description One of the provided permission levels are unknown. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not permitted to update an access token on behalf of this user or authentication failed. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteById: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The token id. */
				readonly tokenId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description An empty response indicating that the token has been deleted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user is not permitted to delete an access token on behalf of this user or authentication failed. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user or token does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAllAccessTokens_1: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A response containing a page of access tokens and associated details. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestAccessToken"][]
					}
				}
			}
			/** @description The currently authenticated user is not permitted to get access tokens for this repository or authentication failed. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createAccessToken_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The request containing the details of the access token to create. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestAccessTokenRequest"]
			}
		}
		readonly responses: {
			/** @description A response containing the raw access token and associated details. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRawAccessToken"]
				}
			}
			/** @description One of the following error cases occurred (check the error message for more details).
			 *
			 *     - The request does not contain a token name- The request does not contain a list of permissions, or the list of permissions is empty- One of the provided permission levels are unknown- The repository already has the maximum number of tokens */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not permitted to create an access token for this repository or authentication failed. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getById_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
				/** @description The token id. */
				readonly tokenId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A response containing the access token and associated details. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestAccessToken"]
				}
			}
			/** @description The currently authenticated user is not permitted to get access tokens on behalf of this user or authentication failed. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user or token does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateAccessToken_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
				/** @description The token id. */
				readonly tokenId: string
			}
			readonly cookie?: never
		}
		/** @description The request containing the details of the access token to modify */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestAccessTokenRequest"]
			}
		}
		readonly responses: {
			/** @description A response containing the updated access token and associated details. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestAccessToken"]
				}
			}
			/** @description One of the provided permission levels are unknown. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not permitted to update an access token on behalf of this user or authentication failed. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteById_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
				/** @description The token id. */
				readonly tokenId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description An empty response indicating that the token has been deleted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user is not permitted to delete an access token on behalf of this user or authentication failed. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user or token does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAllAccessTokens_2: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The user slug. */
				readonly userSlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A response containing a page of access tokens and associated details. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestAccessToken"][]
					}
				}
			}
			/** @description The currently authenticated user is not permitted to get access tokens on behalf of this user or authentication failed. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createAccessToken_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The user slug. */
				readonly userSlug: string
			}
			readonly cookie?: never
		}
		/** @description The request containing the details of the access token to create. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestAccessTokenRequest"]
			}
		}
		readonly responses: {
			/** @description A response containing the raw access token and associated details. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRawAccessToken"]
				}
			}
			/** @description One of the following error cases occurred (check the error message for more details).
			 *
			 *     - The request does not contain a token name
			 *     - The request does not contain a list of permissions, or the list of permissions is empty
			 *     - One of the provided permission levels are unknown
			 *     - The user already has their maximum number of tokens
			 *      */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not permitted to create an access token on behalf of this user or authentication failed */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getById_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The token id. */
				readonly tokenId: string
				/** @description The user slug. */
				readonly userSlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A response containing the access token and associated details. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestAccessToken"]
				}
			}
			/** @description The currently authenticated user is not permitted to get access tokens on behalf of this user or authentication failed. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user or token does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateAccessToken_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The token id. */
				readonly tokenId: string
				/** @description The user slug. */
				readonly userSlug: string
			}
			readonly cookie?: never
		}
		/** @description The request containing the details of the access token to modify */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestAccessTokenRequest"]
			}
		}
		readonly responses: {
			/** @description A response containing the updated access token and associated details. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestAccessToken"]
				}
			}
			/** @description One of the provided permission levels are unknown. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not permitted to update an access token on behalf of this user or authentication failed. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteById_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The token id. */
				readonly tokenId: string
				/** @description The user slug. */
				readonly userSlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description An empty response indicating that the token has been deleted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user is not permitted to delete an access token on behalf of this user or authentication failed. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user or token does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getGlobalSettings: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The global ssh key settings configuration. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSshKeySettings"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the ssh keys global settings configuration. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateGlobalSettings: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description A request containing expiry length to be set for SSH keys and a list of SSH key type restrictions. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestSshKeySettings"]
			}
		}
		readonly responses: {
			/** @description The ssh key global settings were updated. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The request was invalid, which may be due to:
			 *
			 *
			 *     - attempted to set expiry to less than 1 day
			 *     - attempted to set expiry using partial days
			 *     - attempted to set a restriction on a key type which was invalid
			 *
			 *
			 *     The exact reason for the error will be provided in the error message. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to update these settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getSupportedKeyTypes: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A list of supported SSH key algorithms and lengths. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve this list. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getBanner: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The requested banner */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestAnnouncementBanner"]
				}
			}
			/** @description There is no banner to display */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The user does not have permission to access the banner service through this endpoint */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setBanner: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": {
					/** @enum {string} */
					readonly audience: "ALL" | "AUTHENTICATED"
					readonly enabled?: boolean
					readonly message?: string
				}
			}
		}
		readonly responses: {
			/** @description The banner was set successfully */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description There was malformed or incorrect data in the provided JSON */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The user does not have permission to access the banner service through this endpoint */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteBanner: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The query executed successfully, whether a banner was deleted or not */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The user does not have permission to access the banner service through this endpoint */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getInformation: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A response containing information about the cluster */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestClusterInformation"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the cluster information. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getDefaultBranch: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The configured global default branch. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description No global default branch has been configured. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setDefaultBranch: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": {
					readonly id?: string
				}
			}
		}
		readonly responses: {
			/** @description The default branch has been set. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The current user does not have sufficient permissions to configure the global default branch. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly clearDefaultBranch: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The default branch has been cleared. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The current user does not have sufficient permissions to clear the global default branch. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getControlPlanePublicKey: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The control plane PEM. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "text/plain": unknown
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestErrors"]
				}
			}
		}
	}
	readonly connectivity: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The connectivity report between the Bitbucket node(s) and Mesh node(s). */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMeshConnectivityReport"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAllRegisteredMeshNodes: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The list of registered Mesh nodes. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMeshNode"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly registerNewMeshNode: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description The request specifying the new Mesh node. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestMeshNode"]
			}
		}
		readonly responses: {
			/** @description The newly registered Mesh node. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMeshNode"]
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRegisteredMeshNodeById: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the Mesh node. */
				readonly id: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The Mesh node that matches the ID. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMeshNode"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The Mesh node does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateMeshNode: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the Mesh node to update. */
				readonly id: string
			}
			readonly cookie?: never
		}
		/** @description The request specifying the updated Mesh node. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestMeshNode"]
			}
		}
		readonly responses: {
			/** @description The updated Mesh node. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMeshNode"]
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly delete_2: {
		readonly parameters: {
			readonly query?: {
				readonly force?: boolean
			}
			readonly header?: never
			readonly path: {
				readonly id: number
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description default response */
			readonly default: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json;charset=UTF-8": unknown
				}
			}
		}
	}
	readonly getSupportZips: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The support zips for all the Mesh nodes. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/octet-stream": unknown
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestErrors"]
				}
			}
		}
	}
	readonly getSupportZip: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the Mesh node. */
				readonly id: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The support zip for the Mesh node that matches the ID. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/octet-stream": unknown
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestErrors"]
				}
			}
			/** @description The Mesh node does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestErrors"]
				}
			}
		}
	}
	readonly getGroups_1: {
		readonly parameters: {
			readonly query?: {
				/** @description If specified only group names containing the supplied string will be returned. */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of groups. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestDetailedGroup"][]
					}
				}
			}
			/** @description The currently authenticated user is not a licensed user. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createGroup: {
		readonly parameters: {
			readonly query: {
				/** @description Name of the group. */
				readonly name: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The newly created group. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestDetailedGroup"]
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not an administrator. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description A group with this name already exists. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteGroup: {
		readonly parameters: {
			readonly query: {
				/** @description The name identifying the group to delete. */
				readonly name: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The deleted group. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestDetailedGroup"]
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user does not have the <strong>ADMIN</strong> permission. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as the authenticated user has a lower permission level than the group being deleted. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified group does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would lower the authenticated user's permission level. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly addUserToGroup: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["UserPickerContext"]
			}
		}
		readonly responses: {
			/** @description The user was added to the group. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The authenticated user does not have the <strong>ADMIN</strong> permission. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would exceed the server's licensing limit, or the groups permissions exceed the authenticated user's permission level. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user or group does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly addUsersToGroup: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["GroupAndUsers"]
			}
		}
		readonly responses: {
			/** @description <em>All</em> the users were added to the group */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The authenticated user does not have the <strong>ADMIN</strong> permission. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would exceed the server's licensing limit, or the groups permissions exceed the authenticated user's permission level. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user or group does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly findUsersInGroup: {
		readonly parameters: {
			readonly query: {
				/** @description The group which should be used to locate members. */
				readonly context: string
				/** @description If specified only users with usernames, display names or email addresses containing the supplied string will be returned. */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of users. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestDetailedUser"][]
					}
				}
			}
			/** @description The currently authenticated user is not a licensed user. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly findUsersNotInGroup: {
		readonly parameters: {
			readonly query: {
				/** @description The group which should be used to locate members. */
				readonly context: string
				/** @description If specified only users with usernames, display names or email addresses containing the supplied string will be returned. */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of users. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestDetailedUser"][]
					}
				}
			}
			/** @description The currently authenticated user is not a licensed user. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly removeUserFromGroup: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["UserPickerContext"]
			}
		}
		readonly responses: {
			/** @description The user was removed from the group. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The authenticated user does not have the <strong>ADMIN</strong> permission. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as the group has a higher permission level than the context user. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user or group does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly get_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The currently-installed license. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestBitbucketLicense"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the license, or the request is anonymous. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description No license has been installed. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateLicense: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description a JSON payload containing the encoded license to apply */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestBitbucketLicense"]
			}
		}
		readonly responses: {
			/** @description The newly-installed license. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestBitbucketLicense"]
				}
			}
			/** @description No encoded license was provided in the JSON body for the POST. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to update the license. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The encoded license could not be decoded, or it is not valid for use on this server. Some possible reasons a license may not be applied include: it may be for a different product, it may have already expired, or this Bitbucket version doesn't support Server licenses. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getMailConfig: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The mail configuration */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMailConfiguration"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the mail configuration. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The mail server hasn't been configured */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setMailConfig: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": {
					/** @example smtp.example.com */
					readonly hostname?: string
					/** @example password */
					readonly password?: string
					/**
					 * Format: int32
					 * @example 465
					 */
					readonly port?: number
					/** @enum {string} */
					readonly protocol?: "SMTP" | "SMTPS"
					readonly requireStartTls?: boolean
					/** @example stash-no-reply@company.com */
					readonly senderAddress?: string
					/** @example user */
					readonly username?: string
					readonly useStartTls?: boolean
				}
			}
		}
		readonly responses: {
			/** @description The updated mail configuration. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMailConfiguration"]
				}
			}
			/** @description The mail configuration was not updated due to a validation error. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to update themail configuration. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteMailConfig: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The mail configuration was successfully deleted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete the mail server configuration. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getSenderAddress: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The server email address */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description he currently authenticated user has insufficient permissions to retrieve the server email address. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setSenderAddress: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": string
			}
		}
		readonly responses: {
			/** @description The from address used in notification emails */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The server email address was not updated due to a validation error. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to update the server email address. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly clearSenderAddress: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description he server email address was successfully cleared. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions toclear the server email address. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getGroupsWithAnyPermission: {
		readonly parameters: {
			readonly query?: {
				/** @description If specified only group names containing the supplied string will be returned */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of groups and their highest global permissions. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestPermittedGroup"][]
					}
				}
			}
			/** @description The currently authenticated user is not an administrator. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setPermissionForGroups: {
		readonly parameters: {
			readonly query: {
				/** @description The names of the groups */
				readonly name: readonly string[]
				/** @description The permission to grant */
				readonly permission:
					| "ADMIN"
					| "LICENSED_USER"
					| "PROJECT_CREATE"
					| "SYS_ADMIN"
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The specified permission was granted to the specified user. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The request was malformed or the specified permission does not exist. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not an administrator or doesn't have the
			 *     specified permission they are attempting to grant. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would exceed the server's license limits. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified group does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would reduce the currently authenticated user's
			 *     permission level or the currently authenticated user has a lower permission
			 *     level than the group they are attempting to modify. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly revokePermissionsForGroup: {
		readonly parameters: {
			readonly query: {
				/** @description The name of the group */
				readonly name: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description All global permissions were revoked from the group. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description TThe currently authenticated user is not an administrator. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified group does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would reduce the currently authenticated user's
			 *     permission level or the currently authenticated user has a lower permission
			 *     level than the group they are attempting to modify. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getGroupsWithoutAnyPermission: {
		readonly parameters: {
			readonly query?: {
				/** @description If specified only user names containing the supplied string will be returned */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of groups that have not been granted any global permissions. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestDetailedGroup"][]
					}
				}
			}
			/** @description The currently authenticated user is not an administrator. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getUsersWithAnyPermission: {
		readonly parameters: {
			readonly query?: {
				/** @description If specified only user names containing the supplied string will be returned */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of users and their highest global permissions. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestPermittedGroup"][]
					}
				}
			}
			/** @description The currently authenticated user is not an administrator. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setPermissionForUsers: {
		readonly parameters: {
			readonly query: {
				/** @description The names of the users */
				readonly name: readonly string[]
				/** @description The permission to grant */
				readonly permission:
					| "ADMIN"
					| "LICENSED_USER"
					| "PROJECT_CREATE"
					| "SYS_ADMIN"
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The requested permission was granted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The request was malformed or the specified permission does not exist. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not an administrator or doesn't have the
			 *     specified permission they are attempting to grant. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would exceed the server's license limits. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would reduce the currently authenticated user's
			 *     permission level or the currently authenticated user has a lower permission
			 *     level than the user they are attempting to modify. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly revokePermissionsForUser: {
		readonly parameters: {
			readonly query: {
				/** @description The name of the user */
				readonly name: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description All global permissions were revoked from the user. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user is not an administrator. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would reduce the currently authenticated user's
			 *     permission level or the currently authenticated user has a lower permission
			 *     level than the user they are attempting to modify. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getUsersWithoutAnyPermission: {
		readonly parameters: {
			readonly query?: {
				/** @description If specified only user names containing the supplied string will be returned */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of users that have not been granted any global permissions. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestApplicationUser"][]
					}
				}
			}
			/** @description The currently authenticated user is not an administrator. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getMergeConfig: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the id of the scm to get strategies for */
				readonly scmId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The merge configuration of this instance. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequestMergeConfig"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to see the request repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The request repository does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setMergeConfig: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the id of the scm to get strategies for */
				readonly scmId: string
			}
			readonly cookie?: never
		}
		/** @description the settings */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestPullRequestSettings"]
			}
		}
		readonly responses: {
			/** @description The repository pull request merge strategies for the context repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequestMergeConfig"]
				}
			}
			/** @description The repository pull request merge strategies were not updated due to a validation error. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to administrate thespecified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Setting or deleting merge configurations isn't supported on archived repositories. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getHistory: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description An optional sort category to arrange the results in descending order */
				readonly order?: "FREQUENCY" | "NEWEST"
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A response containing a page of aggregated counters for users who have been recently rate limited. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestAggregateRejectCounter"][]
					}
				}
			}
			/** @description The sort query parameter is invalid. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve rate limit history. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getSettings_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A response containing the rate limit plugin settings for the instance. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRateLimitSettings"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve rate limit settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setSettings_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description Sets the rate limit settings for the instance.
		 *
		 *     The authenticated user must have <strong>ADMIN</strong> permission to call this resource. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestRateLimitSettings"]
			}
		}
		readonly responses: {
			/** @description A response containing the updated rate limit plugin settings for the instance. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRateLimitSettings"]
				}
			}
			/** @description One of the following error cases occurred (check the error message for more details):
			 *
			 *     - The request is empty
			 *     - The enabled field of the request is not a boolean
			 *     - The defaultSettings field of the request does not contain both capacity and fillRate
			 *     - The capacity and fillRate are not positive integers
			 *
			 *
			 *      */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to set rate limit settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAllRateLimitSettings: {
		readonly parameters: {
			readonly query?: {
				/** @description Optional filter */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A response containing all the user-specific rate limit settings filtered by the optional filter. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestUserRateLimitSettings"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve rate limit settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly set_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestBulkUserRateLimitSettingsUpdateRequest"]
			}
		}
		readonly responses: {
			/** @description A response containing the updated user settings. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestUserRateLimitSettings"]
				}
			}
			/** @description One of the following valid state error cases occurred (check the error message for more details):
			 *
			 *     - The request is empty
			 *     - No users are provided in the request
			 *     - One or more of the users are invalid
			 *     - Whitelisted is false or not provided, and no settings are provided either
			 *     - Whitelisted is false or not provided, settings are provided,   but do not contain both capacity and fillRate
			 *     - Whitelisted is false or not provided, settings are provided,   but capacity and fillRate are not positive integers
			 *     - Whitelisted is true, and settings are provided (only one must be provided)
			 *      */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to set user settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly get_6: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The user slug. */
				readonly userSlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A response containing the user-specific rate limit settings for the given user. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestUserRateLimitSettings"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve rate limit settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user does not exist, or has no settings. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly set_3: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The user slug. */
				readonly userSlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestUserRateLimitSettingsUpdateRequest"]
			}
		}
		readonly responses: {
			/** @description A response containing the updated user settings */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestUserRateLimitSettings"]
				}
			}
			/** @description One of the following valid state error cases occurred (check the error message for more details):
			 *
			 *     - The request is empty
			 *     - Whitelisted is false or not provided, and no settings are provided either
			 *     - Whitelisted is false or not provided, settings are provided,   but do not contain both capacity and fillRate
			 *     - Whitelisted is false or not provided, settings are provided,   but capacity and fillRate are not positive integers
			 *     - Whitelisted is true, and settings are provided (only one must be provided)
			 *
			 *
			 *      */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to set user settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly delete_8: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The user slug. */
				readonly userSlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description An empty response indicating that the user settings have been deleted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve rate limit settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user does not exist, or has no settings. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getUserDirectories: {
		readonly parameters: {
			readonly query?: {
				/** @description Set <code>true</code> to include inactive directories; otherwise, <code>false</code> to only return active directories. */
				readonly includeInactive?: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A list of directories */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestUserDirectory"]
				}
			}
			/** @description The currently authenticated user is not an administrator */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getUsers_1: {
		readonly parameters: {
			readonly query?: {
				/** @description If specified only users with usernames, display name or email addresses containing the supplied string will be returned. */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of users. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestDetailedUser"][]
					}
				}
			}
			/** @description The currently authenticated user is not a licensed user. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateUserDetails: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["UserUpdate"]
			}
		}
		readonly responses: {
			/** @description The updated user. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestDetailedUser"]
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user does not have the <strong>ADMIN</strong> permission or has a lower permission level than the user being updated. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createUser: {
		readonly parameters: {
			readonly query: {
				/** @description Set <code>true</code> to add the user to the default group, which can be used to grant them a set of initial permissions; otherwise, <code>false</code> to not add them to a group. */
				readonly addToDefaultGroup?: boolean
				/** @description The display name for the new user. */
				readonly displayName: string
				/** @description The e-mail address for the new user. */
				readonly emailAddress: string
				/** @description The username for the new user. */
				readonly name: string
				/** @description If present and not <code>false</code> instead of requiring a password, the create user will be notified via email their account has been created and requires a password to be reset. This option can only be used if a mail server has been configured. */
				readonly notify?: boolean
				/** @description The password for the new user. Required if the <code>notify</code> parameter is not present or is set to <code>false</false> */
				readonly password?: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The user was successfully created. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user is not an administrator. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Adding the user to the default group would exceed the server's license limit. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Another user with the same name already exists. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteUser: {
		readonly parameters: {
			readonly query: {
				/** @description The username identifying the user to delete. */
				readonly name: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The deleted user. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestDetailedUser"]
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user does not have the <strong>ADMIN</strong> permission. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as the authenticated user has a lower permission level than the user being deleted. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as a user can not delete themselves. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly addGroupToUser: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["GroupPickerContext"]
			}
		}
		readonly responses: {
			/** @description The user was added to the group */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The authenticated user does not have the <strong>ADMIN</strong> permission. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would exceed the server's licensing limit, or the groups permissions exceed the authenticated user's permission level. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user or group does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly addUserToGroups: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["UserAndGroups"]
			}
		}
		readonly responses: {
			/** @description The user was added to <em>all</em> the groups */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The authenticated user does not have the <strong>ADMIN</strong> permission. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would exceed the server's licensing limit, or the groups permissions exceed the authenticated user's permission level. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user or group does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly clearUserCaptchaChallenge: {
		readonly parameters: {
			readonly query: {
				/** @description The username */
				readonly name: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The CAPTCHA was successfully cleared. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user does not have the <strong>ADMIN</strong> permission. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as the authenticated user has a lower permission level than the user to clear captcha for. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateUserPassword: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["AdminPasswordUpdate"]
			}
		}
		readonly responses: {
			/** @description The user's password was successfully updated. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user does not have the <strong>ADMIN</strong> permission or has a lower permission level than the user having their password updated. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly validateErasable: {
		readonly parameters: {
			readonly query: {
				/** @description The username of the user to validate erasability for. */
				readonly name: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description the user is erasable */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The request was malformed (e.g. if no username was supplied). */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user does not have the <strong>ADMIN</strong> permission or has a lower permission level than the user being erased. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The requested username does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The requested username is the username of a not deleted user. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly eraseUser: {
		readonly parameters: {
			readonly query: {
				/** @description The username identifying the user to erase. */
				readonly name: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The identifier of the erased user. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestErasedUser"]
				}
			}
			/** @description The request was malformed (e.g. if no username was supplied). */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user does not have the <strong>ADMIN</strong> permission or has a lower permission level than the user being erased. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The requested username does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The requested username is the username of a not deleted user. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly findGroupsForUser: {
		readonly parameters: {
			readonly query: {
				/** @description The group which should be used to locate members. */
				readonly context: string
				/** @description If specified only users with usernames, display names or email addresses containing the supplied string will be returned. */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of users. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestDetailedUser"][]
					}
				}
			}
			/** @description The currently authenticated user is not a licensed user. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly findOtherGroupsForUser: {
		readonly parameters: {
			readonly query: {
				/** @description The user which should be used to locate groups. */
				readonly context: string
				/** @description If specified only groups with names containing the supplied string will be returned. */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of groups. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestDetailedGroup"][]
					}
				}
			}
			/** @description The currently authenticated user is not a licensed user. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly removeGroupFromUser: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["GroupPickerContext"]
			}
		}
		readonly responses: {
			/** @description The user was removed from the group. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The authenticated user does not have the <strong>ADMIN</strong> permission. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as the group has a higher permission level than the context user. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user or group does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly renameUser: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["UserRename"]
			}
		}
		readonly responses: {
			/** @description The renamed user. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestDetailedUser"]
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user does not have the <strong>ADMIN</strong> permission or has a lower permission level than the user being renamed. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getApplicationProperties: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The application properties */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestApplicationProperties"]
				}
			}
		}
	}
	readonly getCapabilities: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description capabilities */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestBuildCapabilities"]
				}
			}
		}
	}
	readonly getPullRequestSuggestions: {
		readonly parameters: {
			readonly query?: {
				/** @description restrict pull request suggestions to be based on events that occurred since some timein the past. This is expressed in seconds since "now". So to return suggestionsbased only on activity within the past 48 hours, pass a value of 172800. */
				readonly changesSince?: string
				/** @description restricts the result set to return at most this many suggestions. */
				readonly limit?: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of pull requests that match the search criteria. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestPullRequestSuggestion"][]
					}
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The current user is not authenticated */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getPullRequests_1: {
		readonly parameters: {
			readonly query?: {
				/** @description (optional, defaults to returning pull requests regardless of closed since date). Permits returning only pull requests with a closed timestamp set more recently that (now - closedSince). Units are in seconds. So for example if closed since 86400 is set only pull requests closed in the previous 24 hours will be returned. */
				readonly closedSince?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description (optional, defaults to <strong>NEWEST</strong>) the order/(s) to return pull requests in; can choose from <strong>OLDEST</strong> (as in: "oldest first"), <strong>NEWEST</strong>, <strong>DRAFT_STATUS</strong>, <strong>PARTICIPANT_STATUS</strong>, and/or <strong>CLOSED_DATE</strong>. Where <strong>CLOSED_DATE</strong> is specified and the result set includes pull requests that are not in the closed state, these pull requests will appear first in the result set, followed by most recently closed pull requests. */
				readonly order?: string
				/** @description (optional, defaults to returning pull requests with any participant status). A comma separated list of participant status. That is, one or more of <strong>UNAPPROVED</strong>, <strong>NEEDS_WORK</strong>, or <strong>APPROVED</strong>. */
				readonly participantStatus?: string
				/** @description (optional, defaults to returning pull requests for any role). If a role is supplied only pull requests where the authenticated user is a participant in the given role will be returned. Either <strong>REVIEWER</strong>, <strong>AUTHOR</strong> or <strong>PARTICIPANT</strong>. */
				readonly role?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description (optional, defaults to returning pull requests in any state). If a state is supplied only pull requests in the specified state will be returned. Either <strong>OPEN</strong>, <strong>DECLINED</strong> or <strong>MERGED</strong>. Omit this parameter to return pull request in any state. */
				readonly state?: string
				/** @description The name of the involved user, defaults to the current user. */
				readonly user?: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of pull requests that match the search criteria. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestPullRequest"][]
					}
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The current user is not authenticated */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getCapabilities_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description capabilities */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description This instance of Bitbucket Data Center does not support deployments (for example, it has been disabled using the property 'plugin.deployment.capability.disabled'). */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getGroups: {
		readonly parameters: {
			readonly query?: {
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of group names. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly string[]
					}
				}
			}
			/** @description The currently authenticated user is not a project administrator. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createHookScript: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description The multipart form data containing the hook script */
		readonly requestBody?: {
			readonly content: {
				readonly "multipart/form-data": components["schemas"]["ExamplePostMultipartFormData"]
			}
		}
		readonly responses: {
			/** @description The newly created hook script. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestHookScript"]
				}
			}
			/** @description The hook script was not created due to a validation error. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getHookScript: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the hook script to retrieve */
				readonly scriptId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The hook script. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestHookScript"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The hook script ID supplied does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateHookScript: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the hook script */
				readonly scriptId: string
			}
			readonly cookie?: never
		}
		/** @description The multipart form data containing the hook script */
		readonly requestBody?: {
			readonly content: {
				readonly "*/*": components["schemas"]["ExamplePutMultipartFormData"]
			}
		}
		readonly responses: {
			/** @description The updated hook script. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestHookScript"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The hook script ID supplied does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description A hook script with the same name already exists. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description One or more fields to update must be specified: content, description and/or name. */
			readonly 422: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteHookScript: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the hook script to delete */
				readonly scriptId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The hook script was deleted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Unable to find the supplied hook script ID. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly read: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the hook script */
				readonly scriptId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The hook script content. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The currently authenticated user has insufficient permissions. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The hook script ID supplied does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAvatar: {
		readonly parameters: {
			readonly query?: {
				/** @description (optional) Version used for HTTP caching only - any non-blank version will result in a large max-age Cache-Control header. Note that this does not affect the Last-Modified header. */
				readonly version?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The complete module key of the hook module. */
				readonly hookKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The avatar of the project matching the supplied <strong>moduleKey</strong>. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getPullRequests_2: {
		readonly parameters: {
			readonly query?: {
				readonly limit?: number
				readonly role?: string
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description default response */
			readonly default: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json;charset=UTF-8": unknown
				}
			}
		}
	}
	readonly getPullRequestCount: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description default response */
			readonly default: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json;charset=UTF-8": unknown
				}
			}
		}
	}
	readonly getLabels: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description (optional) prefix to filter the labels on. */
				readonly prefix?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Page of returned labels. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestLabel"][]
					}
				}
			}
			/** @description The user is currently not authenticated. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getLabel: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the label name */
				readonly labelName: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The label. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestLabel"]
				}
			}
			/** @description The user is currently not authenticated. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified label does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getLabelables: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description  the type of labelables to be returned. Supported values: REPOSITORY */
				readonly type?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The page of labelables. */
				readonly labelName: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The page of labelables. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestLabelable"][]
					}
				}
			}
			/** @description The type of labelable is incorrect, correct values are REPOSITORY. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the labelables */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified label does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getLevel: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The name of the logger. */
				readonly loggerName: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The log level of the logger. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestLogLevel"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the log level. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setLevel: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The level to set the logger to. Either TRACE, DEBUG, INFO, WARN or ERROR */
				readonly levelName: string
				/** @description The name of the logger. */
				readonly loggerName: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The log level was successfully changed. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The log level was invalid. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to set the log level. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRootLevel: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The log level of the logger. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestLogLevel"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the log level. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setRootLevel: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the level to set the logger to. Either TRACE, DEBUG, INFO, WARN or ERROR */
				readonly levelName: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The log level was successfully changed. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The log level was invalid. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to set the log level. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly preview: {
		readonly parameters: {
			readonly query?: {
				/** @description (Optional) Whether the markup implementation should convert newlines to breaks. By default this is false which reflects the standard markdown specification. */
				readonly hardwrap?: string
				/** @description (Optional) true if HTML should be escaped in the input markup, false otherwise. */
				readonly htmlEscape?: string
				/** @description (Optional) true if headers should contain an ID based on the heading content. */
				readonly includeHeadingId?: string
				/** @description (Optional) The mode to use when building URLs. One of: ABSOLUTE, RELATIVE or, CONFIGURED. By default this is RELATIVE. */
				readonly urlMode?: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "*/*": string
			}
		}
		readonly responses: {
			/** @description The rendered markdown. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMarkup"]
				}
			}
			/** @description The markdown was invalid. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions preview rendered markdown. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly startExport: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description The request */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestExportRequest"]
			}
		}
		readonly responses: {
			/** @description Details about the export job. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestJob"]
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to start anexport */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The export could not be started because the limit of concurrent migration jobs has been reached. */
			readonly 503: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getExportJob: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the ID of the job */
				readonly jobId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The job, including status and progress information. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestJob"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve information about this job. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified job does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly cancelExportJob: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the ID of the job to cancel */
				readonly jobId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The job has successfully been marked for cancellation */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to cancel this job. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified job does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The job was in a state that does not allow cancellation, e.g. it has already finished. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getExportJobMessages: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description The severity to include in the results */
				readonly severity?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description The subject */
				readonly subject?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The ID of the job */
				readonly jobId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The messages generated by this job. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestJobMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve information about this job. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified job does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly previewExport: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description the export request */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestExportRequest"]
			}
		}
		readonly responses: {
			/** @description The effectively selected projects and repositories. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestScopesExample"]
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to generate a preview. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly startImport: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description The request */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestImportRequest"]
			}
		}
		readonly responses: {
			/** @description Details about the export job. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestJob"]
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to start an import. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The import could not be started because the limit of concurrent migration jobs has been reached. */
			readonly 503: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getImportJob: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the job */
				readonly jobId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The job, including status and progress information. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestJob"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve information about this job. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified job does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly cancelImportJob: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the ID of the job to cancel */
				readonly jobId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The job has successfully been marked for cancellation. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to cancel this job. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified job does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The job was in a state that does not allow cancellation, e.g. it has already finished. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getImportJobMessages: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description The severity to include in the results */
				readonly severity?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description The subject */
				readonly subject?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The ID of the job */
				readonly jobId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The messages generated by this job. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestJobMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve information about this job. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified job does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly startMeshMigration: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": {
					readonly all?: boolean
					readonly maxBytesPerSecond?: {
						/** Format: int64 */
						readonly asLong?: number
						readonly present?: boolean
					}
					readonly projectIds?: readonly number[]
					readonly repositoryIds?: readonly number[]
				}
			}
		}
		readonly responses: {
			/** @description The started job */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestJob"]
				}
			}
			/** @description The migration request failed one/more validation checks. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description A migration job is already in progress */
			readonly 503: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getMeshMigrationJob: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the job */
				readonly jobId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The details of the migration job. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The job ID parameter was not supplied. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified job ID does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly cancelMeshMigrationJob: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the job to cancel */
				readonly jobId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The migration job was successfully marked for cancellation. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified job ID does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The migration job has already been canceled or finished. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getMeshMigrationJobMessages: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description The severity to include in the results */
				readonly severity?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description The subject */
				readonly subject?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The ID of the job */
				readonly jobId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The details of the migration job. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestJobMessage"][]
					}
				}
			}
			/** @description The job ID parameter was not supplied. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified job ID does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getMeshMigrationJobSummary: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the job */
				readonly jobId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The summary of the migration job. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMeshMigrationSummary"]
				}
			}
			/** @description The job ID parameter was not supplied. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified job ID does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly previewMeshMigration: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description The export request */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestMeshMigrationRequest"]
			}
		}
		readonly responses: {
			/** @description Enumeration of projects and repositories that would be migrated for a given request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["ExamplePreviewMigration"]
				}
			}
			/** @description The request was invalid or missing. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly searchMeshMigrationRepos: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description (optional) The currently active migration job. If not passed, this is looked up internally. */
				readonly migrationId?: string
				/** @description (optional) The repository name */
				readonly name?: string
				/** @description (optional) The project key. Can be specified more than once to filter by more than one project. */
				readonly projectKey?: string
				/** @description (optional) Whether the repository has been fully migrated to Mesh. If not present, all repositories are considered regardless of where they're located. */
				readonly remote?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description (optional) If a migration is active, the MeshMigrationQueueState state to filter results by. Can be specified more than once to filter by more than one state. */
				readonly state?: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of repositories matching the specified criteria. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestMigrationRepository"][]
					}
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description No migration job with the given ID exists. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAllMeshMigrationSummaries: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The summary of the migration job. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestMeshMigrationSummary"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getActiveMeshMigrationSummary: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The summary of the currently active migration job. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMeshMigrationSummary"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description No active migration job found. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRepositoriesRecentlyAccessed: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description (optional) If specified, it must be a valid repository permission level name and will limit the resulting repository list to ones that the requesting user has the specified permission level to. If not specified, the default <code>REPO_READ</code> permission level will be assumed. */
				readonly permission?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of recently accessed repositories. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestRepository"][]
					}
				}
			}
			/** @description The permission level is unknown or not related to repository. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The request is unauthenticated. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getProjects: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description Name to filter by. */
				readonly name?: string
				/** @description Permission to filter by */
				readonly permission?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of projects. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestProject"][]
					}
				}
			}
			/** @description The permission level is unknown or not related to projects. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createProject: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description The project. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestProject"]
			}
		}
		readonly responses: {
			/** @description The newly created project. */
			readonly 201: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestProject"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to update the project. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to create a project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The project key or name is already in use. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getProject: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The project matching the supplied <strong>projectKey</strong>. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestProject"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateProject: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		/** @description Project parameters to update. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestProject"]
			}
		}
		readonly responses: {
			/** @description The updated project. The project's key <strong>was not</strong> updated. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestProject"]
				}
			}
			/** @description The updated project. The project's key <strong>was</strong> updated. */
			readonly 201: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestProject"]
				}
			}
			/** @description The project was not updated due to a validation error. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to update the project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteProject: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The project matching the supplied <strong>projectKey</strong> was deleted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete the project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The project can not be deleted as it contains repositories. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getProjectAvatar: {
		readonly parameters: {
			readonly query?: {
				/** @description The desired size of the image. The server will return an image as close as possible to the specified size. */
				readonly s?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The avatar of the project matching the supplied <strong>projectKey</strong>. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly uploadAvatar: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		/** @description The mutlipart form data containing the file. */
		readonly requestBody?: {
			readonly content: {
				readonly "multipart/form-data": components["schemas"]["ExampleAvatarMultipartFormData"]
			}
		}
		readonly responses: {
			/** @description The avatar was uploaded successfully. */
			readonly 201: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The currently authenticated user has insufficient permissions to update the project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getConfigurations: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of hook scripts. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestHookScriptConfig"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the specified project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setConfiguration: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the hook script */
				readonly scriptId: string
			}
			readonly cookie?: never
		}
		/** @description The hook triggers for which the hook script should be run */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestHookScriptTriggers"]
			}
		}
		readonly responses: {
			/** @description The updated hook script. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestHookScriptConfig"]
				}
			}
			/** @description The hook script was not created/updated due to a validation error. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the specified project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The project key supplied does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly removeConfiguration: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the hook script */
				readonly scriptId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The hook script was successfully deleted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to view the specified project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The project key or hook script ID supplied does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly revokePermissions: {
		readonly parameters: {
			readonly query?: {
				/** @description The names of the groups */
				readonly group?: string
				/** @description The names of the users */
				readonly user?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description All project permissions were revoked from the users and groups for the specified project. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description No permissions were revoked because the request was invalid. No users or groups were provided. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The currently authenticated user is not an administrator for the specifiedspecified project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist, or one or more of the users or groups provided does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would revoke the currently authenticated user's permission on the project. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly hasAllUserPermission: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The permission to grant. Available project permissions are:
				 *
				 *     - PROJECT_READ
				 *     - PROJECT_WRITE
				 *     - PROJECT_ADMIN
				 *
				 *
				 *      */
				readonly permission: string
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A simple entity indicating whether the specified permission is the defaultpermission for this project. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPermitted"]
				}
			}
			/** @description The request was malformed or the specified permission does not exist. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not an administrator for the specifiedspecified project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would reduce the currently authenticated user'spermission level. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly modifyAllUserPermission: {
		readonly parameters: {
			readonly query?: {
				/** @description <em>true</em> to grant the specified permission to all users, or <em>false</em> to revoke it */
				readonly allow?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The permission to grant. Available project permissions are:
				 *
				 *     - PROJECT_READ
				 *     - PROJECT_WRITE
				 *     - PROJECT_ADMIN
				 *
				 *
				 *      */
				readonly permission: string
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The requested permission was successfully granted or revoked. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The request was malformed or the specified permission does not exist. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not an administrator for the specified project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getGroupsWithAnyPermission_1: {
		readonly parameters: {
			readonly query?: {
				/** @description If specified only group names containing the supplied string will be returned */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of groups and their highest permissions for the specified project. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestPermittedGroup"][]
					}
				}
			}
			/** @description The currently authenticated user is not a project administrator for the specified project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setPermissionForGroups_1: {
		readonly parameters: {
			readonly query?: {
				/** @description The names of the groups */
				readonly name?: string
				/** @description The permission to grant.See the [permissions documentation](https://confluence.atlassian.com/display/BitbucketServer/Using+project+permissions)for a detailed explanation of what each permission entails. Available project permissions are:
				 *
				 *     - PROJECT_READ
				 *     - PROJECT_WRITE
				 *     - PROJECT_ADMIN
				 *
				 *
				 *      */
				readonly permission?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The requested permission was granted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The request was malformed or the specified permission does not exist. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not an administrator for the specifiedspecified project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would reduce the currently authenticated user'spermission level. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly revokePermissionsForGroup_1: {
		readonly parameters: {
			readonly query?: {
				/** @description The name of the group */
				readonly name?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description All project permissions were revoked from the group for the specified project. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user is not an administrator for the specifiedspecified project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description  The action was disallowed as it would reduce the currently authenticated user'spermission level. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getGroupsWithoutAnyPermission_1: {
		readonly parameters: {
			readonly query?: {
				/** @description If specified only group names containing the supplied string will be returned */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of groups that have not been granted any permissions for the specifiedproject. */
			readonly 202: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestDetailedGroup"][]
					}
				}
			}
			/** @description The currently authenticated user is not a project administrator for thespecified project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly searchPermissions: {
		readonly parameters: {
			readonly query?: {
				/** @description Name of the user or group to filter the name of */
				readonly filterText?: string
				/** @description Permissions to filter by. See the [permissions documentation](https://confluence.atlassian.com/display/BitbucketServer/Using+project+permissions)for a detailed explanation of what each permission entails. This parameter can be specified multiple times to filter by more than one permission, and can contain global and project permissions.
				 *
				 *      */
				readonly permission?: string
				/** @description Type of entity (user or group)Valid entity types are:
				 *
				 *     - USER- GROUP */
				readonly type?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description default response */
			readonly default: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json;charset=UTF-8": unknown
				}
			}
		}
	}
	readonly getUsersWithAnyPermission_1: {
		readonly parameters: {
			readonly query?: {
				/** @description If specified only user names containing the supplied string will be returned */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of users and their highest permissions for the specified project. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestPermittedUser"][]
					}
				}
			}
			/** @description The currently authenticated user is not a project administrator for thespecified project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setPermissionForUsers_1: {
		readonly parameters: {
			readonly query?: {
				/** @description The names of the users */
				readonly name?: string
				/** @description The permission to grant.See the [permissions documentation](https://confluence.atlassian.com/display/BitbucketServer/Using+project+permissions)for a detailed explanation of what each permission entails. Available project permissions are:
				 *
				 *     - PROJECT_READ
				 *     - PROJECT_WRITE
				 *     - PROJECT_ADMIN
				 *
				 *
				 *      */
				readonly permission?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The requested permission was granted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The request was malformed or the specified permission does not exist. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not an administrator for the specifiedspecified project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would reduce the currently authenticated user'spermission level. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly revokePermissionsForUser_1: {
		readonly parameters: {
			readonly query?: {
				/** @description The name of the user */
				readonly name?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description All project permissions were revoked from the user for the specified project. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user is not an administrator for the specifiedspecified project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description  The action was disallowed as it would reduce the currently authenticated user'spermission level. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getUsersWithoutPermission: {
		readonly parameters: {
			readonly query?: {
				/** @description If specified only user names containing the supplied string will be returned */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of users that have not been granted any permissions for the specified project */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestApplicationUser"][]
					}
				}
			}
			/** @description The currently authenticated user is not a project administrator for thespecified project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRepositories: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The repositories matching the supplied <strong>projectKey</strong>. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestRepository"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to see the specified project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createRepository: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		/** @description The repository */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestRepository"]
			}
		}
		readonly responses: {
			/** @description The newly created repository. */
			readonly 201: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRepository"]
				}
			}
			/** @description The repository was not created due to a validation error. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to create a repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description A repository with same name already exists. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRepository: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The repository which matches the supplied <strong>projectKey</strong> and <strong>repositorySlug</strong>. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRepository"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to see the specified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateRepository: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The updated repository. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestRepository"]
			}
		}
		readonly responses: {
			/** @description The updated repository. */
			readonly 201: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRepository"]
				}
			}
			/** @description The repository was not updated due to a validation error. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to update a repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Cannot archive repository because it has open pull requests. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description A repository with the same name as the target already exists, or the repository is archived. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly forkRepository: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The rest fork. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestRepository"]
			}
		}
		readonly responses: {
			/** @description The newly created fork. */
			readonly 201: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRepository"]
				}
			}
			/** @description A validation error prevented the fork from being created. Possible validation errors include: The name or slug for the fork collides with another repository in the target project; an SCM type was specified in the JSON body; a project was specified in the JSON body without a "key" property. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to create a fork. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist, or, if a target project was specified, the target project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteRepository: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The repository has been scheduled for deletion. */
			readonly 202: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description No repository matching the supplied <strong>projectKey</strong> and <strong>repositorySlug</strong> was found. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to delete the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getArchive: {
		readonly parameters: {
			readonly query?: {
				/** @description The commit to stream an archive of; if not supplied, an archive of the default branch is streamed */
				readonly at?: string
				/** @description A filename to include the "Content-Disposition" header */
				readonly filename?: string
				/** @description The format to stream the archive in; must be one of: zip, tar, tar.gz or tgz */
				readonly format?: string
				/** @description Paths to include in the streamed archive; may be repeated to include multiple paths */
				readonly path?: string
				/** @description A prefix to apply to all entries in the streamed archive; if the supplied prefix does not end with a trailing /, one will be added automatically */
				readonly prefix?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description An archive or the requested commit, in zip, tar or gzipped-tar format. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The requested format is not supported. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository does not exist or does not contain the at commit. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAttachment: {
		readonly parameters: {
			readonly query?: never
			readonly header?: {
				readonly Range?: string
				readonly "User-Agent"?: string
			}
			readonly path: {
				/** @description the attachment ID */
				readonly attachmentId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description the attachment */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description the requested range of bytes from the attachment */
			readonly 206: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description the user is currently not authenticated */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The attachment does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteAttachment: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the attachment ID */
				readonly attachmentId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete the attachment */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The attachment does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAttachmentMetadata: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the attachment ID */
				readonly attachmentId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The attachment metadata */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestAttachmentMetadata"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the attachment metadata */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The attachment or the attachment metadata does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly saveAttachmentMetadata: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the attachment ID */
				readonly attachmentId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The attachment metadata can be any valid JSON content */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": string
			}
		}
		readonly responses: {
			/** @description The attachment metadata */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The supplied content is not valid JSON */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to save theattachment metadata */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository or the attachment does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteAttachmentMetadata: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the attachment ID */
				readonly attachmentId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete theattachment metadata */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The attachment or the attachment metadata does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getBranches: {
		readonly parameters: {
			readonly query?: {
				/** @description Base branch or tag to compare each branch to (for the metadata providers that uses that information */
				readonly base?: string
				/** @description Controls whether exact and prefix matches will be boosted to the top */
				readonly boostMatches?: boolean
				readonly context?: string
				/** @description Whether to retrieve plugin-provided metadata about each branch */
				readonly details?: boolean
				/** @description The text to match on */
				readonly filterText?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description Ordering of refs either ALPHABETICAL (by name) or MODIFICATION (last updated) */
				readonly orderBy?: "ALPHABETICAL" | "MODIFICATION"
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The branches matching the supplied <strong>filterText</strong>. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestBranch"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to read the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createBranchForRepository: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The request to create a branch containing a <strong>name</strong>, <strong>startPoint</strong>, and optionally a <strong>message</strong> */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestCreateBranchRequest"]
			}
		}
		readonly responses: {
			/** @description The created branch. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestBranch"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to write to the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getDefaultBranch_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The configured default branch for the repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestBranch"]
				}
			}
			/** @description The repository is empty, and has no default branch. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to read the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist, or its configured default branch does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setDefaultBranch_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The branch to set as default */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestBranch"]
			}
		}
		readonly responses: {
			/** @description The operation was successful. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to update the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getContent: {
		readonly parameters: {
			readonly query?: {
				/** @description The commit ID or ref to retrieve the content for */
				readonly at?: string
				/** @description If present and not equal to 'false', the blame will be returned for the file as well */
				readonly blame?: string
				/** @description If blame&amp;noContent only the blame is retrieved instead of the contents */
				readonly noContent?: string
				/** @description If true only the size will be returned for the file path instead of the contents */
				readonly size?: string
				/** @description If true only the type will be returned for the file path instead of the contents */
				readonly type?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of contents from a file. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The path parameter was not supplied. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getContent_1: {
		readonly parameters: {
			readonly query?: {
				/** @description The commit ID or ref to retrieve the content for */
				readonly at?: string
				/** @description If present and not equal to 'false', the blame will be returned for the file as well */
				readonly blame?: string
				/** @description If blame&amp;noContent only the blame is retrieved instead of the contents */
				readonly noContent?: string
				/** @description If true only the size will be returned for the file path instead of the contents */
				readonly size?: string
				/** @description If true only the type will be returned for the file path instead of the contents */
				readonly type?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The file path to retrieve content from */
				readonly path: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of contents from a file. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The path or until parameters were not supplied. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly editFile: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The path of the file that is to be modified or created */
				readonly path: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The multipart form data containing the file */
		readonly requestBody?: {
			readonly content: {
				readonly "multipart/form-data": components["schemas"]["ExampleMultipartFormData"]
			}
		}
		readonly responses: {
			/** @description The newly created commit. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestCommit"]
				}
			}
			/** @description There are validation errors, e.g. The branch or content parameters were not supplied. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user does not have write permission for the given repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The request was authenticated using a project or repository access token, which does not have a valid user associated with it */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The file already exists when trying to create a file, or the given content does not modify the file, or the file has changed since the given sourceCommitId, or the repository is archived. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getChanges_1: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description The commit to which <code>until</code> should be compared to produce a page of changes. If not specified the commit's first parent is assumed (if one exists) */
				readonly since?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description The commit to retrieve changes for */
				readonly until?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of changes */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestChange"][]
					}
				}
			}
			/** @description The until parameter was not supplied. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository or the since or until parameters supplied does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getCommits: {
		readonly parameters: {
			readonly query?: {
				/** @description The desired scheme for the avatar URL. If the parameter is not present URLs will use the same scheme as this request */
				readonly avatarScheme?: string
				/** @description If present the service adds avatar URLs for commit authors. Should be an integer specifying the desired size in pixels. If the parameter is not present, avatar URLs will not be set */
				readonly avatarSize?: string
				/** @description If <code>true</code>, the commit history of the specified file will be followed past renames. Only valid for a path to a single file. */
				readonly followRenames?: string
				/** @description <code>true</code> to ignore missing commits, <code>false</code> otherwise */
				readonly ignoreMissing?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description If present, controls how merge commits should be filtered. Can be either <code>exclude</code>, to exclude merge commits, <code>include</code>, to include both merge commits and non-merge commits or <code>only</code>, to only return merge commits. */
				readonly merges?: string
				/** @description An optional path to filter commits by */
				readonly path?: string
				/** @description The commit ID or ref (exclusively) to retrieve commits after */
				readonly since?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description The commit ID (SHA1) or ref (inclusively) to retrieve commits before */
				readonly until?: string
				/** @description Optionally include the total number of commits and total number of unique authors */
				readonly withCounts?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of commits */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestCommit"][]
					}
				}
			}
			/** @description One of the supplied commit IDs or refs was invalid. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getCommit: {
		readonly parameters: {
			readonly query?: {
				/** @description An optional path to filter the commit by. If supplied the details returned <i>may not</i> be for the specified commit. Instead, starting from the specified commit, they will be the details for the first commit affecting the specified path. */
				readonly path?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The commit ID to retrieve */
				readonly commitId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A commit */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestCommit"]
				}
			}
			/** @description The supplied commit ID was invalid */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly get: {
		readonly parameters: {
			readonly query: {
				/** @description the key of the build status */
				readonly key: string
			}
			readonly header?: never
			readonly path: {
				/** @description The commit. */
				readonly commitId: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The build status associated with the provided commit and key */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestBuildStatus"]
				}
			}
			/** @description The request has failed validation */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions this repository */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository, commit or build status does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly add: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The commit. */
				readonly commitId: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The contents of the build status request are:
		 *     These fields are **required**:
		 *
		 *
		 *     - **key**: The string referring to this branch plan/job
		 *     - **state**: The build status state, one of: "SUCCESSFUL", "FAILED", "INPROGRESS", "CANCELLED", "UNKNOWN"
		 *     - **url**: URL referring to the build result page in the CI tool.
		 *
		 *
		 *     These fields are optional:
		 *
		 *
		 *     - **buildNumber** (optional): A unique identifier for this particular run of a plan<
		 *     - **dateAdded** (optional): milliseconds since epoch. If not provided current date is used.
		 *     - **description** (optional): Describes the build result
		 *     - **duration** (optional): Duration of a completed build in milliseconds.
		 *     - **name** (optional): A short string that describes the build plan
		 *     - **parent** (optional): The identifier for the plan or job that ran the branch plan that produced this build status.
		 *     - **ref** (optional): The fully qualified git reference e.g. refs/heads/master.
		 *     - **testResults** (optional): A summary of the passed, failed and skipped tests.
		 *      */
		readonly requestBody?: {
			readonly content: {
				readonly "*/*": components["schemas"]["RestBuildStatusSetRequest"]
			}
		}
		readonly responses: {
			/** @description The build status was posted */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The build status was not added as the request was invalid. This could be because of a number of things:
			 *
			 *
			 *     - an invalid commit hash was provided
			 *     - build key was blank or longer than 255 characters
			 *     - invalid branch was provided
			 *     - invalid state was provided
			 *     - build status url was blank or longer than 450 characters
			 *
			 *     The specifics will be included in the error message. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to push a build status to this repository */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly delete: {
		readonly parameters: {
			readonly query?: {
				/** @description the key of the build status */
				readonly key?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The commit. */
				readonly commitId: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The build status associated with the provided commit and key has been deleted */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The request has failed validation */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions this repository */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getChanges: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description The commit to which <code>until</code> should be compared to produce a page of changes. If not specified the commit's first parent is assumed (if one exists) */
				readonly since?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description <code>true</code> to apply comment counts in the changes (the default); otherwise, <code>false</code> to stream changes without comment counts */
				readonly withComments?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The commit to retrieve changes for */
				readonly commitId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of changes */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestChange"][]
					}
				}
			}
			/** @description The until parameter was not supplied */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository or the since or until parameters supplied does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getComments: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description The path to the file on which comments were made */
				readonly path?: string
				/** @description For a merge commit, a parent can be provided to specify which diff the comments are on. For a commit range, a sinceId can be provided to specify where the comments are anchored from. */
				readonly since?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The <i>full ID</i> of the commit within the repository */
				readonly commitId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of comments that match the search criteria */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestComment"][]
					}
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the comment */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Unable to find the supplied project, repository, or commit. The missing entity will be specified in the error details. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createComment: {
		readonly parameters: {
			readonly query?: {
				/** @description For a merge commit, a parent can be provided to specify which diff the comments should be on. For a commit range, a sinceId can be provided to specify where the comments should be anchored from. */
				readonly since?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The <i>full ID</i> of the commit within the repository */
				readonly commitId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description the comment */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestComment"]
			}
		}
		readonly responses: {
			/** @description The newly created comment. */
			readonly 201: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestComment"]
				}
			}
			/** @description The comment was not created due to a validation error. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the commit, create a comment or watch the commit. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Unable to find the supplied project, repository, commit or parent comment. The missing entity will be specified in the error details. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Adding, deleting, or editing comments isn't supported on archived repositories. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getComment: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the comment to retrieve */
				readonly commentId: string
				/** @description The <i>full ID</i> of the commit within the repository */
				readonly commitId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The requested comment. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestComment"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the comment */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Unable to find the supplied project, repository, commit or comment. The missing entity will be specified in the error details. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateComment: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the comment to retrieve */
				readonly commentId: string
				/** @description The <i>full ID</i> of the commit within the repository */
				readonly commitId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The comment to update */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestComment"]
			}
		}
		readonly responses: {
			/** @description The newly updated comment. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestComment"]
				}
			}
			/** @description The comment was not updated due to a validation error. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the commit, update the comment or watch the commit. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Unable to find the supplied project, repository, commit or comment. The missing entity will be specified in the error details. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The comment version supplied does not match the current version or the repository is archived. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteComment: {
		readonly parameters: {
			readonly query?: {
				/** @description The expected version of the comment. This must match the server's version of the comment or the delete will fail. To determine the current version of the comment, the comment should be fetched from the server prior to the delete. Look for the 'version' attribute in the returned JSON structure. */
				readonly version?: string
			}
			readonly header?: never
			readonly path: {
				/** @description the comment */
				readonly commentId: string
				/** @description The <i>full ID</i> of the commit within the repository */
				readonly commitId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The operation was successful */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete the comment. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Unable to find the supplied project, repository or commit. The missing entity will be specified in the error details. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The comment has replies, the version supplied does not match the comment's current version or the repository is archived. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly get_1: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description the sequence number of the deployment, as detailed by the query param
				 * @example deploymentSequenceNumber
				 */
				readonly deploymentSequenceNumber?: string
				/** @description the key of the environment, as detailed by the query parameter */
				readonly environmentKey?: string
				/** @description the key of the deployment, as detailed by the query parameter */
				readonly key?: string
			}
			readonly header?: never
			readonly path: {
				/** @description the commitId that was deployed as indicated by the query parameter */
				readonly commitId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The deployment */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestDeployment"]
				}
			}
			/** @description could not get the deployment because the request was invalid */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or deployment does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createOrUpdateDeployment: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the commitId that was deployed as indicated by the path */
				readonly commitId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description the details of the deployment to create, as detailed by the request body */
		readonly requestBody?: {
			readonly content: {
				readonly "*/*": components["schemas"]["RestDeploymentSetRequest"]
			}
		}
		readonly responses: {
			/** @description The deployment was created */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestDeployment"]
				}
			}
			/** @description the deployment was not created because the request was invalid */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly delete_1: {
		readonly parameters: {
			readonly query?: {
				/** @description the sequence number of the deployment, as detailed by the query parameter */
				readonly deploymentSequenceNumber?: string
				/** @description the key of the environment, as detailed by the query parameter */
				readonly environmentKey?: string
				/** @description the key of the deployment, as detailed by the query parameter */
				readonly key?: string
			}
			readonly header?: never
			readonly path: {
				/** @description the commitId that was deployed as indicated by the path */
				readonly commitId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description the request has been processed */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description the deployment was not deleted because the request was invalid */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to delete a deployment */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getDiffStatsSummary: {
		readonly parameters: {
			readonly query?: {
				/** @description <code>true</code> to automatically try to find the source path when it's not provided, <code>false</code> otherwise. Requires the path to be provided. */
				readonly autoSrcPath?: string
				/** @description The base revision to diff from. If omitted the parent revision of the commit ID is used */
				readonly since?: string
				/** @description The source path for the file, if it was copied, moved or renamed */
				readonly srcPath?: string
				/** @description Optional whitespace flag which can be set to ignore-all */
				readonly whitespace?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The commit ID to diff to. */
				readonly commitId: string
				/** @description The path to the file which should be diffed (optional) */
				readonly path: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The diff stats summary for a commit. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestDiffStatsSummary"]
				}
			}
			/** @description The until parameter was not supplied. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly streamDiff: {
		readonly parameters: {
			readonly query?: {
				/** @description <code>true</code> to automatically try to find the source path when it's not provided, <code>false</code> otherwise. Requires the path to be provided. */
				readonly autoSrcPath?: string
				/** @description The security scheme for avatar URLs. If the scheme is not present then it is inherited from the request. It can be set to "https" to force the use of secure URLs. Not applicable if streaming raw diff */
				readonly avatarScheme?: string
				/** @description If present the service adds avatar URLs for comment authors where the provided value specifies the desired avatar size in pixels. Not applicable if streaming raw diff */
				readonly avatarSize?: string
				/** @description The number of context lines to include around added/removed lines in the diff.Not applicable if streaming raw diff */
				readonly contextLines?: string
				/** @description Text used to filter files and lines (optional). Not applicable if streaming raw diff */
				readonly filter?: string
				/** @description The base revision to diff from. If omitted the parent revision of the until revision is used */
				readonly since?: string
				/** @description The source path for the file, if it was copied, moved or renamed */
				readonly srcPath?: string
				/** @description Optional whitespace flag which can be set to ignore-all */
				readonly whitespace?: string
				/** @description <code>true</code> to embed comments in the diff (the default); otherwise <code>false</code> to stream the diff without comments. Not applicable if streaming raw diff */
				readonly withComments?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The <i>full ID</i> of the commit within the repository */
				readonly commitId: string
				/** @description The path to the file which should be diffed (optional) */
				readonly path: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A diff between two revisions. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestDiff"]
				}
			}
			/** @description The until parameter was not supplied. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getMergeBase: {
		readonly parameters: {
			readonly query?: {
				/** @description The other commit id to calculate the merge-base on */
				readonly otherCommitId?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The <i>full ID</i> of the commit within the repository */
				readonly commitId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The common ancestor of the two given commits */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestCommit"]
				}
			}
			/** @description No common parent between the two commits exist */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The supplied commit ID(s) was/were invalid */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The project, repository, or commit(s) does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getPullRequests: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description the commit ID */
				readonly commitId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Return a page of pull requests in the current repository containing the given commit. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestPullRequest"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to see the request repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The request repository does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly watch: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The <i>full ID</i> of the commit within the repository */
				readonly commitId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The user is now watching the commit. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to view the pull request */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project, repository or commit does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly unwatch: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The <i>full ID</i> of the commit within the repository */
				readonly commitId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The user is no longer watching the commit. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to view the pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project, repository or commit does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly streamChanges: {
		readonly parameters: {
			readonly query?: {
				/** @description the source commit (can be a partial/full commit ID or qualified/unqualified ref name) */
				readonly from?: string
				/** @description an optional parameter specifying the source repository containing the source commit if that commit is not present in the current repository; the repository can be specified by either its ID <em>fromRepo=42</em> or by its project key plus its repo slug separated by a slash: <em>fromRepo=projectKey/repoSlug</em> */
				readonly fromRepo?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description the target commit (can be a partial/full commit ID or qualified/unqualified ref name) */
				readonly to?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of changes. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestChange"][]
					}
				}
			}
			/** @description The source repository,target repository, or commit does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly streamCommits: {
		readonly parameters: {
			readonly query?: {
				/** @description the source commit (can be a partial/full commit ID or qualified/unqualified ref name) */
				readonly from?: string
				/** @description an optional parameter specifying the source repository containing the source commit if that commit is not present in the current repository; the repository can be specified by either its ID <em>fromRepo=42</em> or by its project key plus its repo slug separated by a slash: <em>fromRepo=projectKey/repoSlug</em> */
				readonly fromRepo?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description the target commit (can be a partial/full commit ID or qualified/unqualified ref name) */
				readonly to?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of commits. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestCommit"][]
					}
				}
			}
			/** @description The source repository,target repository, or commit does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getDiffStatsSummary_1: {
		readonly parameters: {
			readonly query?: {
				/** @description the source commit (can be a partial/full commit ID or qualified/unqualified ref name) */
				readonly from?: string
				/** @description an optional parameter specifying the source repository containing the source commit if that commit is not present in the current repository; the repository can be specified by either its ID <em>fromRepo=42</em> or by its project key plus its repo slug separated by a slash: <em>fromRepo=projectKey/repoSlug</em> */
				readonly fromRepo?: string
				/** @description source path */
				readonly srcPath?: string
				/** @description the target commit (can be a partial/full commit ID or qualified/unqualified ref name) */
				readonly to?: string
				/** @description an optional whitespace flag which can be set to <code>ignore-all</code> */
				readonly whitespace?: string
			}
			readonly header?: never
			readonly path: {
				/** @description the path to the file to diff (optional) */
				readonly path: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The diff stats summary for the changes. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestDiff"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The source repository,target repository, or commit does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly streamDiff_1: {
		readonly parameters: {
			readonly query?: {
				/** @description an optional number of context lines to include around each added or removed lines in the diff */
				readonly contextLines?: string
				/** @description the source commit (can be a partial/full commit ID or qualified/unqualified ref name) */
				readonly from?: string
				/** @description an optional parameter specifying the source repository containing the source commit if that commit is not present in the current repository; the repository can be specified by either its ID <em>fromRepo=42</em> or by its project key plus its repo slug separated by a slash: <em>fromRepo=projectKey/repoSlug</em> */
				readonly fromRepo?: string
				/** @description source path */
				readonly srcPath?: string
				/** @description the target commit (can be a partial/full commit ID or qualified/unqualified ref name) */
				readonly to?: string
				/** @description an optional whitespace flag which can be set to <code>ignore-all</code> */
				readonly whitespace?: string
			}
			readonly header?: never
			readonly path: {
				/** @description the path to the file to diff (optional) */
				readonly path: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The diff of the changes. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestDiff"]
				}
			}
			/** @description The source repository,target repository, or commit does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly streamContributing: {
		readonly parameters: {
			readonly query?: {
				/** @description A specific commit or ref to retrieve the guidelines at, or the default branch if not specified */
				readonly at?: string
				/** @description (Optional) Whether the markup implementation should convert newlines to breaks. If not specified, the value of the <code>markup.render.hardwrap</code> property, which is <code>true</code> by default, will be used */
				readonly hardwrap?: string
				/** @description (Optional) true if HTML should be escaped in the input markup, false otherwise. If not specified, the value of the <code>markup.render.html.escape</code> property, which is <code>true</code> by default, will be used */
				readonly htmlEscape?: string
				/** @description (Optional) true if headings should contain an ID based on the heading content. If not specified, the value of the <code>markup.render.headerids</code> property, which is false by default, will be used */
				readonly includeHeadingId?: string
				/** @description If present or <code>"true"</code>, triggers the raw content to be markup-rendered and returned as HTML; otherwise, if not specified, or any value other than <code>"true"</code>, the content is streamed without markup */
				readonly markup?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The contributing guidelines for the repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The currently authenticated user has insufficient permissions to read the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getDefaultBranch_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The configured default branch for the repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMinimalRef"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to read the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist, or its configured default branch does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setDefaultBranch_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The branch to set as default */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestBranch"]
			}
		}
		readonly responses: {
			/** @description The default branch was updated. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The authenticated user does not have permission to modify the default branch. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly streamRawDiff: {
		readonly parameters: {
			readonly query?: {
				/** @description The number of context lines to include around added/removed lines in the diff */
				readonly contextLines?: string
				/** @description The base revision to diff from. If omitted the parent revision of the until revision is used */
				readonly since?: string
				/** @description The source path for the file, if it was copied, moved or renamed */
				readonly srcPath?: string
				/** @description The target revision to diff to (required) */
				readonly until?: string
				/** @description Optional whitespace flag which can be set to <code>ignore-all</code> */
				readonly whitespace?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A raw diff between two revisions. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The path parameter was not supplied. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly streamRawDiff_1: {
		readonly parameters: {
			readonly query?: {
				/** @description The number of context lines to include around added/removed lines in the diff */
				readonly contextLines?: string
				/** @description The base revision to diff from. If omitted the parent revision of the until revision is used */
				readonly since?: string
				/** @description The source path for the file, if it was copied, moved or renamed */
				readonly srcPath?: string
				/** @description The target revision to diff to (required) */
				readonly until?: string
				/** @description Optional whitespace flag which can be set to <code>ignore-all</code> */
				readonly whitespace?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The path to the file which should be diffed (required) */
				readonly path: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A raw diff between two revisions. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The until parameter was not supplied. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly streamFiles: {
		readonly parameters: {
			readonly query?: {
				/** @description The commit ID or ref (e.g. a branch or tag) to list the files at. If not specified the default branch will be used instead. */
				readonly at?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of files. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["FileListResource"][]
					}
				}
			}
			/** @description The path parameter was not supplied. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The path requested does not exist at the supplied commit. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly streamFiles_1: {
		readonly parameters: {
			readonly query?: {
				/** @description The commit ID or ref (e.g. a branch or tag) to list the files at. If not specified the default branch will be used instead. */
				readonly at?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The directory to list files for. */
				readonly path: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of files. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["FileListResource"][]
					}
				}
			}
			/** @description The path requested is not a directory at the supplied commit. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The path requested does not exist at the supplied commit. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getForkedRepositories: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of repositories related to the request repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestRepository"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to see the request repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The request repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getConfigurations_1: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of hook scripts. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestHookScriptConfig"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the specified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setConfiguration_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
				/** @description The ID of the hook script */
				readonly scriptId: string
			}
			readonly cookie?: never
		}
		/** @description The hook triggers for which the hook script should be run */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestHookScriptTriggers"]
			}
		}
		readonly responses: {
			/** @description The updated hook script. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestHookScriptConfig"]
				}
			}
			/** @description The hook script was not created/updated due to a validation error. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the specified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository slug supplied does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly removeConfiguration_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
				/** @description The ID of the hook script */
				readonly scriptId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The hook script was successfully deleted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to view the specified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository slug or hook script ID supplied does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAllLabelsForRepository: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The applied label. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestLabel"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the labels. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly addLabel: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The label to apply */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestLabel"]
			}
		}
		readonly responses: {
			/** @description The applied label. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestLabel"]
				}
			}
			/** @description A validation error prevented the label from being created or applied. Possible validation errors include: The name of the label contains uppercase characters, the name is smaller than 3 characters or longer than 50 characters, the label contains other characters than a-z 0-9 and - or the label is already applied to the given repository. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to apply a label. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly removeLabel: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The label to remove */
				readonly labelName: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description An empty response indicating that the label is no longer associated to the repository. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to remove the label. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly stream: {
		readonly parameters: {
			readonly query?: {
				/** @description The commit to use as the starting point when listing files and calculating modifications */
				readonly at?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A map of files to the last commit that modified them, and the latest commit to the repository (by nature, any commit to a repository modifies its root). */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["ExampleFiles"]
				}
			}
			/** @description No <code>at</code> commit was specified. When streaming modifications, an explicit starting commit must be supplied. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository does not exist or does not contain the <code>at</code> commit. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly stream_1: {
		readonly parameters: {
			readonly query?: {
				/** @description The commit to use as the starting point when listing files and calculating modifications */
				readonly at?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The path within the repository whose files should be streamed */
				readonly path: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A map of files to the last commit that modified them, and the latest commit to update the requested path. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["ExampleFiles"]
				}
			}
			/** @description No <code>at</code> commit was specified. When streaming modifications, an explicit starting commit must be supplied. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository does not exist or does not contain the <code>at</code> commit, or the <code>at</code> commit does not contain the requested path. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly streamLicense: {
		readonly parameters: {
			readonly query?: {
				/** @description A specific commit or ref to retrieve the guidelines at, or the default branch if not specified */
				readonly at?: string
				/** @description (Optional) Whether the markup implementation should convert newlines to breaks. If not specified, the value of the <code>markup.render.hardwrap</code> property, which is <code>true</code> by default, will be used */
				readonly hardwrap?: string
				/** @description (Optional) true if HTML should be escaped in the input markup, false otherwise. If not specified, the value of the <code>markup.render.html.escape</code> property, which is <code>true</code> by default, will be used */
				readonly htmlEscape?: string
				/** @description (Optional) true if headings should contain an ID based on the heading content. If not specified, the value of the <code>markup.render.headerids</code> property, which is false by default, will be used */
				readonly includeHeadingId?: string
				/** @description If present or <code>"true"</code>, triggers the raw content to be markup-rendered and returned as HTML; otherwise, if not specified, or any value other than <code>"true"</code>, the content is streamed without markup */
				readonly markup?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The license for the repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The currently authenticated user has insufficient permissions to read the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly search: {
		readonly parameters: {
			readonly query?: {
				/** @description (optional), Defaults to <strong>INCOMING</strong>) the direction relative to the specified repository. Either <strong>INCOMING</strong> or <strong>OUTGOING</strong>. */
				readonly direction?: string
				/** @description (optional) Return only users, whose username, name or email address <i>contain</i> the filter value */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description (optional) The role associated with the pull request participant. This must be one of AUTHOR, REVIEWER, or PARTICIPANT */
				readonly role?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of users that match the search criteria. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestApplicationUser"][]
					}
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the specified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly streamPatch: {
		readonly parameters: {
			readonly query?: {
				/** @description indicates whether or not to generate a patch which includes all the ancestors of the 'until' revision. If true, the value provided by 'since' is ignored. */
				readonly allAncestors?: string
				/** @description The base revision from which to generate the patch. This is only applicable when 'allAncestors' is false. If omitted the patch will represent one single commit, the 'until'. */
				readonly since?: string
				/** @description The target revision from which to generate the patch (required) */
				readonly until?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The patch contents from a repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The until parameter was not supplied. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly revokePermissions_1: {
		readonly parameters: {
			readonly query?: {
				/** @description The names of the groups */
				readonly group?: string
				/** @description The names of the users */
				readonly user?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description All repository permissions were revoked from the users and groups for the specified repository. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description No permissions were revoked because the request was invalid. No users or groups were provided. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The currently authenticated user is not an administrator for the specified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist, or one or more of the users or groups provided does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would revoke the currently authenticated user's permission on the repository. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getGroupsWithAnyPermission_2: {
		readonly parameters: {
			readonly query?: {
				/** @description If specified only group names containing the supplied string will be returned. */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of groups and their highest permissions for the specified repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestPermittedGroup"][]
					}
				}
			}
			/** @description The currently authenticated user is not a repository administrator for the specified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setPermissionForGroup: {
		readonly parameters: {
			readonly query: {
				/** @description The names of the groups. */
				readonly name: readonly string[]
				/** @description The permission to grant */
				readonly permission: "REPO_ADMIN" | "REPO_READ" | "REPO_WRITE"
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The requested permission was granted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The request was malformed or the specified permission does not exist. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not a repository administrator for the specified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would reduce the currently authenticated user's permission level. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly revokePermissionsForGroup_2: {
		readonly parameters: {
			readonly query: {
				/** @description The name of the group. */
				readonly name: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description All repository permissions were revoked from the group for the specified repository. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user is not a repository administrator for the specified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would reduce the currently authenticated user's permission level. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getGroupsWithoutAnyPermission_2: {
		readonly parameters: {
			readonly query?: {
				/** @description If specified only group names containing the supplied string will be returned. */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of groups that have not been granted any permissions for the specified repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestDetailedGroup"][]
					}
				}
			}
			/** @description The currently authenticated user is not a repository administrator for the specified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly searchPermissions_1: {
		readonly parameters: {
			readonly query?: {
				/** @description Name of the user or group to filter the name of */
				readonly filterText?: string
				/** @description Permissions to filter by. See the [permissions documentation](https://confluence.atlassian.com/display/BitbucketServer/Using+repository+permissions)for a detailed explanation of what each permission entails. This parameter can be specified multiple times to filter by more than one permission, and can contain repository, project, and global permissions.
				 *
				 *      */
				readonly permission?: string
				/** @description Type of entity (user or group)Valid entity types are:
				 *
				 *     - USER- GROUP */
				readonly type?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description default response */
			readonly default: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json;charset=UTF-8": unknown
				}
			}
		}
	}
	readonly getUsersWithAnyPermission_2: {
		readonly parameters: {
			readonly query?: {
				/** @description If specified only user names containing the supplied string will be returned. */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of users and their highest permissions for the specified repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestPermittedUser"][]
					}
				}
			}
			/** @description The currently authenticated user is not a repository administrator for the specified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setPermissionForUser: {
		readonly parameters: {
			readonly query: {
				/** @description The names of the users. */
				readonly name: readonly string[]
				/** @description The permission to grant */
				readonly permission: "REPO_ADMIN" | "REPO_READ" | "REPO_WRITE"
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The requested permission was granted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The request was malformed or the specified permission does not exist. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not a repository administrator for the specified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would reduce the currently authenticated user's permission level. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly revokePermissionsForUser_2: {
		readonly parameters: {
			readonly query: {
				/** @description The name of the user. */
				readonly name: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description All repository permissions were revoked from the user for the specified repository. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user is not a repository administrator for the specified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The action was disallowed as it would reduce the currently authenticated user's permission level. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getUsersWithoutPermission_1: {
		readonly parameters: {
			readonly query?: {
				/** @description If specified only user names containing the supplied string will be returned. */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of users that have not been granted any permissions for the specified repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestApplicationUser"][]
					}
				}
			}
			/** @description The currently authenticated user is not a repository administrator for the specified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getPage: {
		readonly parameters: {
			readonly query?: {
				/** @description (optional) a <i>fully-qualified</i> branch ID to find pull requests to or from, such as refs/heads/master */
				readonly at?: string
				/** @description (optional, defaults to <strong>INCOMING</strong>) the direction relative to the specified repository. Either <strong>INCOMING</strong> or <strong>OUTGOING</strong>. */
				readonly direction?: string
				/** @description (optional) If specified, only pull requests matching the supplied draft status will be returned. */
				readonly draft?: string
				/** @description (optional) If specified, only pull requests where the title or description contains the supplied string will be returned. */
				readonly filterText?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description (optional, defaults to <strong>NEWEST</strong>) the order to return pull requests in, either <strong>OLDEST</strong> (as in: "oldest first") or <strong>NEWEST</strong>. */
				readonly order?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description (optional, defaults to <strong>OPEN</strong>). Supply <strong>ALL</strong> to return pull request in any state. If a state is supplied only pull requests in the specified state will be returned. Either <strong>OPEN</strong>, <strong>DECLINED</strong> or <strong>MERGED</strong>. */
				readonly state?: string
				/** @description (optional) defaults to true, whether to return additional pull request attributes */
				readonly withAttributes?: string
				/** @description (optional) defaults to true, whether to return additional pull request properties */
				readonly withProperties?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of pull requests that match the search criteria. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestPullRequest"][]
					}
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the specified pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly create: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The pull request data */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestPullRequest"]
			}
		}
		readonly responses: {
			/** @description The newly created pull request. */
			readonly 201: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequest"]
				}
			}
			/** @description The pull request entity supplied in the request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to create a pull request between the two specified repositories. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description One of the specified repositories or branches does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description One of the following error cases occurred (check the error message for more details):
			 *
			 *     - There was a problem resolving one or more reviewers.
			 *     - The specified branches were the same.
			 *     - The <em>to</em> branch is already up-to-date with all the commits on the     <em>from</em> branch.
			 *     - A pull request between the two branches already exists.
			 *     - The <em>to</em> repository is archived.
			 *      */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly get_3: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The specified pull request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequest"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the specified pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly update: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The updated pull request */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestPullRequest"]
			}
		}
		readonly responses: {
			/** @description The updated pull request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequest"]
				}
			}
			/** @description One of the following error cases occurred (check the error message for more details):
			 *
			 *     - The request tried to modify the <em>author</em> or <em>participants</em>.
			 *     - The pull request's version attribute was not specified.
			 *     - A reviewer's username was not specified.
			 *     - The toRef ID value was incorrectly left blank
			 *      */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to update the specified pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description One of the specified repositories or branches does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description One of the following error cases occurred (check the error message for more details):
			 *
			 *     - The specified version is out of date.
			 *     - One of the reviewers could not be added to the pull request.
			 *     - If updating the destination branch:    - There is already an open pull request with an identical to branch
			 *        - The from and new to branch <i>are</i> the same
			 *        - The new destination branch up-to-date is up-to-date with all of                 changes from the from branch, resulting in a pull request with                 nothing to merge
			 *     - The <em>to</em> repository is archived.
			 *      */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly delete_3: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description A body containing the version of the pull request */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestPullRequestDeleteRequest"]
			}
		}
		readonly responses: {
			/** @description The pull request was deleted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to view the specified pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Deleting pull requests isn't supported on archived repositories. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly streamRawDiff_2: {
		readonly parameters: {
			readonly query?: {
				/** @description The number of context lines to include around added/removed lines in the diff */
				readonly contextLines?: string
				/** @description optional whitespace flag which can be set to <code>ignore-all</code> */
				readonly whitespace?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A raw diff for the specified pull request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "text/plain": unknown
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the specified pull request. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "text/html": unknown
				}
			}
			/** @description The pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "text/html": unknown
				}
			}
		}
	}
	readonly streamPatch_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A patch representing the specified pull request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The currently authenticated user has insufficient permissions to access the pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getActivities: {
		readonly parameters: {
			readonly query?: {
				/** @description (optional) the ID of the activity item to use as the first item in the returned page */
				readonly fromId?: string
				/** @description (required if <strong>fromId</strong> is present) the type of the activity item specified by <strong>fromId</strong> (either <strong>COMMENT</strong> or <strong>ACTIVITY</strong>) */
				readonly fromType?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of activity relating to the specified pull request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestPullRequestActivity"][]
					}
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the specified pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly approve: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Details of the new participant. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequestParticipant"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The pull request is not open. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly withdrawApproval: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Details of the updated participant. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequestParticipant"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist or the current user is not a participant on the pull request. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The pull request is not open. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAutoMergeRequest: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The auto-merge request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestAutoMergeRequest"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the specified pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly tryAutoMerge: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The result of trying to auto-merge the pull request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestAutoMergeProcessingResult"]
				}
			}
			/** @description An auto-merge request was not submitted for this pull request. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to modify the pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The auto-merge setting is not enabled for the repository that this pull request targets. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly cancelAutoMerge: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The auto-merge request was cancelled. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to modify the pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified pull request is not open. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getComments_1: {
		readonly parameters: {
			readonly query?: {
				/** @description If true only the count of the comments by state will be returned (and not the body of the comments). */
				readonly count?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				readonly state?: readonly string[]
				/** @description (optional). If supplied, only comments with a state in the given list will be returned. The state can be OPEN or RESOLVED. */
				readonly states?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request ID. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of Comments from the supplied pull request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestComment"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository or pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createComment_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request ID. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The comment to add. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestComment"]
			}
		}
		readonly responses: {
			/** @description The newly created comment. */
			readonly 201: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestComment"]
				}
			}
			/** @description The comment was not created due to a validation error. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the pull request, create a comment or watch the pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Unable to find the supplied project, repository, pull request or parent comment. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The new created name already exists or adding, deleting, or editing comments isn't supported on archived repositories. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getComment_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the comment to retrieve */
				readonly commentId: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request ID. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The requested comment. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestComment"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the comment. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Unable to find the supplied project, repository, pull request or comment. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateComment_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the comment to retrieve. */
				readonly commentId: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request ID. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The comment to add. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestComment"]
			}
		}
		readonly responses: {
			/** @description The newly updated comment. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestComment"]
				}
			}
			/** @description The comment was not updated due to a validation error. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the pull request, update a comment or watch the pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Unable to find the supplied project, repository, pull request or comment. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The comment version supplied does not match the current version or the repository is archived. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteComment_1: {
		readonly parameters: {
			readonly query?: {
				/** @description The expected version of the comment. This must match the server's version of the comment or the delete will fail. To determine the current version of the comment, the comment should be fetched from the server prior to the delete. Look for the 'version' attribute in the returned JSON structure. */
				readonly version?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The ID of the comment to retrieve. */
				readonly commentId: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request ID. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The operation was successful. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete the comment. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Unable to find the supplied project, repository or pull request. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The comment has replies, the version supplied does not match the current version or the repository is archived. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly streamChanges_1: {
		readonly parameters: {
			readonly query?: {
				/** @description UNREVIEWED to stream the unreviewed changes for the current user (if they exist); RANGE to stream changes between two arbitrary commits (requires 'sinceId' and 'untilId'); otherwise ALL to stream all changes (the default) */
				readonly changeScope?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description The since commit hash to stream changes for a RANGE arbitrary change scope */
				readonly sinceId?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description The until commit hash to stream changes for a RANGE arbitrary change scope */
				readonly untilId?: string
				/** @description true to apply comment counts in the changes (the default); otherwise, false to stream changes without comment counts */
				readonly withComments?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request ID. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of unreviewed Changes for the current user from the supplied pull request, including the unreviewedCommits in the properties map. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestChange"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository or pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getComments_2: {
		readonly parameters: {
			readonly query: {
				/** @description ACTIVE to stream the active comments; ORPHANED to stream the orphaned comments; ALL to stream both the active and the orphaned comments; */
				readonly anchorState?: string
				readonly diffType?: readonly string[]
				/** @description EFFECTIVE to stream the comments related to the effective diff of the pull request; RANGE to stream comments related to a commit range between two arbitrary commits (requires 'fromHash' and 'toHash'); COMMIT to stream comments related to a commit between two arbitrary commits (requires 'fromHash' and 'toHash') */
				readonly diffTypes?: string
				/** @description The from commit hash to stream comments for a RANGE or COMMIT arbitrary change scope */
				readonly fromHash?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description The path to stream comments for a given path */
				readonly path: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				readonly state?: readonly string[]
				/** @description (optional). If supplied, only comments with a state in the given list will be returned. The state can be OPEN or RESOLVED. */
				readonly states?: string
				/** @description The to commit hash to stream comments for a RANGE or COMMIT arbitrary change scope */
				readonly toHash?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request ID. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of Comments from the supplied pull request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestComment"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository or pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createComment_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request ID. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The comment to add */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestComment"]
			}
		}
		readonly responses: {
			/** @description The newly created comment. */
			readonly 201: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestComment"]
				}
			}
			/** @description The comment was not created due to a validation error. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the pull request, create a comment or watch the pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Unable to find the supplied project, repository, pull request or parent comment. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Adding, deleting, or editing comments isn't supported on archived repositories. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getComment_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the comment to retrieve. */
				readonly commentId: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request ID. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The requested comment. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestComment"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the comment. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Unable to find the supplied project, repository, pull request or comment. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateComment_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the comment to retrieve. */
				readonly commentId: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request ID. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The updated comment */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestComment"]
			}
		}
		readonly responses: {
			/** @description The newly updated comment. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestComment"]
				}
			}
			/** @description The comment was not updated due to a validation error. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the pull request, update a comment or watch the pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Unable to find the supplied project, repository, pull request or comment. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The comment version supplied does not match the current version or the repository is archived. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteComment_2: {
		readonly parameters: {
			readonly query?: {
				/** @description The expected version of the comment. This must match the server's version of the comment or the delete will fail. To determine the current version of the comment, the comment should be fetched from the server prior to the delete. Look for the 'version' attribute in the returned JSON structure. */
				readonly version?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The ID of the comment to retrieve. */
				readonly commentId: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request ID. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The operation was successful. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete the comment. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Unable to find the supplied project, repository or pull request. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The comment has replies, the version supplied does not match the current version or the repository is archived. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly applySuggestion: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the comment to retrieve. */
				readonly commentId: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request ID. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description A request containing other parameters required to apply a suggestion - The given versions/hashes must match the server's version/hashes or the suggestion application will fail (in order to avoid applying the suggestion to the wrong place */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestApplySuggestionRequest"]
			}
		}
		readonly responses: {
			/** @description An empty response indicating the suggestion has been applied. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The suggestion was not applied due to a validation error. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to apply the suggestion. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Unable to find the supplied project, repository, pull request or parent comment. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description There was an error applying the suggestion to the source branch. It must be applied manually. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getCommitMessageSuggestion: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request to generate the suggestion for */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The suggested commit message */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestCommitMessageSuggestion"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the specified pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getCommits_1: {
		readonly parameters: {
			readonly query?: {
				/** @description The desired scheme for the avatar URL. If the parameter is not present URLs will use the same scheme as this request */
				readonly avatarScheme?: string
				/** @description If present the service adds avatar URLs for commit authors. Should be an integer specifying the desired size in pixels. If the parameter is not present, avatar URLs will not be setCOMMIT to stream comments related to a commit between two arbitrary commits (requires 'fromHash' and 'toHash') */
				readonly avatarSize?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description If set to true, the service will add "authorCount" and "totalCount" at the end of the page. "authorCount" is the number of different authors and "totalCount" is the total number of commits. */
				readonly withCounts?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description ID of the pullrequest, part of the path */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of commits from the supplied pull request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestCommit"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository or pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly decline: {
		readonly parameters: {
			readonly query?: {
				/** @description The current version of the pull request. If the server's version isn't the same as the specified version the operation will fail. To determine the current version of the pull request it should be fetched from the server prior to this operation. Look for the 'version' attribute in the returned JSON structure. */
				readonly version?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pullrequest ID provided by the path */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description Optional body */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestPullRequestDeclineRequest"]
			}
		}
		readonly responses: {
			/** @description The pull request was declined. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequest"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The pull request is not OPEN or has been updated since the version specified by the request. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getDiffStatsSummary_2: {
		readonly parameters: {
			readonly query?: {
				/** @description The since commit hash to stream a diff between two arbitrary hashes */
				readonly sinceId?: string
				/** @description The previous path to the file, if the file has been copied, moved or renamed */
				readonly srcPath?: string
				/** @description The until commit hash to stream a diff between two arbitrary hashes */
				readonly untilId?: string
				/** @description Optional whitespace flag which can be set to <code>ignore-all</code> */
				readonly whitespace?: string
			}
			readonly header?: never
			readonly path: {
				/** @description Optional path to the file which should be diffed */
				readonly path: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The diff stats summary */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestDiffStatsSummary"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the specified pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly streamDiff_2: {
		readonly parameters: {
			readonly query?: {
				/** @description The security scheme for avatar URLs. If the scheme is not present then it is inherited from the request. It can be set to "https" to force the use of secure URLs. Not applicable if streaming raw diff */
				readonly avatarScheme?: string
				/** @description If present the service adds avatar URLs for comment authors where the provided value specifies the desired avatar size in pixels. Not applicable if streaming raw diff */
				readonly avatarSize?: string
				/** @description The number of context lines to include around added/removed lines in the diff */
				readonly contextLines?: string
				/** @description The type of diff being requested. When withComments is true this works as a hint to the system to attach the correct set of comments to the diff. Not applicable if streaming raw diff */
				readonly diffType?: string
				/** @description The since commit hash to stream a diff between two arbitrary hashes */
				readonly sinceId?: string
				/** @description The previous path to the file, if the file has been copied, moved or renamed */
				readonly srcPath?: string
				/** @description The until commit hash to stream a diff between two arbitrary hashes */
				readonly untilId?: string
				/** @description Optional whitespace flag which can be set to <code>ignore-all</code> */
				readonly whitespace?: string
				/** @description <code>true</code> to embed comments in the diff (the default); otherwise, <code>false</code> to stream the diff without comments. Not applicable if streaming raw diff */
				readonly withComments?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The path to the file which should be diffed (optional) */
				readonly path: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request ID. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of differences from a pull request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestDiff"]
				}
			}
			/** @description If the request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository or pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly canMerge: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The mergeability status of the pull request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequestMergeability"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the specified pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified pull request is not open. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly merge: {
		readonly parameters: {
			readonly query?: {
				/** @description The current version of the pull request. If the server's version isn't the same as the specified version the operation will fail. To determine the current version of the pull request it should be fetched from the server prior to this operation. Look for the 'version' attribute in the returned JSON structure. */
				readonly version?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The body holder */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestPullRequestMergeRequest"]
			}
		}
		readonly responses: {
			/** @description The merged pull request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequest"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to merge the specified pull request */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The auto-merge setting is not enabled for the repository that this pull request targets. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description One of the following error cases occurred (check the error message for more details):
			 *
			 *     - The pull request has conflicts.
			 *     - A merge check vetoed the merge.
			 *     - The specified version is out of date.
			 *     - The specified pull request is not open.
			 *     - The <em>to</em> repository is archived.
			 *      */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getMergeBase_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request ID. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The common ancestor of the latest commits in the source and target branches of this pull request */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestCommit"]
				}
			}
			/** @description No common parent between exist */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The project, repository, or pull request does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly listParticipants: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Details of the participants in this pull request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestPullRequestParticipant"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly assignParticipantRole: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The participant to be added to the pull request, includes the user and their role */
		readonly requestBody: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestPullRequestAssignParticipantRoleRequest"]
			}
		}
		readonly responses: {
			/** @description Details of the participants in this pull request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequestParticipant"]
				}
			}
			/** @description The request does not have the username and role, or is attempting an invalid assignment. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to update the pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Adding reviewers isn't supported on archived repositories */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly unassignParticipantRole_1: {
		readonly parameters: {
			readonly query?: {
				readonly username?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The update completed. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to update the pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Removing reviewers isn't supported on archived repositories. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateStatus: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @deprecated
				 * @description The current version of the pull request. If the server's version isn't the same as the specified version the operation will fail. To determine the current version of the pull request it should be fetched from the server prior to this operation. Look for the 'version' attribute in the returned JSON structure. Note: This parameter is deprecated. Use last reviewed commit in request body instead
				 */
				readonly version?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
				/** @description The slug for the user changing their status */
				readonly userSlug: string
			}
			readonly cookie?: never
		}
		/** @description The participant representing the status to set, includes the status of the participant and last reviewed commit. If last reviewed commit is provided, it will be used to update the participant status. The operation will fail if the latest commit of the pull request does not match the provided last reviewed commit. If last reviewed commit is not provided, the latest commit of the pull request will be used for the update by default. */
		readonly requestBody: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestPullRequestAssignStatusRequest"]
			}
		}
		readonly responses: {
			/** @description Details of the new participant. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequestParticipant"]
				}
			}
			/** @description The specified status was invalid or the currently authenticated user is the author of the PR and cannot have its status updated. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The pull request is not open, or has been updated since the last reviewed commit specified by the request. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly unassignParticipantRole: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
				/** @description The slug for the user being unassigned */
				readonly userSlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The update completed. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The request does not have the username. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to update the pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Removing reviewers isn't supported on archived repositories. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly reopen: {
		readonly parameters: {
			readonly query?: {
				/** @description The current version of the pull request. If the server's version isn't the same as the specified version the operation will fail. To determine the current version of the pull request it should be fetched from the server prior to this operation. Look for the 'version' attribute in the returned JSON structure. */
				readonly version?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The body holder */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestPullRequestReopenRequest"]
			}
		}
		readonly responses: {
			/** @description The merged pull request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequest"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to reopen the specified pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description One of the following error cases occurred (check the error message for more details):
			 *
			 *     - The pull request is not in a declined state.
			 *     - The specified version is out of date.
			 *     - The <em>to</em> repository is archived.
			 *      */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getReview: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request ID. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of Comments from the supplied pull request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestComment"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository or pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly finishReview: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @deprecated
				 * @description The current version of the pull request. If the server's version isn't the same as the specified version the operation will fail. To determine the current version of the pull request it should be fetched from the server prior to this operation. Look for the 'version' attribute in the returned JSON structure. Note: This parameter is deprecated. Use last reviewed commit in request body instead
				 */
				readonly version?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request ID. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The REST request which contains comment text, last reviewed commit and participant status. If last reviewed commit is provided, it will be used to update the participant status. The operation will fail if the latest commit of the pull request does not match the provided last reviewed commit. If last reviewed commit is not provided, the latest commit of the pull request will be used for the update by default. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestPullRequestFinishReviewRequest"]
			}
		}
		readonly responses: {
			/** @description Getting back the number of published comments and completing the review on a pull request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The request is invalid when there is no request body provided, or the participant status in the request is invalid. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the pull request, update a comment or watch the pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description There is no pull request review for the user to finish. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The pull request has been updated since the last reviewed commit specified by the request, or reviews cannot be made on pull requests in archived repositories. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly discardReview: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request ID. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The pull request review has been discarded. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to discard the the pull request review */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified pull request or repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly watch_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request ID. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The user is now watching the pull request. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to view the pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly unwatch_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request ID. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The user is no longer watching the pull request. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to view the pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly streamRaw: {
		readonly parameters: {
			readonly query?: {
				/** @description A specific commit or ref to retrieve the raw content at, or the default branch if not specified */
				readonly at?: string
				/** @description (Optional) Whether the markup implementation should convert newlines to breaks. If not specified, the value of the markup.render.hardwrap property, which is true by default, will be used */
				readonly hardwrap?: string
				/** @description (Optional) true if HTML should be escaped in the input markup, false otherwise. If not specified, the value of the markup.render.html.escape property, which is true by default, will be used */
				readonly htmlEscape?: string
				/** @description (Optional) true if headings should contain an ID based on the heading content. If not specified, the value of the markup.render.headerids property, which is false by default, will be used */
				readonly includeHeadingId?: string
				/** @description If present or "true", triggers the raw content to be markup-rendered and returned as HTML; otherwise, if not specified, or any value other than "true", the content is streamed without markup */
				readonly markup?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The file path to retrieve content from */
				readonly path: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The raw contents from a file. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The path parameter was not supplied. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly streamReadme: {
		readonly parameters: {
			readonly query?: {
				/** @description A specific commit or ref to retrieve the guidelines at, or the default branch if not specified */
				readonly at?: string
				/** @description (Optional) Whether the markup implementation should convert newlines to breaks. If not specified, the value of the <code>markup.render.hardwrap</code> property, which is <code>true</code> by default, will be used */
				readonly hardwrap?: string
				/** @description (Optional) true if HTML should be escaped in the input markup, false otherwise. If not specified, the value of the <code>markup.render.html.escape</code> property, which is <code>true</code> by default, will be used */
				readonly htmlEscape?: string
				/** @description (Optional) true if headings should contain an ID based on the heading content. If not specified, the value of the <code>markup.render.headerids</code> property, which is false by default, will be used */
				readonly includeHeadingId?: string
				/** @description If present or <code>"true"</code>, triggers the raw content to be markup-rendered and returned as HTML; otherwise, if not specified, or any value other than <code>"true"</code>, the content is streamed without markup */
				readonly markup?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The README for the repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The currently authenticated user has insufficient permissions to read the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly retryCreateRepository: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The newly created repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRepository"]
				}
			}
			/** @description The repository was not created due to a validation error. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to create a repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRefChangeActivity: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description (optional) exact match for a ref ID to filter ref change activity for */
				readonly ref?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of ref change activity. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestRepositoryRefChangeActivity"][]
					}
				}
			}
			/** @description The user is currently not authenticated or the user does not have REPO_ADMIN permission. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly findBranches: {
		readonly parameters: {
			readonly query?: {
				/** @description (optional) Partial match for a ref ID to filter minimal refs for */
				readonly filterText?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of branches with ref change activities. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestMinimalRef"][]
					}
				}
			}
			/** @description The user is currently not authenticated or the user does not have REPO_ADMIN permission. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRelatedRepositories: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of repositories related to the request repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestRepository"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to see the request repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The request repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly search_2: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Filter names by the provided text
				 * @example Access
				 */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description Order by */
				readonly order?: "NAME_ASC" | "NAME_DESC"
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Page of allowlist rules */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestSecretScanningAllowlistRule"][]
					}
				}
			}
			/** @description The request was not a correctly formed allowlist rule. See returned error for more details */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user is not permitted to view repository rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createAllowlistRule_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description Allowlist rule to create, either the line regular expression or the path regular expression must be present */
		readonly requestBody: {
			readonly content: {
				readonly "*/*": components["schemas"]["RestSecretScanningAllowlistRuleSetRequest"]
			}
		}
		readonly responses: {
			/** @description The created rule */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSecretScanningAllowlistRule"]
				}
			}
			/** @description The request did not contain a correctly formed allowlist rule. See returned error for more details */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user is not permitted to create repository rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAllowlistRule_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/**
				 * @description The allowlist rule id.
				 * @example 7
				 */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The requested allowlist rule */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSecretScanningAllowlistRule"]
				}
			}
			/** @description The authenticated user is not permitted to view repository allowlist rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The requested allowlist rule was not found */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly editAllowlistRule_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/**
				 * @description The allowlist rule id.
				 * @example 7
				 */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody: {
			readonly content: {
				readonly "*/*": components["schemas"]["RestSecretScanningAllowlistRuleSetRequest"]
			}
		}
		readonly responses: {
			/** @description The updated allowlist rule */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSecretScanningAllowlistRule"]
				}
			}
			/** @description The request did not contain a correctly formed allowlist rule. See returned error for more details */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user is not permitted to edit repository allowlist rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteAllowlistRule_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/**
				 * @description The allowlist rule id.
				 * @example 7
				 */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Empty response indicating that the allowlist rule was deleted */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The authenticated user is not permitted to delete repository allowlist rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly isRepoExempt: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description True if the repository is exempt from secret scanning, false otherwise */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The authenticated user is not permitted to check whether a repository is exempt from secret scanning */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly addExemptRepo: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description An exempt repo was added */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The authenticated user is not permitted to exempt a repository from secret scanning */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description At least one of specified repositories have already been previously made exempt. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteExemptRepo: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Empty response indicating that the exempt repository was deleted */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The authenticated user is not permitted to delete an exempt repository */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly search_3: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Filter names by the provided text
				 * @example Access
				 */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description Order by */
				readonly order?: "NAME_ASC" | "NAME_DESC"
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Page of rules */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestSecretScanningRule"][]
					}
				}
			}
			/** @description The request was not correctly formed rule. See returned error for more details */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user is not permitted to view repository rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createRule_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description Rule to create, either the line regular expression or the path regular expression must be present */
		readonly requestBody: {
			readonly content: {
				readonly "*/*": components["schemas"]["RestSecretScanningRuleSetRequest"]
			}
		}
		readonly responses: {
			/** @description The created rule */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSecretScanningRule"]
				}
			}
			/** @description The request did not contain a correctly formed rule. See returned error for more details */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user is not permitted to create repository rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRule_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/**
				 * @description The rule id.
				 * @example 7
				 */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The requested rule */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSecretScanningRule"]
				}
			}
			/** @description The authenticated user is not permitted to view repository rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The requested rule was not found */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly editRule_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/**
				 * @description The rule id.
				 * @example 7
				 */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody: {
			readonly content: {
				readonly "*/*": components["schemas"]["RestSecretScanningRuleSetRequest"]
			}
		}
		readonly responses: {
			/** @description The updated rule */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSecretScanningRule"]
				}
			}
			/** @description The request did not contain a correctly formed rule. See returned error for more details */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user is not permitted to edit repository rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteRule_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/**
				 * @description The rule id.
				 * @example 7
				 */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Empty response indicating that the rule was deleted */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The authenticated user is not permitted to delete repository rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAutoDeclineSettings_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The auto decline settings */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestAutoDeclineSettings"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the auto decline settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setAutoDeclineSettings_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The settings to create or update */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestAutoDeclineSettingsRequest"]
			}
		}
		readonly responses: {
			/** @description The auto decline settings */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestAutoDeclineSettings"]
				}
			}
			/** @description inactivityWeeks was not one of 1, 2, 4, 8, or, 12, or the enabled parameter was not included in the request. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to create or update the auto decline settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteAutoDeclineSettings_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The auto decline settings have been deleted successfully. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete the auto decline settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly get_5: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The pull request auto-merge settings */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestAutoMergeRestrictedSettings"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the pull request auto-merge settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly set_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The settings to create or update */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestAutoMergeSettingsRequest"]
			}
		}
		readonly responses: {
			/** @description The pull request auto-merge settings */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestAutoMergeRestrictedSettings"]
				}
			}
			/** @description The 'enabled' field was not provided correctly. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to create or update the pull request auto-merge settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The pull request auto-merge settings cannot be modified due to a restriction enforced by the supplied repository's project. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly delete_5: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The pull request auto-merge settings */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete the pull request auto-merge settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The pull request auto-merge settings cannot be modified due to a restriction enforced by the supplied repository's project. */
			readonly 403: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRepositoryHooks_1: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description The optional type to filter by. */
				readonly type?: "POST_RECEIVE" | "PRE_RECEIVE"
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of repository hooks with their associated enabled state. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestRepositoryHook"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the hooks. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRepositoryHook_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The hook key. */
				readonly hookKey: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The repository hooks with their associated enabled state for the supplied hookKey. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRepositoryHook"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the hook. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository hook does not exist for the given repository, or the repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteRepositoryHook: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The hook key. */
				readonly hookKey: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The hook configuration matching the supplied <strong>hookKey</strong> and <strong>repositorySlug</strong> was deleted */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The settings specified are invalid. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to delete the hook. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or hook does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly enableHook_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: {
				/** @description The content length. */
				readonly "Content-Length"?: string
			}
			readonly path: {
				/** @description The hook key. */
				readonly hookKey: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The repository hooks with their associated enabled state for the supplied hookKey. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRepositoryHook"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to enable the hook. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or hook does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly disableHook_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The hook key. */
				readonly hookKey: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The repository hooks with their associated enabled state for the supplied hookKey. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRepositoryHook"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to disable the hook. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or hook does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getSettings_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The hook key. */
				readonly hookKey: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The settings for the hook. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["ExampleSettings"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the hook settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or hook does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setSettings_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The hook key. */
				readonly hookKey: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The raw settings. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["ExampleSettings"]
			}
		}
		readonly responses: {
			/** @description The settings for the hook. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["ExampleSettings"]
				}
			}
			/** @description The settings specified are invalid. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to modify the hook settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or hook does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getPullRequestSettings_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The repository pull request settings for the context repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRepositoryPullRequestSettings"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to see the specified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updatePullRequestSettings_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The updated settings. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestRepositoryPullRequestSettings"]
			}
		}
		readonly responses: {
			/** @description The repository pull request settings for the context repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRepositoryPullRequestSettings"]
				}
			}
			/** @description The repository pull request settings were not updated due to a validation error. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to see the specified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getReviewerGroups_1: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A `page` of reviewer group(s) of the provided scope and its inherited scope. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestReviewerGroup"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository scope supplied does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly create_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The request containing the details of the reviewer group. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestReviewerGroup"]
			}
		}
		readonly responses: {
			/** @description The newly created reviewer group. */
			readonly 201: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestReviewerGroup"]
				}
			}
			/** @description The request is missing a reviewer group name. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository scope supplied does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The new created name already exists. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getReviewerGroup_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the reviewer group to be retrieved */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The reviewer group. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestReviewerGroup"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The ID supplied does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly update_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the reviewer group to be updated */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The request containing the attributes of the reviewer group to be updated. Only the attributes to be updated need to be present in this object. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestReviewerGroup"]
			}
		}
		readonly responses: {
			/** @description The updated reviewer group. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestReviewerGroup"]
				}
			}
			/** @description The updated attribute does not meet the requirements. E.g. the name exceeds 50 characters, setting name to blank. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository scope supplied does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The new updated name already exists. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly delete_7: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the reviewer group to be deleted */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The operation was successful */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete the reviewer group in this repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Unable to find the supplied reviewer group ID. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getUsers: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the reviewer group to be retrieved */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The list of users of a reviewer group. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json;charset=UTF-8": readonly components["schemas"]["RestApplicationUser"][]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json;charset=UTF-8": components["schemas"]["RestErrors"]
				}
			}
			/** @description The ID supplied does not exist.d */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json;charset=UTF-8": components["schemas"]["RestErrors"]
				}
			}
		}
	}
	readonly getTags: {
		readonly parameters: {
			readonly query?: {
				/** @description The text to match on. */
				readonly filterText?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description Ordering of refs either ALPHABETICAL (by name) or MODIFICATION (last updated) */
				readonly orderBy?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The tags matching the supplied <strong>filterText</strong>. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestTag"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to read the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createTagForRepository: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The request to create a tag containing a <strong>name</strong>, <strong>startPoint</strong>, and optionally a <strong>message</strong> */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestCreateTagRequest"]
			}
		}
		readonly responses: {
			/** @description The created tag. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestTag"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to write to the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getTag: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The name of the tag to be retrieved. */
				readonly name: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The tag which matches the supplied <strong>name</strong>. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestTag"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to read the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified tag does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly watch_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The repository to watch. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestRepository"]
			}
		}
		readonly responses: {
			/** @description The user is now watching the repository. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly unwatch_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The user is no longer watching the repository. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly findWebhooks_1: {
		readonly parameters: {
			readonly query?: {
				/** @description List of <code>com.atlassian.webhooks.WebhookEvent</code> IDs to filter for */
				readonly event?: string
				/** @description <code>true</code> if statistics should be provided for all found webhooks */
				readonly statistics?: boolean
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of webhooks. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The currently authenticated user has insufficient permissions to find webhooks in the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createWebhook_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The webhook to be created for this repository. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestWebhook"]
			}
		}
		readonly responses: {
			/** @description A created webhook. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestWebhook"]
				}
			}
			/** @description The webhook parameters were invalid or not supplied. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to create webhooks in the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getWebhook_1: {
		readonly parameters: {
			readonly query?: {
				/** @description <code>true</code> if statistics should be provided for the webhook */
				readonly statistics?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
				/** @description ID of the webhook */
				readonly webhookId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A webhook. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestWebhook"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to get a webhook in the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository does not exist, or the webhook does not exist in the repository. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateWebhook_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
				/** @description Id of the existing webhook */
				readonly webhookId: string
			}
			readonly cookie?: never
		}
		/** @description The representation of the updated values for the webhook */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestWebhook"]
			}
		}
		readonly responses: {
			/** @description A webhook. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestWebhook"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to update a webhook in this repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository does not exist, or the webhook does not exist in the repository. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteWebhook_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
				/** @description The ID of the webhook to be deleted. */
				readonly webhookId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The webhook for the repository has been deleted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete webhooks in the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist, or webhook does not exist in this repository. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getLatestInvocation_1: {
		readonly parameters: {
			readonly query?: {
				/** @description The string ID of a specific event to retrieve the last invocation for. */
				readonly event?: string
				/** @description The outcome to filter for. Can be SUCCESS, FAILURE, ERROR. None specified means that the all will be considered */
				readonly outcome?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
				/** @description ID of the webhook */
				readonly webhookId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A webhook invocation dataset. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestDetailedInvocation"]
				}
			}
			/** @description No webhook invocations exist. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to get webhook invocations in the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist, or the webhook does not exist in the repository. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getStatistics_1: {
		readonly parameters: {
			readonly query?: {
				/** @description The string ID of a specific event to retrieve the last invocation for. May be empty, in which case all events are considered */
				readonly event?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
				/** @description ID of the webhook */
				readonly webhookId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A webhook invocation dataset. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestInvocationHistory"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to get webhook statistics in the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist, or the webhook does not exist in the repository. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getStatisticsSummary_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
				/** @description ID of the webhook */
				readonly webhookId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A webhook invocation dataset. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestInvocationHistory"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to get webhook statistics summary in the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The repository does not exist, or the webhook does not exist in the repository. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly searchWebhooks: {
		readonly parameters: {
			readonly query?: {
				/** @description List of <code>com.atlassian.webhooks.WebhookEvent</code> ids to filter for */
				readonly event?: string
				/** @description Scopes to filter by. This parameter can be specified once e.g. "scopeType=repository", or twice e.g. "scopeType=repository&scopeType=project", to filter by more than one scope level.  */
				readonly scopeType?: string
				/** @description <code>true</code> if statistics should be provided for all found webhooks */
				readonly statistics?: boolean
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of webhooks. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The currently authenticated user has insufficient permissions to find webhooks in the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly testWebhook_1: {
		readonly parameters: {
			readonly query?: {
				/** @description Whether SSL verification is required for the specified webhook URL. Default value is  <code>true</code>. */
				readonly sslVerificationRequired?: string
				/** @description The url in which to connect to */
				readonly url?: string
				readonly webhookId?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description Basic authentication credentials, if required. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestWebhookCredentials"]
			}
		}
		readonly responses: {
			/** @description A webhook. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestWebhookRequestResponse"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to test a connection. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly searchAllowlistRule: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Filter names by the provided text
				 * @example Access
				 */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description Order by */
				readonly order?: "NAME_ASC" | "NAME_DESC"
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Page of allowlist rules */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestSecretScanningAllowlistRule"][]
					}
				}
			}
			/** @description The request was not correctly formed allowlist rule. See returned error for more details */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user is not permitted to view project allowlist rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createAllowlistRule: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		/** @description Allowlist rule to create, either the line regular expression or the path regular expression must be present */
		readonly requestBody: {
			readonly content: {
				readonly "*/*": components["schemas"]["RestSecretScanningAllowlistRuleSetRequest"]
			}
		}
		readonly responses: {
			/** @description The created allowlist rule */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSecretScanningAllowlistRule"]
				}
			}
			/** @description The request did not contain a correctly formed allowlist rule. See returned error for more details */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user is not permitted to create project allowlist rules. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAllowlistRule: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/**
				 * @description The allowlist rule id.
				 * @example 7
				 */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The requested allowlist rule */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSecretScanningAllowlistRule"]
				}
			}
			/** @description The authenticated user is not permitted to view project allowlist rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The requested allowlist rules was not found */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly editAllowlistRule: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/**
				 * @description The allowlist rule id.
				 * @example 7
				 */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody: {
			readonly content: {
				readonly "*/*": components["schemas"]["RestSecretScanningAllowlistRuleSetRequest"]
			}
		}
		readonly responses: {
			/** @description The updated allowlist rule */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSecretScanningAllowlistRule"]
				}
			}
			/** @description The request did not contain a correctly formed allowlist rule. See returned error for more details */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user is not permitted to modify project allowlist rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteAllowlistRule: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/**
				 * @description The allowlist rule id.
				 * @example 7
				 */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Empty response indicating that the rule was deleted, or not found at this location */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The authenticated user is not permitted to delete project rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly findExemptReposByProject: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description Order by project name followed by repository name either ascending or descending, defaults to ascending. */
				readonly order?: "NAME_ASC" | "NAME_DESC"
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Page of repositories */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestRepository"][]
					}
				}
			}
			/** @description The authenticated user is not permitted to search exempt repositories for this project */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly bulkAddExemptRepositories_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "*/*": readonly components["schemas"]["RestRepositorySelector"][]
			}
		}
		readonly responses: {
			/** @description All requested repositories were made exempt */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The authenticated user is not permitted to exempt a repository from secret scanning. No repositories were made exempt. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly search_1: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Filter names by the provided text
				 * @example Access
				 */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description Order by */
				readonly order?: "NAME_ASC" | "NAME_DESC"
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Page of rules */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestSecretScanningRule"][]
					}
				}
			}
			/** @description The request was not correctly formed rule. See returned error for more details */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user is not permitted to view project rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createRule: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		/** @description Rule to create, either the line regular expression or the path regular expression must be present */
		readonly requestBody: {
			readonly content: {
				readonly "*/*": components["schemas"]["RestSecretScanningRuleSetRequest"]
			}
		}
		readonly responses: {
			/** @description The created rule */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSecretScanningRule"]
				}
			}
			/** @description The request did not contain a correctly formed rule. See returned error for more details */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user is not permitted to create project rules. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRule: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/**
				 * @description The rule id.
				 * @example 7
				 */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The requested rule */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSecretScanningRule"]
				}
			}
			/** @description The authenticated user is not permitted to view project rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The requested rules was not found */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly editRule: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/**
				 * @description The rule id.
				 * @example 7
				 */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody: {
			readonly content: {
				readonly "*/*": components["schemas"]["RestSecretScanningRuleSetRequest"]
			}
		}
		readonly responses: {
			/** @description The updated rule */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSecretScanningRule"]
				}
			}
			/** @description The request did not contain a correctly formed rule. See returned error for more details */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user is not permitted to modify project rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteRule: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/**
				 * @description The rule id.
				 * @example 7
				 */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Empty response indicating that the rule was deleted, or not found at this location */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The authenticated user is not permitted to delete project rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly get_7: {
		readonly parameters: {
			readonly query: {
				/** @description The component key to uniquely identify individually restrictable subcomponents of a feature within the provided feature key and namespace */
				readonly componentKey?: string
				/** @description The feature key to uniquely identify the feature within the provided namespace */
				readonly featureKey: string
				/** @description The namespace used to identify the provider of the feature */
				readonly namespace: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The settings restriction associated with the provided namespace and feature key */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestProjectSettingsRestriction"]
				}
			}
			/** @description The settings restriction could not be retrieved because the provided parameters were invalid. Possible issues include:
			 *
			 *     - The namespace was not provided, or longer than 255 characters
			 *     - The featureKey was not provided, or longer than 255 characters
			 *     - The provided componentKey was fewer than 2 characters, or longer than 255 characters */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve a settings restriction */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project, or settings restriction does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly create_3: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		/** @description The project settings restriction to create */
		readonly requestBody: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestProjectSettingsRestrictionRequest"]
			}
		}
		readonly responses: {
			/** @description The settings restriction was successfully created */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestProjectSettingsRestriction"]
				}
			}
			/** @description The settings restriction was not created because the request was invalid. Possible issues include:
			 *
			 *     - The namespace was not provided, or longer than 255 characters
			 *     - The featureKey was not provided, or longer than 255 characters
			 *     - The provided componentKey was fewer than 2 characters, or longer than 255 characters */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to create a settings restriction */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description A settings restriction with the same namespace, featureKey and componentKey already exists on this project */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly delete_9: {
		readonly parameters: {
			readonly query: {
				/** @description A key to uniquely identify individually restrictable subcomponents of a feature within the provided feature key and namespace */
				readonly componentKey?: string
				/** @description A key to uniquely identify the feature within the provided namespace */
				readonly featureKey: string
				/** @description A namespace used to identify the provider of the feature */
				readonly namespace: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The specified settings restriction was successfully deleted or there were no existing restrictions that match the specified criteria. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The settings restriction was not deleted because the request was invalid. Possible issues include:
			 *
			 *     - The namespace was not provided, or longer than 255 characters
			 *     - The featureKey was not provided, or longer than 255 characters
			 *     - The provided componentKey was fewer than 2 characters, or longer than 255 characters */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to delete a settings restriction */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAll: {
		readonly parameters: {
			readonly query: {
				/** @description A key to uniquely identify the feature within the provided namespace */
				readonly featureKey: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description A namespace used to identify the provider of the feature */
				readonly namespace: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of settings restrictions associated with the provided namespace and feature key */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestProjectSettingsRestriction"][]
					}
				}
			}
			/** @description The settings restrictions could not be retrieved because the provided parameters were invalid. Possible issues include:
			 *
			 *     - The namespace was not provided, or longer than 255 characters
			 *     - The featureKey was not provided, or longer than 255 characters */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve project settings restrictions */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAutoDeclineSettings: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The auto decline settings */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestAutoDeclineSettings"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the auto decline settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setAutoDeclineSettings: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		/** @description The settings to create or update */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestAutoDeclineSettingsRequest"]
			}
		}
		readonly responses: {
			/** @description The auto decline settings */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestAutoDeclineSettings"]
				}
			}
			/** @description inactivityWeeks was not one of 1, 2, 4, 8, or, 12, or the enabled parameter was not included in the request. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to create or update the auto decline settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteAutoDeclineSettings: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The auto decline settings have been deleted successfully. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete the auto decline settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly get_4: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The pull request auto-merge settings */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestAutoMergeRestrictedSettings"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the pull request auto-merge settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly set: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		/** @description The settings to create or update */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestAutoMergeProjectSettingsRequest"]
			}
		}
		readonly responses: {
			/** @description The pull request auto-merge settings */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestAutoMergeRestrictedSettings"]
				}
			}
			/** @description The 'enabled' and 'restrictionAction' fields were not provided correctly. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to create or update the pull request auto-merge settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly delete_4: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The pull request auto-merge settings */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete the pull request auto-merge settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRepositoryHooks: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description The optional type to filter by. */
				readonly type?: "POST_RECEIVE" | "PRE_RECEIVE"
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of repository hooks with their associated enabled state. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestRepositoryHook"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the hooks. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRepositoryHook: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The hook key. */
				readonly hookKey: string
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Returns the repository hooks with their associated enabled state for the supplied hookKey. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRepositoryHook"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to enable the hook. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository hook does not exist for the given project, or the project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly enableHook: {
		readonly parameters: {
			readonly query?: never
			readonly header?: {
				/** @description The content length. */
				readonly "Content-Length"?: number
			}
			readonly path: {
				/** @description The hook key. */
				readonly hookKey: string
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The repository hooks with their associated enabled state for the supplied hookKey. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRepositoryHook"]
				}
			}
			/** @description The settings specified are invalid. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to enable the hook. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project or hook does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly disableHook: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The hook key. */
				readonly hookKey: string
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The repository hooks with their associated enabled state for the supplied hookKey. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRepositoryHook"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to disable the hook. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project or hook does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getSettings: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The hook key. */
				readonly hookKey: string
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The settings for the hook. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["ExampleSettings"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the hook settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project or hook does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setSettings: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The complete module key of the hook module. */
				readonly hookKey: string
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		/** @description The raw settings. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["ExampleSettings"]
			}
		}
		readonly responses: {
			/** @description The settings for the hook. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["ExampleSettings"]
				}
			}
			/** @description The settings specified are invalid. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to modify the hook settings. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project or hook does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getPullRequestSettings: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The SCM to get strategies for. */
				readonly scmId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The merge configuration of the request project. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequestSettings"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to see the request repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The request repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updatePullRequestSettings: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The SCM to get strategies for. */
				readonly scmId: string
			}
			readonly cookie?: never
		}
		/** @description The settings. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestPullRequestSettings"]
			}
		}
		readonly responses: {
			/** @description The merge configuration of the request project. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequestSettings"]
				}
			}
			/** @description The repository pull request merge strategies were not updated due to a validation error. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to administrate the specified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getReviewerGroups: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of reviewer group(s) of the provided scope. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestReviewerGroup"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The project scope supplied does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly create_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		/** @description The reviewer group to be create */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestReviewerGroup"]
			}
		}
		readonly responses: {
			/** @description The newly created reviewer group. */
			readonly 201: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestReviewerGroup"]
				}
			}
			/** @description The request is missing a reviewer group name. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The project scope supplied does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The new created name already exists. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getReviewerGroup: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the reviewer group to be retrieved */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The reviewer group. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestReviewerGroup"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The ID supplied does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly update_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the reviewer group to be updated */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		/** @description The request containing the attributes of the reviewer group to be updated. Only the attributes to be updated need to be present in this object. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestReviewerGroup"]
			}
		}
		readonly responses: {
			/** @description A page of changes. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestReviewerGroup"]
				}
			}
			/** @description The updated attribute does not meet the requirements. E.g. the name exceeds 50 characters, setting name to blank. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The project scope supplied does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The new updated name already exists. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly delete_6: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the reviewer group to be deleted */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The operation was successful. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete the reviewer group in this project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Unable to find the supplied reviewer group ID. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly findWebhooks: {
		readonly parameters: {
			readonly query?: {
				/** @description List of <code>com.atlassian.webhooks.WebhookEvent</code> IDs to filter for */
				readonly event?: string
				/** @description <code>true</code> if statistics should be provided for all found webhooks */
				readonly statistics?: boolean
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of webhooks. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The currently authenticated user has insufficient permissions to find webhooks in the project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createWebhook: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		/** @description The webhook to be created for this project. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestWebhook"]
			}
		}
		readonly responses: {
			/** @description A created webhook. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestWebhook"]
				}
			}
			/** @description The webhook parameters were invalid or not supplied. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to create webhooks in the project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getWebhook: {
		readonly parameters: {
			readonly query?: {
				/** @description <code>true</code> if statistics should be provided for the webhook */
				readonly statistics?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description ID of the webhook */
				readonly webhookId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A webhook. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestWebhook"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to get a webhook in the project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The project does not exist, or the webhook does not exist in the project. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateWebhook: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description Id of the existing webhook */
				readonly webhookId: string
			}
			readonly cookie?: never
		}
		/** @description The representation of the updated values for the webhook */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestWebhook"]
			}
		}
		readonly responses: {
			/** @description A webhook. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestWebhook"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to update a webhook in this project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The project does not exist, or the webhook does not exist in the project. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteWebhook: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the webhook to be deleted. */
				readonly webhookId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The webhook for the project has been deleted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete webhooks in the project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist, or webhook does not exist in this project. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getLatestInvocation: {
		readonly parameters: {
			readonly query?: {
				/** @description The string ID of a specific event to retrieve the last invocation for. */
				readonly event?: string
				/** @description The outcome to filter for. Can be SUCCESS, FAILURE, ERROR. None specified means that the all will be considered */
				readonly outcome?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description ID of the webhook */
				readonly webhookId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A webhook invocation dataset. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestDetailedInvocation"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to get webhook invocations in the project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist, or the webhook does not exist in the project. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getStatistics: {
		readonly parameters: {
			readonly query?: {
				/** @description The string ID of a specific event to retrieve the last invocation for. May be empty, in which case all events are considered */
				readonly event?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description ID of the webhook */
				readonly webhookId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A webhook invocation dataset. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestInvocationHistory"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to get webhook statistics in the project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist, or the webhook does not exist in the project. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getStatisticsSummary: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description ID of the webhook */
				readonly webhookId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A webhook invocation dataset. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestInvocationHistory"]
				}
			}
			/** @description No webhook invocations exist. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to get webhook statistics summary in the project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The project does not exist, or the webhook does not exist in the project. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly testWebhook: {
		readonly parameters: {
			readonly query?: {
				readonly sslVerificationRequired?: boolean
				/** @description The url in which to connect to */
				readonly url?: string
				readonly webhookId?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		/** @description Basic authentication credentials, if required. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestWebhookCredentials"]
			}
		}
		readonly responses: {
			/** @description A webhook. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestWebhookRequestResponse"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to test a connection. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRepositories_1: {
		readonly parameters: {
			readonly query?: {
				/** @description (optional) if specified, this will limit the resulting repository list to ones whose are <tt>ACTIVE</tt>, <tt>ARCHIVED</tt> or <tt>ALL</tt> for both. The match performed is case-insensitive. This filter defaults to <tt>ACTIVE</tt> when not set. <em>Available since 8.0</em> */
				readonly archived?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description (optional) if specified, this will limit the resulting repository list to ones whose name matches this parameter's value. The match performed is case-insensitive and any leading and/or trailing whitespace characters on the <code>name</code> parameter will be stripped. */
				readonly name?: string
				/** @description (optional) if specified, it must be a valid repository permission level name and will limit the resulting repository list to ones that the requesting user has the specified permission level to. If not specified, the default implicit 'read' permission level will be assumed. The currently supported explicit permission values are <tt>REPO_READ</tt>, <tt>REPO_WRITE</tt> and <tt>REPO_ADMIN</tt>. */
				readonly permission?: "REPO_ADMIN" | "REPO_READ" | "REPO_WRITE"
				/** @description (optional) if specified, this will limit the resulting repository list to ones whose project's key matches this parameter's value. The match performed is case-insensitive and any leading  and/or trailing whitespace characters on the <code>projectKey</code> parameter will be stripped. <em>Available since 8.0</em> */
				readonly projectkey?: string
				/** @description (optional) if specified, this will limit the resulting repository list to ones whose project's name matches this parameter's value. The match performed is case-insensitive and any leading and/or trailing whitespace characters on the <code>projectname</code> parameter will be stripped. */
				readonly projectname?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description (optional) if specified, it must be a valid repository state name and will limit the resulting repository list to ones that are in the specified state. The currently supported explicit state values are <tt>AVAILABLE</tt>, <tt>INITIALISING</tt>, <tt>INITIALISATION_FAILED</tt> and <tt>OFFLINE</tt>.<br> <em>Available since 5.13</em> */
				readonly state?:
					| "AVAILABLE"
					| "INITIALISATION_FAILED"
					| "INITIALISING"
					| "OFFLINE"
				/** @description (optional) if specified, this will limit the resulting repository list based on the repositories visibility. Valid values are <em>public</em> or <em>private</em>. */
				readonly visibility?: "private" | "public"
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of repositories. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestRepository"][]
					}
				}
			}
			/** @description The <code>visibility</code> parameter contains an invalid value. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly findExemptReposByScope: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description Order by project name followed by repository name either ascending or descending, defaults to ascending. */
				readonly order?: "NAME_ASC" | "NAME_DESC"
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Page of repositories */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestRepository"][]
					}
				}
			}
			/** @description The authenticated user is not permitted to search exempt repositories globally */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly bulkAddExemptRepositories: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "*/*": readonly components["schemas"]["RestRepositorySelector"][]
			}
		}
		readonly responses: {
			/** @description All requested repositories were made exempt */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The authenticated user is not permitted to exempt a repository from secret scanning. No repositories were made exempt. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description At least one of specified repositories have already been previously made exempt. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly search_4: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Filter by rule name
				 * @example Access
				 */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description Order by */
				readonly order?: "NAME_ASC" | "NAME_DESC"
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Page of rules */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestSecretScanningRule"][]
					}
				}
			}
			/** @description The request did not contain a correctly formed search request, see returned error for more details. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user is not permitted to search global rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createRule_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description Rule to create, either the line regular expression or the path regular expression must be present */
		readonly requestBody: {
			readonly content: {
				readonly "*/*": components["schemas"]["RestSecretScanningRuleSetRequest"]
			}
		}
		readonly responses: {
			/** @description The created rule */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSecretScanningRule"]
				}
			}
			/** @description The request did not contain a correctly formed rule. See returned error for more details */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user is not permitted to create global rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRule_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/**
				 * @description The rule id.
				 * @example 7
				 */
				readonly id: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The requested rule */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSecretScanningRule"]
				}
			}
			/** @description The authenticated user is not permitted to get global rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The requested rule was not found */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly editRule_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/**
				 * @description The rule id.
				 * @example 7
				 */
				readonly id: string
			}
			readonly cookie?: never
		}
		readonly requestBody: {
			readonly content: {
				readonly "*/*": components["schemas"]["RestSecretScanningRuleSetRequest"]
			}
		}
		readonly responses: {
			/** @description The updated rule */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSecretScanningRule"]
				}
			}
			/** @description The request did not contain a correctly formed rule. See returned error for more details */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user is not permitted to update global rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteRule_2: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/**
				 * @description The rule id.
				 * @example 7
				 */
				readonly id: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Empty response indicating that the rule was deleted */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The authenticated user is not permitted to delete global rules */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAllCertificates: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of X.509 certificates */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestX509Certificate"]
				}
			}
			/** @description The authenticated user is not permitted to get X.509 certificates */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createCertificate: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description The multipart form data containing the certificate in a form-field named 'certificate' */
		readonly requestBody: {
			readonly content: {
				readonly "multipart/form-data": components["schemas"]["ExampleCertificateMultipartFormData"]
			}
		}
		readonly responses: {
			/** @description The newly created X.509 certificate */
			readonly 201: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestX509Certificate"]
				}
			}
			/** @description The request did not contain a valid X.509 certificate request. See returned error for more details */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The authenticated user is not permitted to create X.509 certificates */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteCertificate: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the X.509 certificate. */
				readonly id: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description An empty response if the X.509 certificate was successfully deleted */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestX509Certificate"]
				}
			}
			/** @description The authenticated user is not permitted to delete X.509 certificates */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description There is no X.509 certificate with the given ID */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateCertificateRevocationListEntries: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the issuer certificate. */
				readonly id: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Successfully started processing CRLs. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The authenticated user is not permitted to update X.509 CRL entries */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description There is no X.509 certificate with the given ID */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getSystemSigningConfiguration: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The configuration details for system signing Git objects */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSystemSigningConfiguration"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the configuration details for system signing Git objects. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateSystemSigningConfiguration: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": {
					/** @example false */
					readonly enabled?: boolean
				}
			}
		}
		readonly responses: {
			/** @description The updated configuration details for system signing Git objects */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSystemSigningConfiguration"]
				}
			}
			/** @description The configuration details could not be updated because the provided request was invalid */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the configuration details for system signing Git objects. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getUsers_2: {
		readonly parameters: {
			readonly query?: {
				/** @description Return only users, whose username, name or email address <i>contain</i> the <code> filter</code> value */
				readonly filter?: string
				/** @description return only users who are members of the given group */
				readonly group?: string
				/** @description The "root" of a permission filter, whose value must be a valid global, project, or repository permission. Additional filter parameters referring to this filter that specify the resource (project or repository) to apply the filter to must be prefixed with <code>permission.</code>. See the section "Permission Filters" above for more details. */
				readonly permission?: string
				/** @description The "root" of a single permission filter, similar to the <code>permission</code> parameter, where "N" is a natural number starting from 1. This allows clients to specify multiple permission filters, by providing consecutive filters as <code>permission.1</code>, <code>permission.2</code> etc. Note that the filters numbering has to start with 1 and be continuous for all filters to be processed. The total allowed number of permission filters is 50 and all filters exceeding that limit will be dropped. See the section "Permission Filters" above for more details on how the permission filters are processed. */
				readonly "permission.N"?: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of users. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestApplicationUser"]
				}
			}
			/** @description The search request was invalid, which may happen for multiple reasons, among
			 *     others:
			 *
			 *
			 *     - permission filter for project/repository permission with no parameters specifying the project or     repository to apply the filter to
			 *     - invalid permission name
			 *     - permission filter for a project/repository permission pointing to a non-existent project or repository
			 *
			 *
			 *     The exact reason for the error and - in most cases - the request parameter name that had invalid value - will be
			 *     provided in the error message. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Authentication failed or was not attempted. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateUserDetails_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description The user update details */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["UserUpdate"]
			}
		}
		readonly responses: {
			/** @description The updated user. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestApplicationUser"]
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Authentication failed or was not attempted. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getUser: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The user slug */
				readonly userSlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The user matching the supplied <strong>userSlug</strong>. Note, this may
			 *     <i>not</i> be the user's username, always use the <strong>user.slug</strong> property. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestApplicationUser"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the user. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly uploadAvatar_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: {
				/**
				 * @description This resource has Cross-Site Request Forgery (XSRF) protection. To allow the request to pass the XSRF check the caller needs to send an <code>X-Atlassian-Token</code> HTTP header with the value <code>no-check</code>.
				 * @example no-check
				 */
				readonly "X-Atlassian-Token"?: string
			}
			readonly path: {
				/** @description The user slug */
				readonly userSlug: string
			}
			readonly cookie?: never
		}
		/** @description Multipart form data containing a single image in a form-field named 'avatar'. */
		readonly requestBody?: {
			readonly content: {
				readonly "multipart/form-data": components["schemas"]["ExampleAvatarMultipartFormData"]
			}
		}
		readonly responses: {
			/** @description The avatar was uploaded successfully. */
			readonly 201: {
				headers: {
					/** @description The Location response header which indicates the URL of the avatar. */
					readonly Location?: string
					readonly [name: string]: unknown
				}
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to update the avatar. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteAvatar: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The user slug */
				readonly userSlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The new avatar URL if the local avatar was successfully deleted or did not exist */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestNamedLink"]
				}
			}
			/** @description The authenticated user has insufficient permissions to delete the specified avatar. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified user does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getUserSettings: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The user slug. */
				readonly userSlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The user settings for the specified user slug. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["ExampleSettingsMap"]
				}
			}
			/** @description The currently authenticated user does not have permission to view the settings of this user. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project, repository, commit, or report does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateSettings: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The user slug. */
				readonly userSlug: string
			}
			readonly cookie?: never
		}
		/** @description A map with the UserSettings entries which must be updated. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["ExampleSettingsMap"]
			}
		}
		readonly responses: {
			/** @description The UserSettings were updated successfully */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user is not a project administrator. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateUserPassword_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description The password update details */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["UserPasswordUpdate"]
			}
		}
		readonly responses: {
			/** @description The user's password was successfully updated. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The request was malformed or the old password was incorrect. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Authentication failed or was not attempted. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly dismissRetentionConfigReviewNotification: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A blank response */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The currently authenticated user has insufficient permissions to dismiss the notification. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRestrictions_1: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description Matcher id to filter on. Requires the matcherType parameter to be specified also. */
				readonly matcherId?: string
				/** @description Matcher type to filter on */
				readonly matcherType?:
					| "BRANCH"
					| "MODEL_BRANCH"
					| "MODEL_CATEGORY"
					| "PATTERN"
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description Types of restrictions to filter on. */
				readonly type?:
					| "fast-forward-only"
					| "no-deletes"
					| "pull-request-only"
					| "read-only"
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A response containing a page of restrictions. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestRefRestriction"][]
					}
				}
			}
			/** @description The request has failed validation. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not permitted to get restrictions on the provided project */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description No restriction exists for the provided ID. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createRestrictions_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The request containing a list of the details of the restrictions to create. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/vnd.atl.bitbucket.bulk+json": readonly components["schemas"]["RestRestrictionRequest"][]
			}
		}
		readonly responses: {
			/** @description Response contains the ref restriction that was just created. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRefRestriction"]
				}
			}
			/** @description The request has failed validation. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to perform this operation. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRestriction_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The restriction id. */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A response containing the restriction. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRefRestriction"]
				}
			}
			/** @description The request has failed validation. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not permitted to get restrictions on the provided project */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description No restriction exists for the provided ID. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteRestriction_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The restriction id. */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description An empty response indicating that the operation was successful */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The request has failed validation. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not permitted to delete restrictions on the provided project */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRestrictions: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description Matcher id to filter on. Requires the matcherType parameter to be specified also. */
				readonly matcherId?: string
				/** @description Matcher type to filter on */
				readonly matcherType?:
					| "BRANCH"
					| "MODEL_BRANCH"
					| "MODEL_CATEGORY"
					| "PATTERN"
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description Types of restrictions to filter on. */
				readonly type?:
					| "fast-forward-only"
					| "no-deletes"
					| "pull-request-only"
					| "read-only"
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A response containing a page of restrictions. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestRefRestriction"][]
					}
				}
			}
			/** @description The request has failed validation. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not permitted to get restrictions on the provided project */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description No restriction exists for the provided ID. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createRestrictions: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		/** @description The request containing a list of the details of the restrictions to create. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/vnd.atl.bitbucket.bulk+json": readonly components["schemas"]["RestRestrictionRequest"][]
			}
		}
		readonly responses: {
			/** @description Response contains the ref restriction that was just created. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRefRestriction"]
				}
			}
			/** @description The request has failed validation. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to perform this operation. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRestriction: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The restriction id. */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A response containing the restriction. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRefRestriction"]
				}
			}
			/** @description The request has failed validation. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not permitted to get restrictions on the provided project */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description No restriction exists for the provided ID. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteRestriction: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The restriction id. */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description An empty response indicating that the operation was successful */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The request has failed validation. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not permitted to delete restrictions on the provided project */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createBranch: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestBranchCreateRequest"]
			}
		}
		readonly responses: {
			/** @description JSON representation of the newly created branch */
			readonly 201: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestBranch"]
				}
			}
			/** @description The branch was not created because the request was invalid, e.g. the provided
			 *     ref name already existed in the repository, or was not a valid ref name in the
			 *     repository */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to create a branch. This could be due to insufficient repository permissions, or lack of branch permission for the provided ref name */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The branch name overlapped with an existing branch */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteBranch: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description Branch delete request */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestBranchDeleteRequest"]
			}
		}
		readonly responses: {
			/** @description An empty response indicating that the branch no longer exists in the repository */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The branch was not deleted because the request was invalid, e.g. no ref name
			 *     to delete was provided, or the provided ref name points to the default branch
			 *     in the repository that cannot be deleted */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to delete a
			 *     branch. This could be due to insufficient repository permissions, or lack of
			 *     branch permission for the provided ref name. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly findByCommit: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				readonly commitId: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of branch refs associated with the commit */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestMinimalRef"][]
					}
				}
			}
			/** @description The request has timed out processing the branch request */
			readonly 500: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getBuildStatus: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description How the results should be ordered. Options are NEWEST, OLDEST, STATUS
				 * @example newest, oldest, or status
				 */
				readonly orderBy?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description Full SHA1 of the commit (ex: <code>e00cf62997a027bbf785614a93e2e55bb331d268</code>) */
				readonly commitId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A Page of build statuses associated with the commit <br /> (limited to the most recent 100 build statuses associated with the commit) */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestBuildStatus"][]
					}
				}
			}
			/** @description The user is not authenticated or does not have the <b>LICENSED</b> permission. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly addBuildStatus: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/**
				 * @description full SHA1 of the commit
				 * @example e00cf62997a027bbf785614a93e2e55bb331d268
				 */
				readonly commitId: string
			}
			readonly cookie?: never
		}
		/** @description build status to associate with the commit */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestBuildStatus"]
			}
		}
		readonly responses: {
			/** @description An empty response if the build status was successfully stored */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description An error message if the <code>commitId</code> is not a full 40-characters SHA1, if the build status has a missing mandatory field or if the fields are too large */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The user is not authenticated or does not have the <strong>LICENSED</strong> permission */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getMultipleBuildStatusStats: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description full SHA1 of each commit */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": readonly string[]
			}
		}
		readonly responses: {
			/** @description The number of successful/failed/in-progress/cancelled/unknown builds for each commit (with the caveat that the commits <em>without any builds associated with them</em> will not be present in the response) */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMultipleBuildStats"]
				}
			}
			/** @description The user is not authenticated or does not have the <strong>LICENSED</strong> permission */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getBuildStatusStats: {
		readonly parameters: {
			readonly query?: {
				/** @description include a unique build result if there is either only one failed build, only one in-progress build or only one successful build */
				readonly includeUnique?: boolean
			}
			readonly header?: never
			readonly path: {
				/**
				 * @description full SHA1 of the commit
				 * @example e00cf62997a027bbf785614a93e2e55bb331d268
				 */
				readonly commitId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The number of successful/failed/in-progress/cancelled/unknown builds for the commit */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestBuildStats"]
				}
			}
			/** @description The user is not authenticated or does not have the <b>LICENSED</b> permission. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly react: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The comment id */
				readonly commentId: string
				/** @description The commit id */
				readonly commitId: string
				/** @description The emoticon to add */
				readonly emoticon: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The added reaction */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestUserReaction"]
				}
			}
		}
	}
	readonly unReact: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The comment id */
				readonly commentId: string
				/** @description The commit id */
				readonly commitId: string
				/** @description The emoticon to remove */
				readonly emoticon: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The added reaction */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
		}
	}
	readonly react_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The comment id. */
				readonly commentId: string
				/** @description The emoticon to add */
				readonly emoticon: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request id. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The added reaction */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestUserReaction"]
				}
			}
		}
	}
	readonly unReact_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The comment id. */
				readonly commentId: string
				/** @description The emoticon to remove */
				readonly emoticon: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The pull request id. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The added reaction */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
		}
	}
	readonly createPullRequestCondition: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		/** @description The details needed to create a default reviewer pull request condition. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestDefaultReviewersRequest"]
			}
		}
		readonly responses: {
			/** @description The default reviewer pull request condition that was created. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequestCondition"]
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updatePullRequestCondition: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the pull request condition. */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		/** @description The new details for the default reviewer pull request condition. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestDefaultReviewersRequest"]
			}
		}
		readonly responses: {
			/** @description The updated default reviewer pull request condition. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequestCondition"]
				}
			}
			/** @description The request was malformed */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deletePullRequestCondition: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the pull request condition. */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description An empty response indicating that the pull request condition was deleted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description An empty response indicating a pull request condition with the given ID could not be found. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getPullRequestConditions: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The default reviewer pull request conditions associated with the given project. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": readonly components["schemas"]["RestPullRequestCondition"][]
				}
			}
		}
	}
	readonly createPullRequestCondition_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The details needed to create a default reviewer pull request condition. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestDefaultReviewersRequest"]
			}
		}
		readonly responses: {
			/** @description The default reviewer pull request condition that was created. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequestCondition"]
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updatePullRequestCondition_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The ID of the pull request condition */
				readonly id: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": {
					/**
					 * Format: int32
					 * @example 1
					 */
					readonly requiredApprovals?: number
					readonly reviewers?: readonly components["schemas"]["RestApplicationUser"][]
					readonly sourceMatcher?: {
						/** @example main */
						readonly displayId?: string
						/** @example refs/heads/main */
						readonly id?: string
						readonly type?: {
							/** @enum {string} */
							readonly id?:
								| "ANY_REF"
								| "BRANCH"
								| "MODEL_BRANCH"
								| "MODEL_CATEGORY"
								| "PATTERN"
							/** @example Branch */
							readonly name?: string
						}
					}
					readonly targetMatcher?: {
						/** @example main */
						readonly displayId?: string
						/** @example refs/heads/main */
						readonly id?: string
						readonly type?: {
							/** @enum {string} */
							readonly id?:
								| "ANY_REF"
								| "BRANCH"
								| "MODEL_BRANCH"
								| "MODEL_CATEGORY"
								| "PATTERN"
							/** @example Branch */
							readonly name?: string
						}
					}
				}
			}
		}
		readonly responses: {
			/** @description The updated default reviewer pull request condition. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequestCondition"]
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deletePullRequestCondition_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				readonly id: number
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description An empty response indicating that the pull request condition was deleted */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description An empty response indicating a pull request condition with the given ID could not be found. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getPullRequestConditions_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The default reviewer pull request conditions associated with the given repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": readonly components["schemas"]["RestPullRequestCondition"][]
				}
			}
		}
	}
	readonly getReviewers: {
		readonly parameters: {
			readonly query?: {
				/** @description The ID of the source ref */
				readonly sourceRefId?: string
				/** @description The ID of the repository in which the source ref exists */
				readonly sourceRepoId?: string
				/** @description The ID of the target ref */
				readonly targetRefId?: string
				/** @description The ID of the repository in which the target ref exists */
				readonly targetRepoId?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The default reviewer pull request conditions associated with the given repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": readonly components["schemas"]["RestPullRequestCondition"][]
				}
			}
			/** @description The request was malformed. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestErrors"]
				}
			}
		}
	}
	readonly getDefaultTasks_1: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description If present or `"true"`, includes a markup-rendered description */
				readonly markup?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of default tasks */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestDefaultTask"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to delete default tasks */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly addDefaultTask_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The task to be added */
		readonly requestBody: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestDefaultTaskRequest"]
			}
		}
		readonly responses: {
			/** @description The default task */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestDefaultTask"]
				}
			}
			/** @description One or more of the following error cases occurred (check the error message for more details):
			 *
			 *
			 *     - the description is empty- the sourceMatcher or targetMatcher is invalid */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to add a default task */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteAllDefaultTasks_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The default tasks have been deleted successfully. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete default tasks */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateDefaultTask_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
				/** @description The ID of the default task */
				readonly taskId: string
			}
			readonly cookie?: never
		}
		/** @description The task to be updated */
		readonly requestBody: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestDefaultTaskRequest"]
			}
		}
		readonly responses: {
			/** @description The default task */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestDefaultTask"]
				}
			}
			/** @description One or more of the following error cases occurred (check the error message for more details):
			 *
			 *
			 *     - the provided taskId does not exist- the description is empty- the sourceMatcher or targetMatcher is invalid */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to add a default task */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteDefaultTask_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
				/** @description The ID of the default task */
				readonly taskId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The default task has been deleted successfully. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete default tasks */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or task does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getDefaultTasks: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description If present or "true", includes a markup-rendered description */
				readonly markup?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of default tasks */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestDefaultTask"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to delete default tasks */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly addDefaultTask: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		/** @description The task to be added */
		readonly requestBody: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestDefaultTaskRequest"]
			}
		}
		readonly responses: {
			/** @description The default task */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestDefaultTask"]
				}
			}
			/** @description One or more of the following error cases occurred (check the error message for more details):
			 *
			 *
			 *     - the description is empty- the sourceMatcher or targetMatcher is invalid */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to add a default task */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteAllDefaultTasks: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The default tasks have been deleted successfully. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete default tasks */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateDefaultTask: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the default task */
				readonly taskId: string
			}
			readonly cookie?: never
		}
		/** @description The task to be updated */
		readonly requestBody: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestDefaultTaskRequest"]
			}
		}
		readonly responses: {
			/** @description The default task */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestDefaultTask"]
				}
			}
			/** @description One or more of the following error cases occurred (check the error message for more details):
			 *
			 *
			 *     - the provided taskId does not exist- the description is empty- the sourceMatcher or targetMatcher is invalid */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to add a default task */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteDefaultTask: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the default task */
				readonly taskId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The default task has been deleted successfully. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete default tasks */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project or task does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly canRebase: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The rebaseability status of the pull request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequestRebaseability"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the specified pull request. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly rebase: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The ID of the pull request within the repository. */
				readonly pullRequestId: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The pull request rebase request. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestPullRequestRebaseRequest"]
			}
		}
		readonly responses: {
			/** @description The merged pull request. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestPullRequestRebaseResult"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the pull request and/or to update its source branch. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or pull request does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Any of the following error cases occurred (check the error message for more details):
			 *
			 *     - The rebase encountered conflicts.
			 *     - The rebase discarded all of the incoming commits and would have left the pull request empty
			 *     - A <tt>PreRepositoryHook</tt> vetoed the rebase.
			 *     - The specified version is out of date.
			 *     - The specified pull request is not open.
			 *     - The target repository is archived. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createTag: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The create git tag request. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestGitTagCreateRequest"]
			}
		}
		readonly responses: {
			/** @description A JSON representation of the newly created tag. */
			readonly 201: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestTag"]
				}
			}
			/** @description The tag was not created because the request was invalid, e.g. the provided ref name already existed in the repository, or was not a valid ref name in the repository, or the start point is invalid. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to create a tag. This could be due to insufficient repository permissions. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteTag: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The name of the tag to be deleted. */
				readonly name: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description An empty response indicating that the tag no longer exists in the repository. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The tag was not deleted because repository is either empty, or is not a git repository. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to delete a tag. This could be due to insufficient repository permissions. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description If the tag doesn't exist in the repository. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getKeysForUser: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description The name of the user to get keys for (optional; requires ADMIN permission or higher). */
				readonly user?: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Returns a paged response of of keys for the user. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestGpgKey"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to perform this operation. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly addKey: {
		readonly parameters: {
			readonly query?: {
				/** @description The name of the user to add a key for (optional; requires ADMIN permission or higher). */
				readonly user?: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description The request body. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestGpgKey"]
			}
		}
		readonly responses: {
			/** @description Response contains the GPG key that was just created. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestGpgKey"]
				}
			}
			/** @description The request has failed validation. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to perform this operation. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteForUser: {
		readonly parameters: {
			readonly query?: {
				/** @description The username of the user to delete the keys for. If no username is specified, the GPG keys will be deleted for the currently authenticated user. */
				readonly user?: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The GPG keys matching the supplied <strong>user</strong> were deleted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete the GPG keys. This is only possible when a <strong>user</strong> is explicitly supplied. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description No user matches the supplied <strong>user</strong>. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteKey: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The GPG fingerprint or ID. */
				readonly fingerprintOrId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The key has been deleted successfully. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to perform this operation. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAnnotations_1: {
		readonly parameters: {
			readonly query?: {
				/** @description Return only annotations that have one of the provided external IDs. Can be specified more than once to filter by more than one external ID. */
				readonly externalId?: string
				/** @description Return only annotations that belong to one of the provided report keys. Can be specified more than once to filter by more than one report */
				readonly key?: string
				/** @description Return only annotations that appear on one of the provided paths. Can be specified more than once to filter by more than one path. */
				readonly path?: string
				/** @description Return only annotations that have one of the given severities. Can be specified more than once to filter by more than one severity. Valid severities are <code>LOW</code>, <code>MEDIUM</code> and <code>HIGH</code>. */
				readonly severity?: string
				/** @description Return only annotations that have one of the given types. Can be specified more than once to filter by multiple types. Valid types are <code>BUG</code>, <code>CODE_SMELL</code>, and <code>VULNERABILITY</code>. */
				readonly type?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The commit ID on which to record the annotation. This must be a full 40 character commit hash. */
				readonly commitId: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The requested annotations. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestInsightAnnotationsResponse"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions (<code>REPO_READ</code>) to get insight annotations. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project, repository, commit, or report does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getReports: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The commit ID on which to record the annotation. This must be a full 40 character commit hash. */
				readonly commitId: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of reports */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestInsightReport"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions (<code>REPO_READ</code>) to get insight reports. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project, repository or commit does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getACodeInsightsReport: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The commit ID on which to record the annotation. This must be a full 40 character commit hash. */
				readonly commitId: string
				/** @description The report key. */
				readonly key: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The specified report. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestInsightReport"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions (<code>REPO_READ needed</code>) to get insight reports. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project, repository, commit, or report does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setACodeInsightsReport: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The commit ID on which to record the annotation. This must be a full 40 character commit hash. */
				readonly commitId: string
				/** @description A unique string representing the report as chosen by the reporter. This should be unique enough to not clash with other report's keys. To do this, we recommend namespacing the key using reverse DNS */
				readonly key: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The request object containing the details of the report to create (see example). */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestSetInsightReportRequest"]
			}
		}
		readonly responses: {
			/** @description The created report. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestInsightReport"]
				}
			}
			/** @description One of the following error cases occurred (check the error message for more details):
			 *
			 *     - The request does not contain a report title.
			 *     - The data field contains unsupported objects.
			 *     - The request does not contain a report key/
			 *     - The provided commit hash is invalid, according to  the validation rules mentioned for the commitId above.
			 *      */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user is not permitted to create an insight report or authentication failed. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteACodeInsightsReport: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The commit ID on which to record the annotation. This must be a full 40 character commit hash. */
				readonly commitId: string
				/** @description The key of the report to which this annotation belongs. */
				readonly key: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The report and associated annotations were successfully deleted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete insight reports or was not the author (<code>REPO_READ</code> for author otherwise <code>REPO_ADMIN</code>). */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project, repository, commit or report does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAnnotations: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The commit ID on which to record the annotation. This must be a full 40 character commit hash. */
				readonly commitId: string
				/** @description The report key. */
				readonly key: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The specified annotations. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestInsightAnnotationsResponse"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions (<code>REPO_READ needed</code>) to get insight reports. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project, repository, commit, or report does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly addAnnotations: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The commit ID on which to record the annotation. This must be a full 40 character commit hash. */
				readonly commitId: string
				/** @description The key of the report to which this annotation belongs. */
				readonly key: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The annotations to add. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestBulkAddInsightAnnotationRequest"]
			}
		}
		readonly responses: {
			/** @description An empty response indicating that the request succeeded. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user is not the author of the report, or the author no longer has sufficient permissions (<code>REPO_READ</code>). */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project, repository, commit, or report does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteAnnotations: {
		readonly parameters: {
			readonly query?: {
				/** @description The external IDs for the annotations that are to be deleted. Can be specified more than once to delete by more than one external ID, or can be unspecified to delete all annotations. */
				readonly externalId?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The commit ID on which to record the annotation. This must be a full 40 character commit hash. */
				readonly commitId: string
				/** @description The key of the report to which this annotation belongs. */
				readonly key: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The annotations were successfully deleted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete insight reports or was not the author (<code>REPO_READ</code> for author otherwise <code>REPO_ADMIN</code>). */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project, repository, commit or report does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setAnnotation: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The commit ID on which to record the annotation. This must be a full 40 character commit hash. */
				readonly commitId: string
				/** @description The external ID of the annotation that is to be updated or created */
				readonly externalId: string
				/** @description The key of the report to which this annotation belongs */
				readonly key: string
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The new annotation that is to replace the existing one. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestSingleAddInsightAnnotationRequest"]
			}
		}
		readonly responses: {
			/** @description No content, indicating that the request succeeded. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user is not the author of the report, or the author no longer has sufficient permissions (<code>REPO_READ</code>). */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project, repository, commit, report or annotation does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createIssue: {
		readonly parameters: {
			readonly query?: {
				/** @description id of the Jira server */
				readonly applicationId?: string
			}
			readonly header?: never
			readonly path: {
				/** @description the comment to associate the created Jira issue to */
				readonly commentId: string
			}
			readonly cookie?: never
		}
		/** @description A String representation of the JSON format Jira create issue request see: <a href="https://docs.atlassian.com/jira/REST/server/#api/2/issue-createIssue">Jira REST API</a> */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": string
			}
		}
		readonly responses: {
			/** @description The created Jira issue key and the associated comment ID */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestCommentJiraIssue"]
				}
			}
			/** @description The specified application link ID does not match any linked Jira instance. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Authentication with the Jira instance is required. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getCommitsByIssueKey: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description The maximum number of changes to retrieve for each changeset */
				readonly maxChanges?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The issue key to search by */
				readonly issueKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of detailed changesets */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestChangeset"][]
					}
				}
			}
		}
	}
	readonly getEnhancedEntityLinkForProject: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The primary enhanced entitylink. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestEnhancedEntityLink"]
				}
			}
		}
	}
	readonly getIssueKeysForPullRequest: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
				/** @description The pull request id */
				readonly pullRequestId: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A list of Jira issues keys for the pull request */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json;charset=UTF-8": readonly components["schemas"]["RestJiraIssue"][]
				}
			}
		}
	}
	readonly getForRepository_1: {
		readonly parameters: {
			readonly query?: {
				/** @description Controls whether SSH access keys configured at the project level should be included in the results or not. When set to <code>true</code> all keys that have <em>access</em> to the repository (including project level keys) are included in the results. When set to <code>false</code>, only access keys configured for the specified <code>repository</code> are considered. Default is <code>false</code>. */
				readonly effective?: string
				/** @description If specified only SSH access keys with a label prefixed with the supplied string will be returned */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description If specified only SSH access keys with at least the supplied permission will be returned. Default is <code>Permission.REPO_READ</code>. */
				readonly minimumPermission?: string
				readonly permission?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A single page of access keys for the repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestSshAccessKey"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the access keys for this repository */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly addForRepository: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestSshAccessKey"]
			}
		}
		readonly responses: {
			/** @description The newly created access key. */
			readonly 201: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSshAccessKey"]
				}
			}
			/** @description The current request contains invalid or missing values. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to add an access key to the repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getForRepository: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The key id */
				readonly keyId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The access key for the repository and SSH key with ID <code>keyId</code>. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSshAccessKey"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the access keys for this repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or key does not exist or the key does not have access on the repository. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly revokeForRepository: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The key id */
				readonly keyId: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The access key was deleted (or none was found matching the given id). */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to remove access keys for this repository */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updatePermission_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The newly created access key */
				readonly keyId: string
				/** @description The new permission to be granted to the SSH key */
				readonly permission: string
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The newly created access key. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSshAccessKey"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions on the repository to edit its access keys. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getSshKeysForProject: {
		readonly parameters: {
			readonly query?: {
				/** @description If specified only SSH access keys with a label prefixed with the supplied string will be returned. */
				readonly filter?: string
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/** @description If specified only SSH access keys with at least the supplied permission will be returned Default is PROJECT_READ. */
				readonly permission?: string
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A single page of access keys associated with the project. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestSshAccessKey"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the access keys for this project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly addForProject: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestSshAccessKey"]
			}
		}
		readonly responses: {
			/** @description The newly created access key. */
			readonly 201: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSshAccessKey"]
				}
			}
			/** @description The current request contains invalid or missing values. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to add an access key to the project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getForProject: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The key id */
				readonly keyId: string
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The access key for the repository and SSH key with ID <code>keyId</code>. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSshAccessKey"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the access keys for this repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository or key does not exist or the key does not have access on the repository. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly revokeForProject: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The key id */
				readonly keyId: string
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The access key was deleted (or none was found matching the given id). */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to remove access keys for this project. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updatePermission: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The newly created access key */
				readonly keyId: string
				/** @description The new permission to be granted to the SSH key */
				readonly permission: string
				/** @description The project key */
				readonly projectKey: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The newly created access key. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSshAccessKey"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions on the project to edit its access keys. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified project does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly revokeMany: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The identifier of the SSH key */
				readonly keyId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": {
					readonly projects?: components["schemas"]["RestProject"]
					readonly repositories?: components["schemas"]["RestRepository"]
				}
			}
		}
		readonly responses: {
			/** @description The access keys were deleted (or none was found matching the given id and repositories or projects). */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to remove access keys for one or more of the specified projects or repositories. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description On or more of the specified repositories or projects does not exist or the key itself does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getForProjects: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				readonly keyId: number
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The SSH key with ID <code>keyId</code>. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The specified key does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getForRepositories: {
		readonly parameters: {
			readonly query?: {
				/** @description Include the readOnly field. The `readOnly` field is contextual for the user making the request. `readOnly` returns true if there is a restriction and the user does not have`PROJECT_ADMIN` access for the repository the key is associated with. */
				readonly withRestrictions?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The key id */
				readonly keyId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The SSH key with ID <code>keyId</code>. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The specified key does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getPreferredMirrorId: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description the preferred mirror server */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMirrorServer"]
				}
			}
			/** @description The user's preferred mirror server could not be found. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setPreferredMirrorId: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description the mirror ID */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": string
			}
		}
		readonly responses: {
			/** @description an empty response indicating that the user setting has been updated */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The mirror could not be found. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deletePreferredMirrorId: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description an empty response indicating that the user setting has been updated */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
		}
	}
	readonly analyticsSettings: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The analytics settings from upstream */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestAnalyticsSettings"]
				}
			}
		}
	}
	readonly authenticate: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestAuthenticationRequest"]
			}
		}
		readonly responses: {
			/** @description The user for the supplied credentials and their effective permissions}. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestApplicationUserWithPermissions"]
				}
			}
			/** @description If the supplied credentials are incomplete or not understood. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description  The currently authenticated user is not permitted to authenticate on behalf of users or authentication with the supplied user credentials failed for some reason */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getFarmNodes: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The list of farm nodes */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json;charset=UTF-8": readonly components["schemas"]["RestClusterNode"][]
				}
			}
			/** @description The upstream server could not be found */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json;charset=UTF-8": components["schemas"]["RestErrors"]
				}
			}
		}
	}
	readonly getMirroredRepository: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the repository ID */
				readonly externalRepositoryId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The mirrored repository's information. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMirroredRepository"]
				}
			}
			/** @description The upstream server or the repository could not be found. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly listMirrors: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description a page of mirrors */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestMirrorServer"][]
					}
				}
			}
		}
	}
	readonly getMirror: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the mirror ID */
				readonly mirrorId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description the mirror */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMirrorServer"]
				}
			}
			/** @description The mirror could not be found. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly upgrade: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the ID of the mirror to upgrade */
				readonly mirrorId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestMirrorUpgradeRequest"]
			}
		}
		readonly responses: {
			/** @description the mirror */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMirrorServer"]
				}
			}
		}
	}
	readonly remove: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the ID of the mirror to remove */
				readonly mirrorId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description an empty response indicating that the mirror has been removed */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
		}
	}
	readonly publishEvent: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the server id of the mirror that raised this event */
				readonly mirrorId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestRepositoryMirrorEvent"]
			}
		}
		readonly responses: {
			/** @description The event was successfully placed on the queue */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getSynchronizationProgress: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description the synchronization progress state */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSyncProgress"]
				}
			}
			/** @description The upstream server could not be found. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getProjectById: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the ID of the requested project */
				readonly projectId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The project with the specified ID */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestProject"]
				}
			}
			/** @description Project not found */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAllReposForProject: {
		readonly parameters: {
			readonly query?: {
				/** @description includes defaultBranchId in the response, if <code>true</code>. Default value is <code>false</code> */
				readonly includeDefaultBranch?: "false" | "true"
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description the id of the requested project */
				readonly projectId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of repositories with content hashes */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["EnrichedRepository"][]
					}
				}
			}
			/** @description Mirroring is not available */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getAllContentHashes: {
		readonly parameters: {
			readonly query?: {
				/** @description includes defaultBranchId for each repository in the response, if <code>true</code>. Default value is <code>false</code>. */
				readonly includeDefaultBranch?: "false" | "true"
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of repositories with content hashes and default branch */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["EnrichedRepository"]
				}
			}
			/** @description Mirroring is not available */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getContentHashById: {
		readonly parameters: {
			readonly query?: {
				readonly includeDefaultBranch?: boolean
			}
			readonly header?: never
			readonly path: {
				/** @description the ID of the requested repository */
				readonly repoId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The repository with the specified repoId */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["EnrichedRepository"]
				}
			}
			/** @description Repository not found */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRepositoryMirrors: {
		readonly parameters: {
			readonly query?: {
				readonly preAuthorized?: boolean
			}
			readonly header?: never
			readonly path: {
				/** @description the ID of the requested repository */
				readonly repoId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The mirrored repository descriptor */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMirroredRepositoryDescriptor"]
				}
			}
			/** @description Mirroring is not available */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly listRequests: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				/** @description (optional) the request state to filter on */
				readonly state?: "ACCEPTED" | "PENDING" | "REJECTED"
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of mirroring requests */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestMirroringRequest"][]
					}
				}
			}
		}
	}
	readonly register: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestMirroringRequest"]
			}
		}
		readonly responses: {
			/** @description The created mirroring request */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMirroringRequest"]
				}
			}
			/** @description The request was invalid or missing */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getMirroringRequest: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the ID of the mirroring request to retrieve */
				readonly mirroringRequestId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The mirroring request */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMirroringRequest"]
				}
			}
			/** @description The request could not be found */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteMirroringRequest: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the ID of the mirroring request to delete */
				readonly mirroringRequestId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The request was deleted */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The request could not be found */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly accept: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the ID of the request to accept */
				readonly mirroringRequestId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The accepted mirror server */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMirrorServer"]
				}
			}
			/** @description The request could not be found */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly reject: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the ID of the request to reject */
				readonly mirroringRequestId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The rejected mirror server */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMirrorServer"]
				}
			}
			/** @description The request could not be found */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getOutOfSyncRepositories: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The upstream IDs of the repositories that are out of sync on the mirror node */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json;charset=UTF-8": string
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json;charset=UTF-8": components["schemas"]["RestErrors"]
				}
			}
			/** @description The feature is not enabled i.e. <code>plugin.mirroring.repository.diagnostics.sync.enabled=false</code> */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json;charset=UTF-8": components["schemas"]["RestErrors"]
				}
			}
		}
	}
	readonly getRepositoryLockOwner: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The information about the repository lock owner for the syncing process, if the lock is currently being held, otherwise an empty response */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRepositoryLockOwner"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRepoSyncStatus_1: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key */
				readonly projectKey: string
				/** @description The repository slug */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The sync status of the repository on this node */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestMirrorRepositorySynchronizationStatus"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRefChangesQueue: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The contents of the ref changes queue */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json;charset=UTF-8": components["schemas"]["RestRefSyncQueue"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestErrors"]
				}
			}
		}
	}
	readonly getRefChangesQueueCount: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The total number of items currently in the ref changes queue */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRepositoryLockOwners: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A list of all the repository lock owners for the syncing process */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json;charset=UTF-8": readonly components["schemas"]["RestRepositoryLockOwner"][]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestErrors"]
				}
			}
		}
	}
	readonly getRepoSyncStatus: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The sync status of the repositories on this node */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestMirrorRepositorySynchronizationStatus"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to call this resource. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getMirrorSettings: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description the mirror settings */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestUpstreamSettings"]
				}
			}
			/** @description When the user is not a service user for the currently registered upstream or doesn't have ADMIN permission */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The upstream server could not be found. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setMirrorSettings: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description the mirror settings to update to */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestUpstreamSettings"]
			}
		}
		readonly responses: {
			/** @description the updated mirror settings */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestUpstreamSettings"]
				}
			}
			/** @description When the user is not a service user for the currently registered upstream or doesn't have ADMIN permission */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The upstream server could not be found. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getMirrorMode: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description the current mirror mode */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description When the user is not a service user for the currently registered upstream or doesn't have ADMIN permission */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The upstream server could not be found. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setMirrorMode: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": string
			}
		}
		readonly responses: {
			/** @description the mode to set */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description The provided mode is invalid */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description When the user is not a service user for the currently registered upstream or doesn't have ADMIN permission */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getMirroredProjects: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description the currently mirrored project IDs */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description When the user is not a service user for the currently registered upstream or doesn't have ADMIN permission */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The upstream server could not be found. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly startMirroringProjects: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": readonly string[]
			}
		}
		readonly responses: {
			/** @description the currently mirrored project IDs */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description When the user is not a service user for the currently registered upstream or doesn't have ADMIN permission */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The upstream server could not be found. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly startMirroringProject: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				readonly projectId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description the currently mirrored project IDs */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": unknown
				}
			}
			/** @description When the user is not a service user for the currently registered upstream or doesn't have ADMIN permission */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The upstream server could not be found. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly stopMirroringProject: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the project ID to stop mirroring */
				readonly projectId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description the request has been processed */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description When the user is not a service user for the currently registered upstream or doesn't have ADMIN permission */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The upstream server could not be found. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getUpstreamServer: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The upstream server. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestUpstreamServer"]
				}
			}
			/** @description The upstream server could not be found */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly endRollingUpgrade: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The state of the rolling upgrade which includes the current version on all the nodes in the farm. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRollingUpgradeState"]
				}
			}
			/** @description When the user doesn't have SYS_ADMIN permission */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly startRollingUpgrade: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The state of the rolling upgrade which includes the minimum version of all the nodes in the farm. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRollingUpgradeState"]
				}
			}
			/** @description When the user doesn't have SYS_ADMIN permission */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRepositoryArchivePolicy: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A response containing the repository archive policy for the instance */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRepositoryPolicy"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the repository archive policy */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setRepositoryArchivePolicy: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description The request containing the details of the policy. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestRepositoryPolicy"]
			}
		}
		readonly responses: {
			/** @description A response containing the repository archive policy for the instance */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRepositoryPolicy"]
				}
			}
			/** @description The permission was invalid or does not exist */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to set the repository archive policy */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getRepositoryDeletePolicy: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A response containing the repository delete policy for the instance */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRepositoryPolicy"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to retrieve the repository delete policy */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setRepositoryDeletePolicy: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		/** @description The request containing the details of the policy. */
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestRepositoryPolicy"]
			}
		}
		readonly responses: {
			/** @description A response containing the repository delete policy for the instance */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRepositoryPolicy"]
				}
			}
			/** @description The permission was invalid or does not exist */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to set the repository delete policy */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly createRequiredBuildsMergeCheck: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project that the repository belongs to */
				readonly projectKey: string
				/** @description The repository being used */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The request specifying the required build parent keys, ref matcher and exemption matcher */
		readonly requestBody?: {
			readonly content: {
				readonly "*/*": components["schemas"]["RestRequiredBuildConditionSetRequest"]
			}
		}
		readonly responses: {
			/** @description A response containing the newly created required build merge check. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRequiredBuildCondition"]
				}
			}
			/** @description The request was malformed. This could be caused because:
			 *
			 *     - The build parent key list is empty
			 *     - Either of the provided ref matchers is of an unrecognized type
			 *     - Either of the provided ref matchers could not be created with the provided type and id
			 *
			 *
			 *      */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to create a required build merge check in this repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly updateRequiredBuildsMergeCheck: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				readonly id: number
				/** @description The project that the repository belongs to */
				readonly projectKey: string
				/** @description The repository being used */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		/** @description The request specifying the required build parent keys, ref matcher and exemption matcher */
		readonly requestBody?: {
			readonly content: {
				readonly "*/*": components["schemas"]["RestRequiredBuildConditionSetRequest"]
			}
		}
		readonly responses: {
			/** @description The details needed to update a required build merge check. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRequiredBuildCondition"]
				}
			}
			/** @description The request was malformed. This could be caused because:
			 *
			 *     - The build parent key list is empty
			 *     - Either of the provided ref matchers is of an unrecognized type
			 *     - Either of the provided ref matchers could not be created with the provided type and id
			 *
			 *
			 *      */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to create a required build merge check in this repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteRequiredBuildsMergeCheck: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				readonly id: number
				/** @description The project that the repository belongs to */
				readonly projectKey: string
				/** @description The repository being used */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description An empty response indicating the merge check was successfully deleted, or was never present. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete a required build merge check in this repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getPageOfRequiredBuildsMergeChecks: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
			}
			readonly header?: never
			readonly path: {
				/** @description The project that the repository belongs to */
				readonly projectKey: string
				/** @description The repository being used */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The required build merge checks associated with the provided repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestRequiredBuildCondition"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to request a page of required build merge checks in this repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getSshKeys: {
		readonly parameters: {
			readonly query?: {
				/**
				 * @description Number of items to return. If not passed, a page size of 25 is used.
				 * @example 25
				 */
				readonly limit?: number
				/**
				 * @description Start number for the page (inclusive). If not passed, first page is assumed.
				 * @example 0
				 */
				readonly start?: number
				readonly user?: string
				/** @description the username of the user to retrieve the keys for. If no username is specified, the SSH keys will be retrieved for the current authenticated user. */
				readonly userName?: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description A page of SSH keys. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly isLastPage?: boolean
						/** @example 25 */
						readonly limit?: number
						/** Format: int32 */
						readonly nextPageStart?: number
						/** @example 1 */
						readonly size?: number
						/** Format: int32 */
						readonly start?: number
						readonly values?: readonly components["schemas"]["RestSshKey"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissionsto retrieve the SSH keys. This is only possible when a<strong>user</strong> is explicitly supplied. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description No user matches the supplied <strong>user</strong> */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly addSshKey: {
		readonly parameters: {
			readonly query?: {
				/** @description the username of the user to add the SSH key for. If no username is specified, the SSH key will be added for the current authenticated user. */
				readonly user?: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": {
					readonly algorithmType?: string
					/** Format: int32 */
					readonly bitLength?: number
					/** Format: date-time */
					readonly createdDate?: string
					/**
					 * Format: int32
					 * @example 30
					 */
					readonly expiryDays?: number
					/** @example Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI */
					readonly fingerprint?: string
					/**
					 * Format: int32
					 * @example 1
					 */
					readonly id?: number
					/** @example me@127.0.0.1 */
					readonly label?: string
					/** @example 1630041546434 */
					readonly lastAuthenticated?: string
					/** @example ssh-rsa AAAAB3... me@127.0.0.1 */
					readonly text?: string
				}
			}
		}
		readonly responses: {
			/** @description The newly created SSH key. */
			readonly 201: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSshKey"]
				}
			}
			/** @description The SSH key was not created because the key was not a valid RSA/DSA/ECDSA/Ed25519 key of a supported length. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Either there is no authenticated user or the currently authenticated user has insufficient permissions to add an SSH key. The latter is only possible when a <strong>user</strong> is explicitly supplied. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description No user matches the supplied <strong>user</strong> */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The SSH key already exists on the system. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteSshKeys: {
		readonly parameters: {
			readonly query?: {
				readonly user?: string
				/** @description the username of the user to delete the keys for. If no username is specified, the SSH keys will be deleted for the current authenticated user. */
				readonly userName?: string
			}
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The SSH keys matching the supplied <strong>user</strong> were deleted. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete the SSH keys. This is only possible when a <strong>user</strong> is explicitly supplied. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description No user matches the supplied <strong>user</strong> */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getSshKey: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the ID of the key to retrieve. */
				readonly keyId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description An SSH key. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSshKey"]
				}
			}
			/** @description The currently authenticated user has insufficient permissionsto retrieve the SSH key. This is only possible when a<strong>keyId</strong> is explicitly supplied. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description No SSH key matches the supplied <strong>keyId</strong> */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly deleteSshKey: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description the id of the key to delete. */
				readonly keyId: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The SSH key matching the supplied <strong>id</strong> was deleted or did not exist. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The currently authenticated user has insufficient permissions to delete the SSH key. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly sshSettings: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path?: never
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description The ssh settings from upstream */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestSshSettings"]
				}
			}
			/** @description The request was not authenticated */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly getStatus: {
		readonly parameters: {
			readonly query?: {
				/** @description Retrieves the synchronization status for the specified ref within the repository, rather than for the entire repository */
				readonly at?: string
			}
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: never
		readonly responses: {
			/** @description Synchronization status for the specified repository, or specific ref within that repository. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRefSyncStatus"]
				}
			}
			/** @description The currently authenticated user has insufficient permissions to view the repository, or the repository is not public if the request is anonymous. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly setEnabled: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestRefSyncStatus"]
			}
		}
		readonly responses: {
			/** @description The updated synchronization status for the repository, after enabling synchronization. 204 NO CONTENT is returned instead after disabling synchronization. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRefSyncStatus"]
				}
			}
			/** @description Synchronization has successfully been disabled. 200 OK, with updated status information, is returned instead after enabling synchronization. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The JSON payload for the request did not define the "enabled" property. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to manage synchronization in the specified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
	readonly synchronize: {
		readonly parameters: {
			readonly query?: never
			readonly header?: never
			readonly path: {
				/** @description The project key. */
				readonly projectKey: string
				/** @description The repository slug. */
				readonly repositorySlug: string
			}
			readonly cookie?: never
		}
		readonly requestBody?: {
			readonly content: {
				readonly "application/json": components["schemas"]["RestRefSyncRequest"]
			}
		}
		readonly responses: {
			/** @description The requested action was successfully performed, and has updated the ref's state, but the ref if is still not in sync with upstream. For example, after applying the <tt>MERGE</tt> action, the ref will still be <tt>AHEAD</tt> of upstream. If the action brings the ref in sync with upstream, 204 NO CONTENT is returned instead. */
			readonly 200: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": components["schemas"]["RestRejectedRef"]
				}
			}
			/** @description The requested action was successfully performed and the ref is now in sync with upstream. If the action updates the ref but does not bring it in sync with upstream, 200 OK is returned instead. */
			readonly 204: {
				headers: Readonly<Record<string, unknown>>
				content?: never
			}
			/** @description The requested synchronization action was not understood. */
			readonly 400: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The currently authenticated user has insufficient permissions to update refs within the specified repository. */
			readonly 401: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The specified repository does not exist. */
			readonly 404: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description Synchronization is not available or enabled for the specified repository, or the ref is already in sync with upstream. */
			readonly 409: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
			/** @description The requested synchronization action was understood by the server, but the mechanism to apply it has not been implemented. */
			readonly 501: {
				headers: Readonly<Record<string, unknown>>
				content: {
					readonly "application/json": {
						readonly errors?: readonly components["schemas"]["RestErrorMessage"][]
					}
				}
			}
		}
	}
}
